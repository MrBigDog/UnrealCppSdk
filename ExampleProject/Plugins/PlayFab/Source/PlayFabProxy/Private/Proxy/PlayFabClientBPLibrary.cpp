// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFabClientBPLibrary.h"


void UPFClientProxyLibrary::BreakBPClientAcceptTradeRequest(
		const FBPClientAcceptTradeRequest& In
        ,FString& OutOfferingPlayerId
        ,FString& OutTradeId
        ,TArray<FString>& OutAcceptedInventoryInstanceIds
	)
{
    OutOfferingPlayerId = In.Data.OfferingPlayerId;
	OutTradeId = In.Data.TradeId;
	OutAcceptedInventoryInstanceIds = In.Data.AcceptedInventoryInstanceIds;
	
}

void UPFClientProxyLibrary::BreakBPClientAcceptTradeResponse(
		const FBPClientAcceptTradeResponse& In
        ,FBPClientTradeInfo& OutTrade
	)
{
    if (In.Data.Trade.IsValid()) {    OutTrade.Data = *In.Data.Trade;}
	
}

void UPFClientProxyLibrary::BreakBPClientAddFriendRequest(
		const FBPClientAddFriendRequest& In
        ,FString& OutFriendPlayFabId
        ,FString& OutFriendUsername
        ,FString& OutFriendEmail
        ,FString& OutFriendTitleDisplayName
	)
{
    OutFriendPlayFabId = In.Data.FriendPlayFabId;
	OutFriendUsername = In.Data.FriendUsername;
	OutFriendEmail = In.Data.FriendEmail;
	OutFriendTitleDisplayName = In.Data.FriendTitleDisplayName;
	
}

void UPFClientProxyLibrary::BreakBPClientAddFriendResult(
		const FBPClientAddFriendResult& In
        ,bool& OutCreated
	)
{
    OutCreated = In.Data.Created;
	
}

void UPFClientProxyLibrary::BreakBPClientAddGenericIDRequest(
		const FBPClientAddGenericIDRequest& In
        ,FBPClientGenericServiceId& OutGenericId
	)
{
    OutGenericId.Data = In.Data.GenericId;
	
}

void UPFClientProxyLibrary::BreakBPClientAddGenericIDResult(
		const FBPClientAddGenericIDResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientAddSharedGroupMembersRequest(
		const FBPClientAddSharedGroupMembersRequest& In
        ,FString& OutSharedGroupId
        ,TArray<FString>& OutPlayFabIds
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	OutPlayFabIds = In.Data.PlayFabIds;
	
}

void UPFClientProxyLibrary::BreakBPClientAddSharedGroupMembersResult(
		const FBPClientAddSharedGroupMembersResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientAddUsernamePasswordRequest(
		const FBPClientAddUsernamePasswordRequest& In
        ,FString& OutUsername
        ,FString& OutEmail
        ,FString& OutPassword
	)
{
    OutUsername = In.Data.Username;
	OutEmail = In.Data.Email;
	OutPassword = In.Data.Password;
	
}

void UPFClientProxyLibrary::BreakBPClientAddUsernamePasswordResult(
		const FBPClientAddUsernamePasswordResult& In
        ,FString& OutUsername
	)
{
    OutUsername = In.Data.Username;
	
}

void UPFClientProxyLibrary::BreakBPClientAddUserVirtualCurrencyRequest(
		const FBPClientAddUserVirtualCurrencyRequest& In
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFClientProxyLibrary::BreakBPClientAndroidDevicePushNotificationRegistrationRequest(
		const FBPClientAndroidDevicePushNotificationRegistrationRequest& In
        ,FString& OutDeviceToken
        ,bool& OutSendPushNotificationConfirmation
        ,FString& OutConfirmationMessage
	)
{
    OutDeviceToken = In.Data.DeviceToken;
	OutSendPushNotificationConfirmation = In.Data.SendPushNotificationConfirmation;
	OutConfirmationMessage = In.Data.ConfirmationMessage;
	
}

void UPFClientProxyLibrary::BreakBPClientAndroidDevicePushNotificationRegistrationResult(
		const FBPClientAndroidDevicePushNotificationRegistrationResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientAttributeInstallRequest(
		const FBPClientAttributeInstallRequest& In
        ,FString& OutIdfa
        ,FString& OutAndroid_Id
        ,FString& OutAdid
	)
{
    OutIdfa = In.Data.Idfa;
	OutAndroid_Id = In.Data.Android_Id;
	OutAdid = In.Data.Adid;
	
}

void UPFClientProxyLibrary::BreakBPClientAttributeInstallResult(
		const FBPClientAttributeInstallResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientCancelTradeRequest(
		const FBPClientCancelTradeRequest& In
        ,FString& OutTradeId
	)
{
    OutTradeId = In.Data.TradeId;
	
}

void UPFClientProxyLibrary::BreakBPClientCancelTradeResponse(
		const FBPClientCancelTradeResponse& In
        ,FBPClientTradeInfo& OutTrade
	)
{
    if (In.Data.Trade.IsValid()) {    OutTrade.Data = *In.Data.Trade;}
	
}

void UPFClientProxyLibrary::BreakBPClientCartItem(
		const FBPClientCartItem& In
        ,FString& OutItemId
        ,FString& OutItemClass
        ,FString& OutItemInstanceId
        ,FString& OutDisplayName
        ,FString& OutDescription
	)
{
    OutItemId = In.Data.ItemId;
	OutItemClass = In.Data.ItemClass;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutDisplayName = In.Data.DisplayName;
	OutDescription = In.Data.Description;
	
	
	
	
}

void UPFClientProxyLibrary::BreakBPClientCatalogItem(
		const FBPClientCatalogItem& In
        ,FString& OutItemId
        ,FString& OutItemClass
        ,FString& OutCatalogVersion
        ,FString& OutDisplayName
        ,FString& OutDescription
        ,TArray<FString>& OutTags
        ,FString& OutCustomData
        ,FBPClientCatalogItemConsumableInfo& OutConsumable
        ,FBPClientCatalogItemContainerInfo& OutContainer
        ,FBPClientCatalogItemBundleInfo& OutBundle
        ,bool& OutCanBecomeCharacter
        ,bool& OutIsStackable
        ,bool& OutIsTradable
        ,FString& OutItemImageUrl
        ,bool& OutIsLimitedEdition
        ,int32& OutInitialLimitedEditionCount
	)
{
    OutItemId = In.Data.ItemId;
	OutItemClass = In.Data.ItemClass;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutDisplayName = In.Data.DisplayName;
	OutDescription = In.Data.Description;
	
	
	OutTags = In.Data.Tags;
	OutCustomData = In.Data.CustomData;
	if (In.Data.Consumable.IsValid()) {    OutConsumable.Data = *In.Data.Consumable;}
	if (In.Data.Container.IsValid()) {    OutContainer.Data = *In.Data.Container;}
	if (In.Data.Bundle.IsValid()) {    OutBundle.Data = *In.Data.Bundle;}
	OutCanBecomeCharacter = In.Data.CanBecomeCharacter;
	OutIsStackable = In.Data.IsStackable;
	OutIsTradable = In.Data.IsTradable;
	OutItemImageUrl = In.Data.ItemImageUrl;
	OutIsLimitedEdition = In.Data.IsLimitedEdition;
	OutInitialLimitedEditionCount = In.Data.InitialLimitedEditionCount;
	
}

void UPFClientProxyLibrary::BreakBPClientCatalogItemBundleInfo(
		const FBPClientCatalogItemBundleInfo& In
        ,TArray<FString>& OutBundledItems
        ,TArray<FString>& OutBundledResultTables
	)
{
    OutBundledItems = In.Data.BundledItems;
	OutBundledResultTables = In.Data.BundledResultTables;
	
	
}

void UPFClientProxyLibrary::BreakBPClientCatalogItemConsumableInfo(
		const FBPClientCatalogItemConsumableInfo& In
        ,int32& OutUsageCount
        ,int32& OutUsagePeriod
        ,FString& OutUsagePeriodGroup
	)
{
    OutUsageCount = In.Data.UsageCount;
	OutUsagePeriod = In.Data.UsagePeriod;
	OutUsagePeriodGroup = In.Data.UsagePeriodGroup;
	
}

void UPFClientProxyLibrary::BreakBPClientCatalogItemContainerInfo(
		const FBPClientCatalogItemContainerInfo& In
        ,FString& OutKeyItemId
        ,TArray<FString>& OutItemContents
        ,TArray<FString>& OutResultTableContents
	)
{
    OutKeyItemId = In.Data.KeyItemId;
	OutItemContents = In.Data.ItemContents;
	OutResultTableContents = In.Data.ResultTableContents;
	
	
}

void UPFClientProxyLibrary::BreakBPClientCharacterInventory(
		const FBPClientCharacterInventory& In
        ,FString& OutCharacterId
        ,TArray<FBPClientItemInstance>& OutInventory
	)
{
    OutCharacterId = In.Data.CharacterId;
	for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientCharacterLeaderboardEntry(
		const FBPClientCharacterLeaderboardEntry& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutCharacterName
        ,FString& OutDisplayName
        ,FString& OutCharacterType
        ,int32& OutStatValue
        ,int32& OutPosition
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutCharacterName = In.Data.CharacterName;
	OutDisplayName = In.Data.DisplayName;
	OutCharacterType = In.Data.CharacterType;
	OutStatValue = In.Data.StatValue;
	OutPosition = In.Data.Position;
	
}

void UPFClientProxyLibrary::BreakBPClientCharacterResult(
		const FBPClientCharacterResult& In
        ,FString& OutCharacterId
        ,FString& OutCharacterName
        ,FString& OutCharacterType
	)
{
    OutCharacterId = In.Data.CharacterId;
	OutCharacterName = In.Data.CharacterName;
	OutCharacterType = In.Data.CharacterType;
	
}

void UPFClientProxyLibrary::BreakBPClientCloudScriptRevisionOption(
		const FBPClientCloudScriptRevisionOption& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientCollectionFilter(
		const FBPClientCollectionFilter& In
        ,TArray<FBPClientContainer_Dictionary_String_String>& OutIncludes
        ,TArray<FBPClientContainer_Dictionary_String_String>& OutExcludes
	)
{
    for (const PlayFab::ClientModels::FContainer_Dictionary_String_String& elem : In.Data.Includes)
    {
        FBPClientContainer_Dictionary_String_String result;
        result.Data = elem;
        OutIncludes.Add(result);
    }

	for (const PlayFab::ClientModels::FContainer_Dictionary_String_String& elem : In.Data.Excludes)
    {
        FBPClientContainer_Dictionary_String_String result;
        result.Data = elem;
        OutExcludes.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientConfirmPurchaseRequest(
		const FBPClientConfirmPurchaseRequest& In
        ,FString& OutOrderId
	)
{
    OutOrderId = In.Data.OrderId;
	
}

void UPFClientProxyLibrary::BreakBPClientConfirmPurchaseResult(
		const FBPClientConfirmPurchaseResult& In
        ,FString& OutOrderId
        ,FDateTime& OutPurchaseDate
        ,TArray<FBPClientItemInstance>& OutItems
	)
{
    OutOrderId = In.Data.OrderId;
	
	for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.Items)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutItems.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientConsumeItemRequest(
		const FBPClientConsumeItemRequest& In
        ,FString& OutItemInstanceId
        ,int32& OutConsumeCount
        ,FString& OutCharacterId
	)
{
    OutItemInstanceId = In.Data.ItemInstanceId;
	OutConsumeCount = In.Data.ConsumeCount;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFClientProxyLibrary::BreakBPClientConsumeItemResult(
		const FBPClientConsumeItemResult& In
        ,FString& OutItemInstanceId
        ,int32& OutRemainingUses
	)
{
    OutItemInstanceId = In.Data.ItemInstanceId;
	OutRemainingUses = In.Data.RemainingUses;
	
}

void UPFClientProxyLibrary::BreakBPClientContainer_Dictionary_String_String(
		const FBPClientContainer_Dictionary_String_String& In
	)
{
    
	
}

void UPFClientProxyLibrary::BreakBPClientCreateSharedGroupRequest(
		const FBPClientCreateSharedGroupRequest& In
        ,FString& OutSharedGroupId
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	
}

void UPFClientProxyLibrary::BreakBPClientCreateSharedGroupResult(
		const FBPClientCreateSharedGroupResult& In
        ,FString& OutSharedGroupId
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	
}

void UPFClientProxyLibrary::BreakBPClientCurrency(
		const FBPClientCurrency& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientCurrentGamesRequest(
		const FBPClientCurrentGamesRequest& In
        ,FString& OutBuildVersion
        ,FString& OutGameMode
        ,FString& OutStatisticName
        ,FBPClientCollectionFilter& OutTagFilter
	)
{
    
	OutBuildVersion = In.Data.BuildVersion;
	OutGameMode = In.Data.GameMode;
	OutStatisticName = In.Data.StatisticName;
	if (In.Data.TagFilter.IsValid()) {    OutTagFilter.Data = *In.Data.TagFilter;}
	
}

void UPFClientProxyLibrary::BreakBPClientCurrentGamesResult(
		const FBPClientCurrentGamesResult& In
        ,TArray<FBPClientGameInfo>& OutGames
        ,int32& OutPlayerCount
        ,int32& OutGameCount
	)
{
    for (const PlayFab::ClientModels::FGameInfo& elem : In.Data.Games)
    {
        FBPClientGameInfo result;
        result.Data = elem;
        OutGames.Add(result);
    }

	OutPlayerCount = In.Data.PlayerCount;
	OutGameCount = In.Data.GameCount;
	
}

void UPFClientProxyLibrary::BreakBPClientEmptyResult(
		const FBPClientEmptyResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientExecuteCloudScriptRequest(
		const FBPClientExecuteCloudScriptRequest& In
        ,FString& OutFunctionName
        ,int32& OutSpecificRevision
        ,bool& OutGeneratePlayStreamEvent
	)
{
    OutFunctionName = In.Data.FunctionName;
	
	
	OutSpecificRevision = In.Data.SpecificRevision;
	OutGeneratePlayStreamEvent = In.Data.GeneratePlayStreamEvent;
	
}

void UPFClientProxyLibrary::BreakBPClientExecuteCloudScriptResult(
		const FBPClientExecuteCloudScriptResult& In
        ,FString& OutFunctionName
        ,int32& OutRevision
        ,TArray<FBPClientLogStatement>& OutLogs
        ,float& OutExecutionTimeSeconds
        ,float& OutProcessorTimeSeconds
        ,int32& OutMemoryConsumedBytes
        ,int32& OutAPIRequestsIssued
        ,int32& OutHttpRequestsIssued
        ,FBPClientScriptExecutionError& OutError
	)
{
    OutFunctionName = In.Data.FunctionName;
	OutRevision = In.Data.Revision;
	
	for (const PlayFab::ClientModels::FLogStatement& elem : In.Data.Logs)
    {
        FBPClientLogStatement result;
        result.Data = elem;
        OutLogs.Add(result);
    }

	OutExecutionTimeSeconds = In.Data.ExecutionTimeSeconds;
	OutProcessorTimeSeconds = In.Data.ProcessorTimeSeconds;
	OutMemoryConsumedBytes = In.Data.MemoryConsumedBytes;
	OutAPIRequestsIssued = In.Data.APIRequestsIssued;
	OutHttpRequestsIssued = In.Data.HttpRequestsIssued;
	if (In.Data.Error.IsValid()) {    OutError.Data = *In.Data.Error;}
	
}

void UPFClientProxyLibrary::BreakBPClientFacebookPlayFabIdPair(
		const FBPClientFacebookPlayFabIdPair& In
        ,FString& OutFacebookId
        ,FString& OutPlayFabId
	)
{
    OutFacebookId = In.Data.FacebookId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientFriendInfo(
		const FBPClientFriendInfo& In
        ,FString& OutFriendPlayFabId
        ,FString& OutUsername
        ,FString& OutTitleDisplayName
        ,TArray<FString>& OutTags
        ,FString& OutCurrentMatchmakerLobbyId
        ,FBPClientUserFacebookInfo& OutFacebookInfo
        ,FBPClientUserSteamInfo& OutSteamInfo
        ,FBPClientUserGameCenterInfo& OutGameCenterInfo
	)
{
    OutFriendPlayFabId = In.Data.FriendPlayFabId;
	OutUsername = In.Data.Username;
	OutTitleDisplayName = In.Data.TitleDisplayName;
	OutTags = In.Data.Tags;
	OutCurrentMatchmakerLobbyId = In.Data.CurrentMatchmakerLobbyId;
	if (In.Data.FacebookInfo.IsValid()) {    OutFacebookInfo.Data = *In.Data.FacebookInfo;}
	if (In.Data.SteamInfo.IsValid()) {    OutSteamInfo.Data = *In.Data.SteamInfo;}
	if (In.Data.GameCenterInfo.IsValid()) {    OutGameCenterInfo.Data = *In.Data.GameCenterInfo;}
	
}

void UPFClientProxyLibrary::BreakBPClientGameCenterPlayFabIdPair(
		const FBPClientGameCenterPlayFabIdPair& In
        ,FString& OutGameCenterId
        ,FString& OutPlayFabId
	)
{
    OutGameCenterId = In.Data.GameCenterId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientGameInfo(
		const FBPClientGameInfo& In
        ,FString& OutLobbyID
        ,FString& OutBuildVersion
        ,FString& OutGameMode
        ,FString& OutStatisticName
        ,int32& OutMaxPlayers
        ,TArray<FString>& OutPlayerUserIds
        ,int32& OutRunTime
        ,FString& OutGameServerData
        ,FDateTime& OutLastHeartbeat
        ,FString& OutServerHostname
        ,int32& OutServerPort
	)
{
    
	OutLobbyID = In.Data.LobbyID;
	OutBuildVersion = In.Data.BuildVersion;
	OutGameMode = In.Data.GameMode;
	OutStatisticName = In.Data.StatisticName;
	OutMaxPlayers = In.Data.MaxPlayers;
	OutPlayerUserIds = In.Data.PlayerUserIds;
	OutRunTime = In.Data.RunTime;
	
	OutGameServerData = In.Data.GameServerData;
	
	
	OutServerHostname = In.Data.ServerHostname;
	OutServerPort = In.Data.ServerPort;
	
}

void UPFClientProxyLibrary::BreakBPClientGameInstanceState(
		const FBPClientGameInstanceState& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientGameServerRegionsRequest(
		const FBPClientGameServerRegionsRequest& In
        ,FString& OutBuildVersion
        ,FString& OutTitleId
	)
{
    OutBuildVersion = In.Data.BuildVersion;
	OutTitleId = In.Data.TitleId;
	
}

void UPFClientProxyLibrary::BreakBPClientGameServerRegionsResult(
		const FBPClientGameServerRegionsResult& In
        ,TArray<FBPClientRegionInfo>& OutRegions
	)
{
    for (const PlayFab::ClientModels::FRegionInfo& elem : In.Data.Regions)
    {
        FBPClientRegionInfo result;
        result.Data = elem;
        OutRegions.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGenericPlayFabIdPair(
		const FBPClientGenericPlayFabIdPair& In
        ,FBPClientGenericServiceId& OutGenericId
        ,FString& OutPlayFabId
	)
{
    if (In.Data.GenericId.IsValid()) {    OutGenericId.Data = *In.Data.GenericId;}
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientGenericServiceId(
		const FBPClientGenericServiceId& In
        ,FString& OutServiceName
        ,FString& OutUserId
	)
{
    OutServiceName = In.Data.ServiceName;
	OutUserId = In.Data.UserId;
	
}

void UPFClientProxyLibrary::BreakBPClientGetAccountInfoRequest(
		const FBPClientGetAccountInfoRequest& In
        ,FString& OutPlayFabId
        ,FString& OutUsername
        ,FString& OutEmail
        ,FString& OutTitleDisplayName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutUsername = In.Data.Username;
	OutEmail = In.Data.Email;
	OutTitleDisplayName = In.Data.TitleDisplayName;
	
}

void UPFClientProxyLibrary::BreakBPClientGetAccountInfoResult(
		const FBPClientGetAccountInfoResult& In
        ,FBPClientUserAccountInfo& OutAccountInfo
	)
{
    if (In.Data.AccountInfo.IsValid()) {    OutAccountInfo.Data = *In.Data.AccountInfo;}
	
}

void UPFClientProxyLibrary::BreakBPClientGetCatalogItemsRequest(
		const FBPClientGetCatalogItemsRequest& In
        ,FString& OutCatalogVersion
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientGetCatalogItemsResult(
		const FBPClientGetCatalogItemsResult& In
        ,TArray<FBPClientCatalogItem>& OutCatalog
	)
{
    for (const PlayFab::ClientModels::FCatalogItem& elem : In.Data.Catalog)
    {
        FBPClientCatalogItem result;
        result.Data = elem;
        OutCatalog.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetCharacterDataRequest(
		const FBPClientGetCharacterDataRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,TArray<FString>& OutKeys
        ,int32& OutIfChangedFromDataVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutKeys = In.Data.Keys;
	OutIfChangedFromDataVersion = In.Data.IfChangedFromDataVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientGetCharacterDataResult(
		const FBPClientGetCharacterDataResult& In
        ,FString& OutCharacterId
        ,int32& OutDataVersion
	)
{
    OutCharacterId = In.Data.CharacterId;
	
	OutDataVersion = In.Data.DataVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientGetCharacterInventoryRequest(
		const FBPClientGetCharacterInventoryRequest& In
        ,FString& OutCharacterId
        ,FString& OutCatalogVersion
	)
{
    OutCharacterId = In.Data.CharacterId;
	OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientGetCharacterInventoryResult(
		const FBPClientGetCharacterInventoryResult& In
        ,FString& OutCharacterId
        ,TArray<FBPClientItemInstance>& OutInventory
	)
{
    OutCharacterId = In.Data.CharacterId;
	for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
	
	
}

void UPFClientProxyLibrary::BreakBPClientGetCharacterLeaderboardRequest(
		const FBPClientGetCharacterLeaderboardRequest& In
        ,FString& OutCharacterType
        ,FString& OutStatisticName
        ,int32& OutStartPosition
        ,int32& OutMaxResultsCount
	)
{
    OutCharacterType = In.Data.CharacterType;
	OutStatisticName = In.Data.StatisticName;
	OutStartPosition = In.Data.StartPosition;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	
}

void UPFClientProxyLibrary::BreakBPClientGetCharacterLeaderboardResult(
		const FBPClientGetCharacterLeaderboardResult& In
        ,TArray<FBPClientCharacterLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ClientModels::FCharacterLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPClientCharacterLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetCharacterStatisticsRequest(
		const FBPClientGetCharacterStatisticsRequest& In
        ,FString& OutCharacterId
	)
{
    OutCharacterId = In.Data.CharacterId;
	
}

void UPFClientProxyLibrary::BreakBPClientGetCharacterStatisticsResult(
		const FBPClientGetCharacterStatisticsResult& In
	)
{
    
	
}

void UPFClientProxyLibrary::BreakBPClientGetContentDownloadUrlRequest(
		const FBPClientGetContentDownloadUrlRequest& In
        ,FString& OutKey
        ,FString& OutHttpMethod
        ,bool& OutThruCDN
	)
{
    OutKey = In.Data.Key;
	OutHttpMethod = In.Data.HttpMethod;
	OutThruCDN = In.Data.ThruCDN;
	
}

void UPFClientProxyLibrary::BreakBPClientGetContentDownloadUrlResult(
		const FBPClientGetContentDownloadUrlResult& In
        ,FString& OutURL
	)
{
    OutURL = In.Data.URL;
	
}

void UPFClientProxyLibrary::BreakBPClientGetFriendLeaderboardAroundPlayerRequest(
		const FBPClientGetFriendLeaderboardAroundPlayerRequest& In
        ,FString& OutStatisticName
        ,int32& OutMaxResultsCount
        ,FString& OutPlayFabId
        ,bool& OutIncludeSteamFriends
        ,bool& OutIncludeFacebookFriends
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	OutPlayFabId = In.Data.PlayFabId;
	OutIncludeSteamFriends = In.Data.IncludeSteamFriends;
	OutIncludeFacebookFriends = In.Data.IncludeFacebookFriends;
	
}

void UPFClientProxyLibrary::BreakBPClientGetFriendLeaderboardAroundPlayerResult(
		const FBPClientGetFriendLeaderboardAroundPlayerResult& In
        ,TArray<FBPClientPlayerLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ClientModels::FPlayerLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPClientPlayerLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetFriendLeaderboardRequest(
		const FBPClientGetFriendLeaderboardRequest& In
        ,FString& OutStatisticName
        ,int32& OutStartPosition
        ,int32& OutMaxResultsCount
        ,bool& OutIncludeSteamFriends
        ,bool& OutIncludeFacebookFriends
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutStartPosition = In.Data.StartPosition;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	OutIncludeSteamFriends = In.Data.IncludeSteamFriends;
	OutIncludeFacebookFriends = In.Data.IncludeFacebookFriends;
	
}

void UPFClientProxyLibrary::BreakBPClientGetFriendsListRequest(
		const FBPClientGetFriendsListRequest& In
        ,bool& OutIncludeSteamFriends
        ,bool& OutIncludeFacebookFriends
	)
{
    OutIncludeSteamFriends = In.Data.IncludeSteamFriends;
	OutIncludeFacebookFriends = In.Data.IncludeFacebookFriends;
	
}

void UPFClientProxyLibrary::BreakBPClientGetFriendsListResult(
		const FBPClientGetFriendsListResult& In
        ,TArray<FBPClientFriendInfo>& OutFriends
	)
{
    for (const PlayFab::ClientModels::FFriendInfo& elem : In.Data.Friends)
    {
        FBPClientFriendInfo result;
        result.Data = elem;
        OutFriends.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetLeaderboardAroundCharacterRequest(
		const FBPClientGetLeaderboardAroundCharacterRequest& In
        ,FString& OutStatisticName
        ,FString& OutCharacterId
        ,FString& OutCharacterType
        ,int32& OutMaxResultsCount
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutCharacterId = In.Data.CharacterId;
	OutCharacterType = In.Data.CharacterType;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	
}

void UPFClientProxyLibrary::BreakBPClientGetLeaderboardAroundCharacterResult(
		const FBPClientGetLeaderboardAroundCharacterResult& In
        ,TArray<FBPClientCharacterLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ClientModels::FCharacterLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPClientCharacterLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetLeaderboardAroundPlayerRequest(
		const FBPClientGetLeaderboardAroundPlayerRequest& In
        ,FString& OutPlayFabId
        ,FString& OutStatisticName
        ,int32& OutMaxResultsCount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutStatisticName = In.Data.StatisticName;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	
}

void UPFClientProxyLibrary::BreakBPClientGetLeaderboardAroundPlayerResult(
		const FBPClientGetLeaderboardAroundPlayerResult& In
        ,TArray<FBPClientPlayerLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ClientModels::FPlayerLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPClientPlayerLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetLeaderboardForUsersCharactersRequest(
		const FBPClientGetLeaderboardForUsersCharactersRequest& In
        ,FString& OutStatisticName
        ,int32& OutMaxResultsCount
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	
}

void UPFClientProxyLibrary::BreakBPClientGetLeaderboardForUsersCharactersResult(
		const FBPClientGetLeaderboardForUsersCharactersResult& In
        ,TArray<FBPClientCharacterLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ClientModels::FCharacterLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPClientCharacterLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetLeaderboardRequest(
		const FBPClientGetLeaderboardRequest& In
        ,FString& OutStatisticName
        ,int32& OutStartPosition
        ,int32& OutMaxResultsCount
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutStartPosition = In.Data.StartPosition;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	
}

void UPFClientProxyLibrary::BreakBPClientGetLeaderboardResult(
		const FBPClientGetLeaderboardResult& In
        ,TArray<FBPClientPlayerLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ClientModels::FPlayerLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPClientPlayerLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPhotonAuthenticationTokenRequest(
		const FBPClientGetPhotonAuthenticationTokenRequest& In
        ,FString& OutPhotonApplicationId
	)
{
    OutPhotonApplicationId = In.Data.PhotonApplicationId;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPhotonAuthenticationTokenResult(
		const FBPClientGetPhotonAuthenticationTokenResult& In
        ,FString& OutPhotonCustomAuthenticationToken
	)
{
    OutPhotonCustomAuthenticationToken = In.Data.PhotonCustomAuthenticationToken;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerCombinedInfoRequest(
		const FBPClientGetPlayerCombinedInfoRequest& In
        ,FString& OutPlayFabId
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutInfoRequestParameters.Data = In.Data.InfoRequestParameters;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerCombinedInfoRequestParams(
		const FBPClientGetPlayerCombinedInfoRequestParams& In
        ,bool& OutGetUserAccountInfo
        ,bool& OutGetUserInventory
        ,bool& OutGetUserVirtualCurrency
        ,bool& OutGetUserData
        ,TArray<FString>& OutUserDataKeys
        ,bool& OutGetUserReadOnlyData
        ,TArray<FString>& OutUserReadOnlyDataKeys
        ,bool& OutGetCharacterInventories
        ,bool& OutGetCharacterList
        ,bool& OutGetTitleData
        ,TArray<FString>& OutTitleDataKeys
        ,bool& OutGetPlayerStatistics
        ,TArray<FString>& OutPlayerStatisticNames
	)
{
    OutGetUserAccountInfo = In.Data.GetUserAccountInfo;
	OutGetUserInventory = In.Data.GetUserInventory;
	OutGetUserVirtualCurrency = In.Data.GetUserVirtualCurrency;
	OutGetUserData = In.Data.GetUserData;
	OutUserDataKeys = In.Data.UserDataKeys;
	OutGetUserReadOnlyData = In.Data.GetUserReadOnlyData;
	OutUserReadOnlyDataKeys = In.Data.UserReadOnlyDataKeys;
	OutGetCharacterInventories = In.Data.GetCharacterInventories;
	OutGetCharacterList = In.Data.GetCharacterList;
	OutGetTitleData = In.Data.GetTitleData;
	OutTitleDataKeys = In.Data.TitleDataKeys;
	OutGetPlayerStatistics = In.Data.GetPlayerStatistics;
	OutPlayerStatisticNames = In.Data.PlayerStatisticNames;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerCombinedInfoResult(
		const FBPClientGetPlayerCombinedInfoResult& In
        ,FString& OutPlayFabId
        ,FBPClientGetPlayerCombinedInfoResultPayload& OutInfoResultPayload
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	if (In.Data.InfoResultPayload.IsValid()) {    OutInfoResultPayload.Data = *In.Data.InfoResultPayload;}
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerCombinedInfoResultPayload(
		const FBPClientGetPlayerCombinedInfoResultPayload& In
        ,FBPClientUserAccountInfo& OutAccountInfo
        ,TArray<FBPClientItemInstance>& OutUserInventory
        ,int32& OutUserDataVersion
        ,int32& OutUserReadOnlyDataVersion
        ,TArray<FBPClientCharacterResult>& OutCharacterList
        ,TArray<FBPClientCharacterInventory>& OutCharacterInventories
        ,TArray<FBPClientStatisticValue>& OutPlayerStatistics
	)
{
    if (In.Data.AccountInfo.IsValid()) {    OutAccountInfo.Data = *In.Data.AccountInfo;}
	for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.UserInventory)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutUserInventory.Add(result);
    }

	
	
	
	OutUserDataVersion = In.Data.UserDataVersion;
	
	OutUserReadOnlyDataVersion = In.Data.UserReadOnlyDataVersion;
	for (const PlayFab::ClientModels::FCharacterResult& elem : In.Data.CharacterList)
    {
        FBPClientCharacterResult result;
        result.Data = elem;
        OutCharacterList.Add(result);
    }

	for (const PlayFab::ClientModels::FCharacterInventory& elem : In.Data.CharacterInventories)
    {
        FBPClientCharacterInventory result;
        result.Data = elem;
        OutCharacterInventories.Add(result);
    }

	
	for (const PlayFab::ClientModels::FStatisticValue& elem : In.Data.PlayerStatistics)
    {
        FBPClientStatisticValue result;
        result.Data = elem;
        OutPlayerStatistics.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerSegmentsRequest(
		const FBPClientGetPlayerSegmentsRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerSegmentsResult(
		const FBPClientGetPlayerSegmentsResult& In
        ,TArray<FBPClientGetSegmentResult>& OutSegments
	)
{
    for (const PlayFab::ClientModels::FGetSegmentResult& elem : In.Data.Segments)
    {
        FBPClientGetSegmentResult result;
        result.Data = elem;
        OutSegments.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerStatisticsRequest(
		const FBPClientGetPlayerStatisticsRequest& In
        ,TArray<FString>& OutStatisticNames
        ,TArray<FBPClientStatisticNameVersion>& OutStatisticNameVersions
	)
{
    OutStatisticNames = In.Data.StatisticNames;
	for (const PlayFab::ClientModels::FStatisticNameVersion& elem : In.Data.StatisticNameVersions)
    {
        FBPClientStatisticNameVersion result;
        result.Data = elem;
        OutStatisticNameVersions.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerStatisticsResult(
		const FBPClientGetPlayerStatisticsResult& In
        ,TArray<FBPClientStatisticValue>& OutStatistics
	)
{
    for (const PlayFab::ClientModels::FStatisticValue& elem : In.Data.Statistics)
    {
        FBPClientStatisticValue result;
        result.Data = elem;
        OutStatistics.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerStatisticVersionsRequest(
		const FBPClientGetPlayerStatisticVersionsRequest& In
        ,FString& OutStatisticName
	)
{
    OutStatisticName = In.Data.StatisticName;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerStatisticVersionsResult(
		const FBPClientGetPlayerStatisticVersionsResult& In
        ,TArray<FBPClientPlayerStatisticVersion>& OutStatisticVersions
	)
{
    for (const PlayFab::ClientModels::FPlayerStatisticVersion& elem : In.Data.StatisticVersions)
    {
        FBPClientPlayerStatisticVersion result;
        result.Data = elem;
        OutStatisticVersions.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerTagsRequest(
		const FBPClientGetPlayerTagsRequest& In
        ,FString& OutPlayFabId
        ,FString& OutNamespace
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutNamespace = In.Data.Namespace;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerTagsResult(
		const FBPClientGetPlayerTagsResult& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutTags
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutTags = In.Data.Tags;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerTradesRequest(
		const FBPClientGetPlayerTradesRequest& In
	)
{
    
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayerTradesResponse(
		const FBPClientGetPlayerTradesResponse& In
        ,TArray<FBPClientTradeInfo>& OutOpenedTrades
        ,TArray<FBPClientTradeInfo>& OutAcceptedTrades
	)
{
    for (const PlayFab::ClientModels::FTradeInfo& elem : In.Data.OpenedTrades)
    {
        FBPClientTradeInfo result;
        result.Data = elem;
        OutOpenedTrades.Add(result);
    }

	for (const PlayFab::ClientModels::FTradeInfo& elem : In.Data.AcceptedTrades)
    {
        FBPClientTradeInfo result;
        result.Data = elem;
        OutAcceptedTrades.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromFacebookIDsRequest(
		const FBPClientGetPlayFabIDsFromFacebookIDsRequest& In
        ,TArray<FString>& OutFacebookIDs
	)
{
    OutFacebookIDs = In.Data.FacebookIDs;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromFacebookIDsResult(
		const FBPClientGetPlayFabIDsFromFacebookIDsResult& In
        ,TArray<FBPClientFacebookPlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ClientModels::FFacebookPlayFabIdPair& elem : In.Data.Data)
    {
        FBPClientFacebookPlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromGameCenterIDsRequest(
		const FBPClientGetPlayFabIDsFromGameCenterIDsRequest& In
        ,TArray<FString>& OutGameCenterIDs
	)
{
    OutGameCenterIDs = In.Data.GameCenterIDs;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromGameCenterIDsResult(
		const FBPClientGetPlayFabIDsFromGameCenterIDsResult& In
        ,TArray<FBPClientGameCenterPlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ClientModels::FGameCenterPlayFabIdPair& elem : In.Data.Data)
    {
        FBPClientGameCenterPlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromGenericIDsRequest(
		const FBPClientGetPlayFabIDsFromGenericIDsRequest& In
        ,TArray<FBPClientGenericServiceId>& OutGenericIDs
	)
{
    for (const PlayFab::ClientModels::FGenericServiceId& elem : In.Data.GenericIDs)
    {
        FBPClientGenericServiceId result;
        result.Data = elem;
        OutGenericIDs.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromGenericIDsResult(
		const FBPClientGetPlayFabIDsFromGenericIDsResult& In
        ,TArray<FBPClientGenericPlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ClientModels::FGenericPlayFabIdPair& elem : In.Data.Data)
    {
        FBPClientGenericPlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromGoogleIDsRequest(
		const FBPClientGetPlayFabIDsFromGoogleIDsRequest& In
        ,TArray<FString>& OutGoogleIDs
	)
{
    OutGoogleIDs = In.Data.GoogleIDs;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromGoogleIDsResult(
		const FBPClientGetPlayFabIDsFromGoogleIDsResult& In
        ,TArray<FBPClientGooglePlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ClientModels::FGooglePlayFabIdPair& elem : In.Data.Data)
    {
        FBPClientGooglePlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromKongregateIDsRequest(
		const FBPClientGetPlayFabIDsFromKongregateIDsRequest& In
        ,TArray<FString>& OutKongregateIDs
	)
{
    OutKongregateIDs = In.Data.KongregateIDs;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromKongregateIDsResult(
		const FBPClientGetPlayFabIDsFromKongregateIDsResult& In
        ,TArray<FBPClientKongregatePlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ClientModels::FKongregatePlayFabIdPair& elem : In.Data.Data)
    {
        FBPClientKongregatePlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromSteamIDsRequest(
		const FBPClientGetPlayFabIDsFromSteamIDsRequest& In
        ,TArray<FString>& OutSteamStringIDs
	)
{
    OutSteamStringIDs = In.Data.SteamStringIDs;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromSteamIDsResult(
		const FBPClientGetPlayFabIDsFromSteamIDsResult& In
        ,TArray<FBPClientSteamPlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ClientModels::FSteamPlayFabIdPair& elem : In.Data.Data)
    {
        FBPClientSteamPlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromTwitchIDsRequest(
		const FBPClientGetPlayFabIDsFromTwitchIDsRequest& In
        ,TArray<FString>& OutTwitchIds
	)
{
    OutTwitchIds = In.Data.TwitchIds;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPlayFabIDsFromTwitchIDsResult(
		const FBPClientGetPlayFabIDsFromTwitchIDsResult& In
        ,TArray<FBPClientTwitchPlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ClientModels::FTwitchPlayFabIdPair& elem : In.Data.Data)
    {
        FBPClientTwitchPlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetPublisherDataRequest(
		const FBPClientGetPublisherDataRequest& In
        ,TArray<FString>& OutKeys
	)
{
    OutKeys = In.Data.Keys;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPublisherDataResult(
		const FBPClientGetPublisherDataResult& In
	)
{
    
	
}

void UPFClientProxyLibrary::BreakBPClientGetPurchaseRequest(
		const FBPClientGetPurchaseRequest& In
        ,FString& OutOrderId
	)
{
    OutOrderId = In.Data.OrderId;
	
}

void UPFClientProxyLibrary::BreakBPClientGetPurchaseResult(
		const FBPClientGetPurchaseResult& In
        ,FString& OutOrderId
        ,FString& OutPaymentProvider
        ,FString& OutTransactionId
        ,FString& OutTransactionStatus
        ,FDateTime& OutPurchaseDate
        ,TArray<FBPClientItemInstance>& OutItems
	)
{
    OutOrderId = In.Data.OrderId;
	OutPaymentProvider = In.Data.PaymentProvider;
	OutTransactionId = In.Data.TransactionId;
	OutTransactionStatus = In.Data.TransactionStatus;
	
	for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.Items)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutItems.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetSegmentResult(
		const FBPClientGetSegmentResult& In
        ,FString& OutId
        ,FString& OutName
        ,FString& OutABTestParent
	)
{
    OutId = In.Data.Id;
	OutName = In.Data.Name;
	OutABTestParent = In.Data.ABTestParent;
	
}

void UPFClientProxyLibrary::BreakBPClientGetSharedGroupDataRequest(
		const FBPClientGetSharedGroupDataRequest& In
        ,FString& OutSharedGroupId
        ,TArray<FString>& OutKeys
        ,bool& OutGetMembers
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	OutKeys = In.Data.Keys;
	OutGetMembers = In.Data.GetMembers;
	
}

void UPFClientProxyLibrary::BreakBPClientGetSharedGroupDataResult(
		const FBPClientGetSharedGroupDataResult& In
        ,TArray<FString>& OutMembers
	)
{
    
	OutMembers = In.Data.Members;
	
}

void UPFClientProxyLibrary::BreakBPClientGetStoreItemsRequest(
		const FBPClientGetStoreItemsRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	
}

void UPFClientProxyLibrary::BreakBPClientGetStoreItemsResult(
		const FBPClientGetStoreItemsResult& In
        ,TArray<FBPClientStoreItem>& OutStore
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
        ,FBPClientStoreMarketingModel& OutMarketingData
	)
{
    for (const PlayFab::ClientModels::FStoreItem& elem : In.Data.Store)
    {
        FBPClientStoreItem result;
        result.Data = elem;
        OutStore.Add(result);
    }

	
	OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	if (In.Data.MarketingData.IsValid()) {    OutMarketingData.Data = *In.Data.MarketingData;}
	
}

void UPFClientProxyLibrary::BreakBPClientGetTimeRequest(
		const FBPClientGetTimeRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientGetTimeResult(
		const FBPClientGetTimeResult& In
        ,FDateTime& OutTime
	)
{
    
	
}

void UPFClientProxyLibrary::BreakBPClientGetTitleDataRequest(
		const FBPClientGetTitleDataRequest& In
        ,TArray<FString>& OutKeys
	)
{
    OutKeys = In.Data.Keys;
	
}

void UPFClientProxyLibrary::BreakBPClientGetTitleDataResult(
		const FBPClientGetTitleDataResult& In
	)
{
    
	
}

void UPFClientProxyLibrary::BreakBPClientGetTitleNewsRequest(
		const FBPClientGetTitleNewsRequest& In
        ,int32& OutCount
	)
{
    OutCount = In.Data.Count;
	
}

void UPFClientProxyLibrary::BreakBPClientGetTitleNewsResult(
		const FBPClientGetTitleNewsResult& In
        ,TArray<FBPClientTitleNewsItem>& OutNews
	)
{
    for (const PlayFab::ClientModels::FTitleNewsItem& elem : In.Data.News)
    {
        FBPClientTitleNewsItem result;
        result.Data = elem;
        OutNews.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientGetTradeStatusRequest(
		const FBPClientGetTradeStatusRequest& In
        ,FString& OutOfferingPlayerId
        ,FString& OutTradeId
	)
{
    OutOfferingPlayerId = In.Data.OfferingPlayerId;
	OutTradeId = In.Data.TradeId;
	
}

void UPFClientProxyLibrary::BreakBPClientGetTradeStatusResponse(
		const FBPClientGetTradeStatusResponse& In
        ,FBPClientTradeInfo& OutTrade
	)
{
    if (In.Data.Trade.IsValid()) {    OutTrade.Data = *In.Data.Trade;}
	
}

void UPFClientProxyLibrary::BreakBPClientGetUserDataRequest(
		const FBPClientGetUserDataRequest& In
        ,TArray<FString>& OutKeys
        ,FString& OutPlayFabId
        ,int32& OutIfChangedFromDataVersion
	)
{
    OutKeys = In.Data.Keys;
	OutPlayFabId = In.Data.PlayFabId;
	OutIfChangedFromDataVersion = In.Data.IfChangedFromDataVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientGetUserDataResult(
		const FBPClientGetUserDataResult& In
        ,int32& OutDataVersion
	)
{
    
	OutDataVersion = In.Data.DataVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientGetUserInventoryRequest(
		const FBPClientGetUserInventoryRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientGetUserInventoryResult(
		const FBPClientGetUserInventoryResult& In
        ,TArray<FBPClientItemInstance>& OutInventory
	)
{
    for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
	
	
}

void UPFClientProxyLibrary::BreakBPClientGooglePlayFabIdPair(
		const FBPClientGooglePlayFabIdPair& In
        ,FString& OutGoogleId
        ,FString& OutPlayFabId
	)
{
    OutGoogleId = In.Data.GoogleId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientGrantCharacterToUserRequest(
		const FBPClientGrantCharacterToUserRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutItemId
        ,FString& OutCharacterName
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutItemId = In.Data.ItemId;
	OutCharacterName = In.Data.CharacterName;
	
}

void UPFClientProxyLibrary::BreakBPClientGrantCharacterToUserResult(
		const FBPClientGrantCharacterToUserResult& In
        ,FString& OutCharacterId
        ,FString& OutCharacterType
        ,bool& OutResult
	)
{
    OutCharacterId = In.Data.CharacterId;
	OutCharacterType = In.Data.CharacterType;
	OutResult = In.Data.Result;
	
}

void UPFClientProxyLibrary::BreakBPClientItemInstance(
		const FBPClientItemInstance& In
        ,FString& OutItemId
        ,FString& OutItemInstanceId
        ,FString& OutItemClass
        ,FDateTime& OutPurchaseDate
        ,FDateTime& OutExpiration
        ,int32& OutRemainingUses
        ,int32& OutUsesIncrementedBy
        ,FString& OutAnnotation
        ,FString& OutCatalogVersion
        ,FString& OutBundleParent
        ,FString& OutDisplayName
        ,FString& OutUnitCurrency
        ,int32& OutUnitPrice
        ,TArray<FString>& OutBundleContents
	)
{
    OutItemId = In.Data.ItemId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutItemClass = In.Data.ItemClass;
	
	
	OutRemainingUses = In.Data.RemainingUses;
	OutUsesIncrementedBy = In.Data.UsesIncrementedBy;
	OutAnnotation = In.Data.Annotation;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutBundleParent = In.Data.BundleParent;
	OutDisplayName = In.Data.DisplayName;
	OutUnitCurrency = In.Data.UnitCurrency;
	OutUnitPrice = In.Data.UnitPrice;
	OutBundleContents = In.Data.BundleContents;
	
	
}

void UPFClientProxyLibrary::BreakBPClientItemPurchaseRequest(
		const FBPClientItemPurchaseRequest& In
        ,FString& OutItemId
        ,int32& OutQuantity
        ,FString& OutAnnotation
        ,TArray<FString>& OutUpgradeFromItems
	)
{
    OutItemId = In.Data.ItemId;
	OutQuantity = In.Data.Quantity;
	OutAnnotation = In.Data.Annotation;
	OutUpgradeFromItems = In.Data.UpgradeFromItems;
	
}

void UPFClientProxyLibrary::BreakBPClientKongregatePlayFabIdPair(
		const FBPClientKongregatePlayFabIdPair& In
        ,FString& OutKongregateId
        ,FString& OutPlayFabId
	)
{
    OutKongregateId = In.Data.KongregateId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkAndroidDeviceIDRequest(
		const FBPClientLinkAndroidDeviceIDRequest& In
        ,FString& OutAndroidDeviceId
        ,FString& OutOS
        ,FString& OutAndroidDevice
        ,bool& OutForceLink
	)
{
    OutAndroidDeviceId = In.Data.AndroidDeviceId;
	OutOS = In.Data.OS;
	OutAndroidDevice = In.Data.AndroidDevice;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkAndroidDeviceIDResult(
		const FBPClientLinkAndroidDeviceIDResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientLinkCustomIDRequest(
		const FBPClientLinkCustomIDRequest& In
        ,FString& OutCustomId
        ,bool& OutForceLink
	)
{
    OutCustomId = In.Data.CustomId;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkCustomIDResult(
		const FBPClientLinkCustomIDResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientLinkFacebookAccountRequest(
		const FBPClientLinkFacebookAccountRequest& In
        ,FString& OutAccessToken
        ,bool& OutForceLink
	)
{
    OutAccessToken = In.Data.AccessToken;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkFacebookAccountResult(
		const FBPClientLinkFacebookAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientLinkGameCenterAccountRequest(
		const FBPClientLinkGameCenterAccountRequest& In
        ,FString& OutGameCenterId
        ,bool& OutForceLink
	)
{
    OutGameCenterId = In.Data.GameCenterId;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkGameCenterAccountResult(
		const FBPClientLinkGameCenterAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientLinkGoogleAccountRequest(
		const FBPClientLinkGoogleAccountRequest& In
        ,FString& OutServerAuthCode
        ,FString& OutAccessToken
        ,bool& OutForceLink
	)
{
    OutServerAuthCode = In.Data.ServerAuthCode;
	OutAccessToken = In.Data.AccessToken;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkGoogleAccountResult(
		const FBPClientLinkGoogleAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientLinkIOSDeviceIDRequest(
		const FBPClientLinkIOSDeviceIDRequest& In
        ,FString& OutDeviceId
        ,FString& OutOS
        ,FString& OutDeviceModel
        ,bool& OutForceLink
	)
{
    OutDeviceId = In.Data.DeviceId;
	OutOS = In.Data.OS;
	OutDeviceModel = In.Data.DeviceModel;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkIOSDeviceIDResult(
		const FBPClientLinkIOSDeviceIDResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientLinkKongregateAccountRequest(
		const FBPClientLinkKongregateAccountRequest& In
        ,FString& OutKongregateId
        ,FString& OutAuthTicket
        ,bool& OutForceLink
	)
{
    OutKongregateId = In.Data.KongregateId;
	OutAuthTicket = In.Data.AuthTicket;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkKongregateAccountResult(
		const FBPClientLinkKongregateAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientLinkSteamAccountRequest(
		const FBPClientLinkSteamAccountRequest& In
        ,FString& OutSteamTicket
        ,bool& OutForceLink
	)
{
    OutSteamTicket = In.Data.SteamTicket;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkSteamAccountResult(
		const FBPClientLinkSteamAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientLinkTwitchAccountRequest(
		const FBPClientLinkTwitchAccountRequest& In
        ,FString& OutAccessToken
        ,bool& OutForceLink
	)
{
    OutAccessToken = In.Data.AccessToken;
	OutForceLink = In.Data.ForceLink;
	
}

void UPFClientProxyLibrary::BreakBPClientLinkTwitchAccountResult(
		const FBPClientLinkTwitchAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientListUsersCharactersRequest(
		const FBPClientListUsersCharactersRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientListUsersCharactersResult(
		const FBPClientListUsersCharactersResult& In
        ,TArray<FBPClientCharacterResult>& OutCharacters
	)
{
    for (const PlayFab::ClientModels::FCharacterResult& elem : In.Data.Characters)
    {
        FBPClientCharacterResult result;
        result.Data = elem;
        OutCharacters.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientLoginResult(
		const FBPClientLoginResult& In
        ,FString& OutSessionTicket
        ,FString& OutPlayFabId
        ,bool& OutNewlyCreated
        ,FBPClientUserSettings& OutSettingsForUser
        ,FDateTime& OutLastLoginTime
        ,FBPClientGetPlayerCombinedInfoResultPayload& OutInfoResultPayload
	)
{
    OutSessionTicket = In.Data.SessionTicket;
	OutPlayFabId = In.Data.PlayFabId;
	OutNewlyCreated = In.Data.NewlyCreated;
	if (In.Data.SettingsForUser.IsValid()) {    OutSettingsForUser.Data = *In.Data.SettingsForUser;}
	
	if (In.Data.InfoResultPayload.IsValid()) {    OutInfoResultPayload.Data = *In.Data.InfoResultPayload;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithAndroidDeviceIDRequest(
		const FBPClientLoginWithAndroidDeviceIDRequest& In
        ,FString& OutTitleId
        ,FString& OutAndroidDeviceId
        ,FString& OutOS
        ,FString& OutAndroidDevice
        ,bool& OutCreateAccount
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutAndroidDeviceId = In.Data.AndroidDeviceId;
	OutOS = In.Data.OS;
	OutAndroidDevice = In.Data.AndroidDevice;
	OutCreateAccount = In.Data.CreateAccount;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithCustomIDRequest(
		const FBPClientLoginWithCustomIDRequest& In
        ,FString& OutTitleId
        ,FString& OutCustomId
        ,bool& OutCreateAccount
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutCustomId = In.Data.CustomId;
	OutCreateAccount = In.Data.CreateAccount;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithEmailAddressRequest(
		const FBPClientLoginWithEmailAddressRequest& In
        ,FString& OutTitleId
        ,FString& OutEmail
        ,FString& OutPassword
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutEmail = In.Data.Email;
	OutPassword = In.Data.Password;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithFacebookRequest(
		const FBPClientLoginWithFacebookRequest& In
        ,FString& OutTitleId
        ,FString& OutAccessToken
        ,bool& OutCreateAccount
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutAccessToken = In.Data.AccessToken;
	OutCreateAccount = In.Data.CreateAccount;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithGameCenterRequest(
		const FBPClientLoginWithGameCenterRequest& In
        ,FString& OutTitleId
        ,FString& OutPlayerId
        ,bool& OutCreateAccount
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutPlayerId = In.Data.PlayerId;
	OutCreateAccount = In.Data.CreateAccount;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithGoogleAccountRequest(
		const FBPClientLoginWithGoogleAccountRequest& In
        ,FString& OutTitleId
        ,FString& OutServerAuthCode
        ,FString& OutAccessToken
        ,bool& OutCreateAccount
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutServerAuthCode = In.Data.ServerAuthCode;
	OutAccessToken = In.Data.AccessToken;
	OutCreateAccount = In.Data.CreateAccount;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithIOSDeviceIDRequest(
		const FBPClientLoginWithIOSDeviceIDRequest& In
        ,FString& OutTitleId
        ,FString& OutDeviceId
        ,FString& OutOS
        ,FString& OutDeviceModel
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
        ,bool& OutCreateAccount
	)
{
    OutTitleId = In.Data.TitleId;
	OutDeviceId = In.Data.DeviceId;
	OutOS = In.Data.OS;
	OutDeviceModel = In.Data.DeviceModel;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	OutCreateAccount = In.Data.CreateAccount;
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithKongregateRequest(
		const FBPClientLoginWithKongregateRequest& In
        ,FString& OutTitleId
        ,FString& OutKongregateId
        ,FString& OutAuthTicket
        ,bool& OutCreateAccount
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutKongregateId = In.Data.KongregateId;
	OutAuthTicket = In.Data.AuthTicket;
	OutCreateAccount = In.Data.CreateAccount;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithPlayFabRequest(
		const FBPClientLoginWithPlayFabRequest& In
        ,FString& OutTitleId
        ,FString& OutUsername
        ,FString& OutPassword
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutUsername = In.Data.Username;
	OutPassword = In.Data.Password;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithSteamRequest(
		const FBPClientLoginWithSteamRequest& In
        ,FString& OutTitleId
        ,FString& OutSteamTicket
        ,bool& OutCreateAccount
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutSteamTicket = In.Data.SteamTicket;
	OutCreateAccount = In.Data.CreateAccount;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLoginWithTwitchRequest(
		const FBPClientLoginWithTwitchRequest& In
        ,FString& OutTitleId
        ,FString& OutAccessToken
        ,bool& OutCreateAccount
        ,FBPClientGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutTitleId = In.Data.TitleId;
	OutAccessToken = In.Data.AccessToken;
	OutCreateAccount = In.Data.CreateAccount;
	if (In.Data.InfoRequestParameters.IsValid()) {    OutInfoRequestParameters.Data = *In.Data.InfoRequestParameters;}
	
}

void UPFClientProxyLibrary::BreakBPClientLogStatement(
		const FBPClientLogStatement& In
        ,FString& OutLevel
        ,FString& OutMessage
	)
{
    OutLevel = In.Data.Level;
	OutMessage = In.Data.Message;
	
	
}

void UPFClientProxyLibrary::BreakBPClientMatchmakeRequest(
		const FBPClientMatchmakeRequest& In
        ,FString& OutBuildVersion
        ,FString& OutGameMode
        ,FString& OutLobbyId
        ,FString& OutStatisticName
        ,FString& OutCharacterId
        ,bool& OutStartNewIfNoneFound
        ,FBPClientCollectionFilter& OutTagFilter
	)
{
    OutBuildVersion = In.Data.BuildVersion;
	
	OutGameMode = In.Data.GameMode;
	OutLobbyId = In.Data.LobbyId;
	OutStatisticName = In.Data.StatisticName;
	OutCharacterId = In.Data.CharacterId;
	OutStartNewIfNoneFound = In.Data.StartNewIfNoneFound;
	if (In.Data.TagFilter.IsValid()) {    OutTagFilter.Data = *In.Data.TagFilter;}
	
}

void UPFClientProxyLibrary::BreakBPClientMatchmakeResult(
		const FBPClientMatchmakeResult& In
        ,FString& OutLobbyID
        ,FString& OutServerHostname
        ,int32& OutServerPort
        ,FString& OutTicket
        ,FString& OutExpires
        ,int32& OutPollWaitTimeMS
	)
{
    OutLobbyID = In.Data.LobbyID;
	OutServerHostname = In.Data.ServerHostname;
	OutServerPort = In.Data.ServerPort;
	OutTicket = In.Data.Ticket;
	OutExpires = In.Data.Expires;
	OutPollWaitTimeMS = In.Data.PollWaitTimeMS;
	
	
}

void UPFClientProxyLibrary::BreakBPClientMatchmakeStatus(
		const FBPClientMatchmakeStatus& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientModifyUserVirtualCurrencyResult(
		const FBPClientModifyUserVirtualCurrencyResult& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutBalanceChange
        ,int32& OutBalance
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutBalanceChange = In.Data.BalanceChange;
	OutBalance = In.Data.Balance;
	
}

void UPFClientProxyLibrary::BreakBPClientNameIdentifier(
		const FBPClientNameIdentifier& In
        ,FString& OutName
        ,FString& OutId
	)
{
    OutName = In.Data.Name;
	OutId = In.Data.Id;
	
}

void UPFClientProxyLibrary::BreakBPClientOpenTradeRequest(
		const FBPClientOpenTradeRequest& In
        ,TArray<FString>& OutOfferedInventoryInstanceIds
        ,TArray<FString>& OutRequestedCatalogItemIds
        ,TArray<FString>& OutAllowedPlayerIds
	)
{
    OutOfferedInventoryInstanceIds = In.Data.OfferedInventoryInstanceIds;
	OutRequestedCatalogItemIds = In.Data.RequestedCatalogItemIds;
	OutAllowedPlayerIds = In.Data.AllowedPlayerIds;
	
}

void UPFClientProxyLibrary::BreakBPClientOpenTradeResponse(
		const FBPClientOpenTradeResponse& In
        ,FBPClientTradeInfo& OutTrade
	)
{
    if (In.Data.Trade.IsValid()) {    OutTrade.Data = *In.Data.Trade;}
	
}

void UPFClientProxyLibrary::BreakBPClientPayForPurchaseRequest(
		const FBPClientPayForPurchaseRequest& In
        ,FString& OutOrderId
        ,FString& OutProviderName
        ,FString& OutCurrency
        ,FString& OutProviderTransactionId
	)
{
    OutOrderId = In.Data.OrderId;
	OutProviderName = In.Data.ProviderName;
	OutCurrency = In.Data.Currency;
	OutProviderTransactionId = In.Data.ProviderTransactionId;
	
}

void UPFClientProxyLibrary::BreakBPClientPayForPurchaseResult(
		const FBPClientPayForPurchaseResult& In
        ,FString& OutOrderId
        ,FString& OutPurchaseCurrency
        ,int32& OutPurchasePrice
        ,int32& OutCreditApplied
        ,FString& OutProviderData
        ,FString& OutPurchaseConfirmationPageURL
        ,FString& OutProviderToken
	)
{
    OutOrderId = In.Data.OrderId;
	
	
	OutPurchaseCurrency = In.Data.PurchaseCurrency;
	OutPurchasePrice = In.Data.PurchasePrice;
	OutCreditApplied = In.Data.CreditApplied;
	OutProviderData = In.Data.ProviderData;
	OutPurchaseConfirmationPageURL = In.Data.PurchaseConfirmationPageURL;
	
	OutProviderToken = In.Data.ProviderToken;
	
}

void UPFClientProxyLibrary::BreakBPClientPaymentOption(
		const FBPClientPaymentOption& In
        ,FString& OutCurrency
        ,FString& OutProviderName
        ,int32& OutPrice
        ,int32& OutStoreCredit
	)
{
    OutCurrency = In.Data.Currency;
	OutProviderName = In.Data.ProviderName;
	OutPrice = In.Data.Price;
	OutStoreCredit = In.Data.StoreCredit;
	
}

void UPFClientProxyLibrary::BreakBPClientPlayerLeaderboardEntry(
		const FBPClientPlayerLeaderboardEntry& In
        ,FString& OutPlayFabId
        ,FString& OutDisplayName
        ,int32& OutStatValue
        ,int32& OutPosition
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutDisplayName = In.Data.DisplayName;
	OutStatValue = In.Data.StatValue;
	OutPosition = In.Data.Position;
	
}

void UPFClientProxyLibrary::BreakBPClientPlayerStatisticVersion(
		const FBPClientPlayerStatisticVersion& In
        ,FString& OutStatisticName
        ,int32& OutVersion
        ,FDateTime& OutScheduledActivationTime
        ,FDateTime& OutActivationTime
        ,FDateTime& OutScheduledDeactivationTime
        ,FDateTime& OutDeactivationTime
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutVersion = In.Data.Version;
	
	
	
	
	
}

void UPFClientProxyLibrary::BreakBPClientPurchaseItemRequest(
		const FBPClientPurchaseItemRequest& In
        ,FString& OutItemId
        ,FString& OutVirtualCurrency
        ,int32& OutPrice
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
        ,FString& OutCharacterId
	)
{
    OutItemId = In.Data.ItemId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutPrice = In.Data.Price;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFClientProxyLibrary::BreakBPClientPurchaseItemResult(
		const FBPClientPurchaseItemResult& In
        ,TArray<FBPClientItemInstance>& OutItems
	)
{
    for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.Items)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutItems.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientRedeemCouponRequest(
		const FBPClientRedeemCouponRequest& In
        ,FString& OutCouponCode
        ,FString& OutCatalogVersion
        ,FString& OutCharacterId
	)
{
    OutCouponCode = In.Data.CouponCode;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFClientProxyLibrary::BreakBPClientRedeemCouponResult(
		const FBPClientRedeemCouponResult& In
        ,TArray<FBPClientItemInstance>& OutGrantedItems
	)
{
    for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.GrantedItems)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutGrantedItems.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientRegion(
		const FBPClientRegion& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientRegionInfo(
		const FBPClientRegionInfo& In
        ,FString& OutName
        ,bool& OutAvailable
        ,FString& OutPingUrl
	)
{
    
	OutName = In.Data.Name;
	OutAvailable = In.Data.Available;
	OutPingUrl = In.Data.PingUrl;
	
}

void UPFClientProxyLibrary::BreakBPClientRegisterForIOSPushNotificationRequest(
		const FBPClientRegisterForIOSPushNotificationRequest& In
        ,FString& OutDeviceToken
        ,bool& OutSendPushNotificationConfirmation
        ,FString& OutConfirmationMessage
	)
{
    OutDeviceToken = In.Data.DeviceToken;
	OutSendPushNotificationConfirmation = In.Data.SendPushNotificationConfirmation;
	OutConfirmationMessage = In.Data.ConfirmationMessage;
	
}

void UPFClientProxyLibrary::BreakBPClientRegisterForIOSPushNotificationResult(
		const FBPClientRegisterForIOSPushNotificationResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientRegisterPlayFabUserRequest(
		const FBPClientRegisterPlayFabUserRequest& In
        ,FString& OutTitleId
        ,FString& OutUsername
        ,FString& OutEmail
        ,FString& OutPassword
        ,bool& OutRequireBothUsernameAndEmail
        ,FString& OutDisplayName
	)
{
    OutTitleId = In.Data.TitleId;
	OutUsername = In.Data.Username;
	OutEmail = In.Data.Email;
	OutPassword = In.Data.Password;
	OutRequireBothUsernameAndEmail = In.Data.RequireBothUsernameAndEmail;
	OutDisplayName = In.Data.DisplayName;
	
}

void UPFClientProxyLibrary::BreakBPClientRegisterPlayFabUserResult(
		const FBPClientRegisterPlayFabUserResult& In
        ,FString& OutPlayFabId
        ,FString& OutSessionTicket
        ,FString& OutUsername
        ,FBPClientUserSettings& OutSettingsForUser
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutSessionTicket = In.Data.SessionTicket;
	OutUsername = In.Data.Username;
	if (In.Data.SettingsForUser.IsValid()) {    OutSettingsForUser.Data = *In.Data.SettingsForUser;}
	
}

void UPFClientProxyLibrary::BreakBPClientRemoveFriendRequest(
		const FBPClientRemoveFriendRequest& In
        ,FString& OutFriendPlayFabId
	)
{
    OutFriendPlayFabId = In.Data.FriendPlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientRemoveFriendResult(
		const FBPClientRemoveFriendResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientRemoveGenericIDRequest(
		const FBPClientRemoveGenericIDRequest& In
        ,FBPClientGenericServiceId& OutGenericId
	)
{
    OutGenericId.Data = In.Data.GenericId;
	
}

void UPFClientProxyLibrary::BreakBPClientRemoveGenericIDResult(
		const FBPClientRemoveGenericIDResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientRemoveSharedGroupMembersRequest(
		const FBPClientRemoveSharedGroupMembersRequest& In
        ,FString& OutSharedGroupId
        ,TArray<FString>& OutPlayFabIds
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	OutPlayFabIds = In.Data.PlayFabIds;
	
}

void UPFClientProxyLibrary::BreakBPClientRemoveSharedGroupMembersResult(
		const FBPClientRemoveSharedGroupMembersResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientReportPlayerClientRequest(
		const FBPClientReportPlayerClientRequest& In
        ,FString& OutReporteeId
        ,FString& OutComment
	)
{
    OutReporteeId = In.Data.ReporteeId;
	OutComment = In.Data.Comment;
	
}

void UPFClientProxyLibrary::BreakBPClientReportPlayerClientResult(
		const FBPClientReportPlayerClientResult& In
        ,bool& OutUpdated
        ,int32& OutSubmissionsRemaining
	)
{
    OutUpdated = In.Data.Updated;
	OutSubmissionsRemaining = In.Data.SubmissionsRemaining;
	
}

void UPFClientProxyLibrary::BreakBPClientRestoreIOSPurchasesRequest(
		const FBPClientRestoreIOSPurchasesRequest& In
        ,FString& OutReceiptData
	)
{
    OutReceiptData = In.Data.ReceiptData;
	
}

void UPFClientProxyLibrary::BreakBPClientRestoreIOSPurchasesResult(
		const FBPClientRestoreIOSPurchasesResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientScriptExecutionError(
		const FBPClientScriptExecutionError& In
        ,FString& OutError
        ,FString& OutMessage
        ,FString& OutStackTrace
	)
{
    OutError = In.Data.Error;
	OutMessage = In.Data.Message;
	OutStackTrace = In.Data.StackTrace;
	
}

void UPFClientProxyLibrary::BreakBPClientSendAccountRecoveryEmailRequest(
		const FBPClientSendAccountRecoveryEmailRequest& In
        ,FString& OutEmail
        ,FString& OutTitleId
	)
{
    OutEmail = In.Data.Email;
	OutTitleId = In.Data.TitleId;
	
}

void UPFClientProxyLibrary::BreakBPClientSendAccountRecoveryEmailResult(
		const FBPClientSendAccountRecoveryEmailResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientSetFriendTagsRequest(
		const FBPClientSetFriendTagsRequest& In
        ,FString& OutFriendPlayFabId
        ,TArray<FString>& OutTags
	)
{
    OutFriendPlayFabId = In.Data.FriendPlayFabId;
	OutTags = In.Data.Tags;
	
}

void UPFClientProxyLibrary::BreakBPClientSetFriendTagsResult(
		const FBPClientSetFriendTagsResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientSharedGroupDataRecord(
		const FBPClientSharedGroupDataRecord& In
        ,FString& OutValue
        ,FString& OutLastUpdatedBy
        ,FDateTime& OutLastUpdated
	)
{
    OutValue = In.Data.Value;
	OutLastUpdatedBy = In.Data.LastUpdatedBy;
	
	
	
}

void UPFClientProxyLibrary::BreakBPClientSourceType(
		const FBPClientSourceType& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientStartGameRequest(
		const FBPClientStartGameRequest& In
        ,FString& OutBuildVersion
        ,FString& OutGameMode
        ,FString& OutStatisticName
        ,FString& OutCharacterId
        ,FString& OutCustomCommandLineData
	)
{
    OutBuildVersion = In.Data.BuildVersion;
	
	OutGameMode = In.Data.GameMode;
	OutStatisticName = In.Data.StatisticName;
	OutCharacterId = In.Data.CharacterId;
	OutCustomCommandLineData = In.Data.CustomCommandLineData;
	
}

void UPFClientProxyLibrary::BreakBPClientStartGameResult(
		const FBPClientStartGameResult& In
        ,FString& OutLobbyID
        ,FString& OutServerHostname
        ,int32& OutServerPort
        ,FString& OutTicket
        ,FString& OutExpires
        ,FString& OutPassword
	)
{
    OutLobbyID = In.Data.LobbyID;
	OutServerHostname = In.Data.ServerHostname;
	OutServerPort = In.Data.ServerPort;
	OutTicket = In.Data.Ticket;
	OutExpires = In.Data.Expires;
	OutPassword = In.Data.Password;
	
}

void UPFClientProxyLibrary::BreakBPClientStartPurchaseRequest(
		const FBPClientStartPurchaseRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
        ,TArray<FBPClientItemPurchaseRequest>& OutItems
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	for (const PlayFab::ClientModels::FItemPurchaseRequest& elem : In.Data.Items)
    {
        FBPClientItemPurchaseRequest result;
        result.Data = elem;
        OutItems.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientStartPurchaseResult(
		const FBPClientStartPurchaseResult& In
        ,FString& OutOrderId
        ,TArray<FBPClientCartItem>& OutContents
        ,TArray<FBPClientPaymentOption>& OutPaymentOptions
	)
{
    OutOrderId = In.Data.OrderId;
	for (const PlayFab::ClientModels::FCartItem& elem : In.Data.Contents)
    {
        FBPClientCartItem result;
        result.Data = elem;
        OutContents.Add(result);
    }

	for (const PlayFab::ClientModels::FPaymentOption& elem : In.Data.PaymentOptions)
    {
        FBPClientPaymentOption result;
        result.Data = elem;
        OutPaymentOptions.Add(result);
    }

	
	
}

void UPFClientProxyLibrary::BreakBPClientStatisticNameVersion(
		const FBPClientStatisticNameVersion& In
        ,FString& OutStatisticName
        ,int32& OutVersion
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutVersion = In.Data.Version;
	
}

void UPFClientProxyLibrary::BreakBPClientStatisticUpdate(
		const FBPClientStatisticUpdate& In
        ,FString& OutStatisticName
        ,int32& OutVersion
        ,int32& OutValue
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutVersion = In.Data.Version;
	OutValue = In.Data.Value;
	
}

void UPFClientProxyLibrary::BreakBPClientStatisticValue(
		const FBPClientStatisticValue& In
        ,FString& OutStatisticName
        ,int32& OutValue
        ,int32& OutVersion
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutValue = In.Data.Value;
	OutVersion = In.Data.Version;
	
}

void UPFClientProxyLibrary::BreakBPClientSteamPlayFabIdPair(
		const FBPClientSteamPlayFabIdPair& In
        ,FString& OutSteamStringId
        ,FString& OutPlayFabId
	)
{
    OutSteamStringId = In.Data.SteamStringId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientStoreItem(
		const FBPClientStoreItem& In
        ,FString& OutItemId
        ,int32& OutDisplayPosition
	)
{
    OutItemId = In.Data.ItemId;
	
	
	
	OutDisplayPosition = In.Data.DisplayPosition;
	
}

void UPFClientProxyLibrary::BreakBPClientStoreMarketingModel(
		const FBPClientStoreMarketingModel& In
        ,FString& OutDisplayName
        ,FString& OutDescription
	)
{
    OutDisplayName = In.Data.DisplayName;
	OutDescription = In.Data.Description;
	
	
}

void UPFClientProxyLibrary::BreakBPClientSubtractUserVirtualCurrencyRequest(
		const FBPClientSubtractUserVirtualCurrencyRequest& In
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFClientProxyLibrary::BreakBPClientTitleActivationStatus(
		const FBPClientTitleActivationStatus& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientTitleNewsItem(
		const FBPClientTitleNewsItem& In
        ,FDateTime& OutTimestamp
        ,FString& OutNewsId
        ,FString& OutTitle
        ,FString& OutBody
	)
{
    
	OutNewsId = In.Data.NewsId;
	OutTitle = In.Data.Title;
	OutBody = In.Data.Body;
	
}

void UPFClientProxyLibrary::BreakBPClientTradeInfo(
		const FBPClientTradeInfo& In
        ,FString& OutTradeId
        ,FString& OutOfferingPlayerId
        ,TArray<FString>& OutOfferedInventoryInstanceIds
        ,TArray<FString>& OutOfferedCatalogItemIds
        ,TArray<FString>& OutRequestedCatalogItemIds
        ,TArray<FString>& OutAllowedPlayerIds
        ,FString& OutAcceptedPlayerId
        ,TArray<FString>& OutAcceptedInventoryInstanceIds
        ,FDateTime& OutOpenedAt
        ,FDateTime& OutFilledAt
        ,FDateTime& OutCancelledAt
        ,FDateTime& OutInvalidatedAt
	)
{
    
	OutTradeId = In.Data.TradeId;
	OutOfferingPlayerId = In.Data.OfferingPlayerId;
	OutOfferedInventoryInstanceIds = In.Data.OfferedInventoryInstanceIds;
	OutOfferedCatalogItemIds = In.Data.OfferedCatalogItemIds;
	OutRequestedCatalogItemIds = In.Data.RequestedCatalogItemIds;
	OutAllowedPlayerIds = In.Data.AllowedPlayerIds;
	OutAcceptedPlayerId = In.Data.AcceptedPlayerId;
	OutAcceptedInventoryInstanceIds = In.Data.AcceptedInventoryInstanceIds;
	
	
	
	
	
}

void UPFClientProxyLibrary::BreakBPClientTradeStatus(
		const FBPClientTradeStatus& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientTransactionStatus(
		const FBPClientTransactionStatus& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientTwitchPlayFabIdPair(
		const FBPClientTwitchPlayFabIdPair& In
        ,FString& OutTwitchId
        ,FString& OutPlayFabId
	)
{
    OutTwitchId = In.Data.TwitchId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFClientProxyLibrary::BreakBPClientUnlinkAndroidDeviceIDRequest(
		const FBPClientUnlinkAndroidDeviceIDRequest& In
        ,FString& OutAndroidDeviceId
	)
{
    OutAndroidDeviceId = In.Data.AndroidDeviceId;
	
}

void UPFClientProxyLibrary::BreakBPClientUnlinkAndroidDeviceIDResult(
		const FBPClientUnlinkAndroidDeviceIDResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkCustomIDRequest(
		const FBPClientUnlinkCustomIDRequest& In
        ,FString& OutCustomId
	)
{
    OutCustomId = In.Data.CustomId;
	
}

void UPFClientProxyLibrary::BreakBPClientUnlinkCustomIDResult(
		const FBPClientUnlinkCustomIDResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkFacebookAccountRequest(
		const FBPClientUnlinkFacebookAccountRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkFacebookAccountResult(
		const FBPClientUnlinkFacebookAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkGameCenterAccountRequest(
		const FBPClientUnlinkGameCenterAccountRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkGameCenterAccountResult(
		const FBPClientUnlinkGameCenterAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkGoogleAccountRequest(
		const FBPClientUnlinkGoogleAccountRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkGoogleAccountResult(
		const FBPClientUnlinkGoogleAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkIOSDeviceIDRequest(
		const FBPClientUnlinkIOSDeviceIDRequest& In
        ,FString& OutDeviceId
	)
{
    OutDeviceId = In.Data.DeviceId;
	
}

void UPFClientProxyLibrary::BreakBPClientUnlinkIOSDeviceIDResult(
		const FBPClientUnlinkIOSDeviceIDResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkKongregateAccountRequest(
		const FBPClientUnlinkKongregateAccountRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkKongregateAccountResult(
		const FBPClientUnlinkKongregateAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkSteamAccountRequest(
		const FBPClientUnlinkSteamAccountRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkSteamAccountResult(
		const FBPClientUnlinkSteamAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkTwitchAccountRequest(
		const FBPClientUnlinkTwitchAccountRequest& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlinkTwitchAccountResult(
		const FBPClientUnlinkTwitchAccountResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUnlockContainerInstanceRequest(
		const FBPClientUnlockContainerInstanceRequest& In
        ,FString& OutCharacterId
        ,FString& OutContainerItemInstanceId
        ,FString& OutKeyItemInstanceId
        ,FString& OutCatalogVersion
	)
{
    OutCharacterId = In.Data.CharacterId;
	OutContainerItemInstanceId = In.Data.ContainerItemInstanceId;
	OutKeyItemInstanceId = In.Data.KeyItemInstanceId;
	OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientUnlockContainerItemRequest(
		const FBPClientUnlockContainerItemRequest& In
        ,FString& OutContainerItemId
        ,FString& OutCatalogVersion
        ,FString& OutCharacterId
	)
{
    OutContainerItemId = In.Data.ContainerItemId;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFClientProxyLibrary::BreakBPClientUnlockContainerItemResult(
		const FBPClientUnlockContainerItemResult& In
        ,FString& OutUnlockedItemInstanceId
        ,FString& OutUnlockedWithItemInstanceId
        ,TArray<FBPClientItemInstance>& OutGrantedItems
	)
{
    OutUnlockedItemInstanceId = In.Data.UnlockedItemInstanceId;
	OutUnlockedWithItemInstanceId = In.Data.UnlockedWithItemInstanceId;
	for (const PlayFab::ClientModels::FItemInstance& elem : In.Data.GrantedItems)
    {
        FBPClientItemInstance result;
        result.Data = elem;
        OutGrantedItems.Add(result);
    }

	
	
}

void UPFClientProxyLibrary::BreakBPClientUpdateCharacterDataRequest(
		const FBPClientUpdateCharacterDataRequest& In
        ,FString& OutCharacterId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutCharacterId = In.Data.CharacterId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
	
}

void UPFClientProxyLibrary::BreakBPClientUpdateCharacterDataResult(
		const FBPClientUpdateCharacterDataResult& In
        ,int32& OutDataVersion
	)
{
    OutDataVersion = In.Data.DataVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientUpdateCharacterStatisticsRequest(
		const FBPClientUpdateCharacterStatisticsRequest& In
        ,FString& OutCharacterId
	)
{
    OutCharacterId = In.Data.CharacterId;
	
	
}

void UPFClientProxyLibrary::BreakBPClientUpdateCharacterStatisticsResult(
		const FBPClientUpdateCharacterStatisticsResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUpdatePlayerStatisticsRequest(
		const FBPClientUpdatePlayerStatisticsRequest& In
        ,TArray<FBPClientStatisticUpdate>& OutStatistics
	)
{
    for (const PlayFab::ClientModels::FStatisticUpdate& elem : In.Data.Statistics)
    {
        FBPClientStatisticUpdate result;
        result.Data = elem;
        OutStatistics.Add(result);
    }

	
}

void UPFClientProxyLibrary::BreakBPClientUpdatePlayerStatisticsResult(
		const FBPClientUpdatePlayerStatisticsResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUpdateSharedGroupDataRequest(
		const FBPClientUpdateSharedGroupDataRequest& In
        ,FString& OutSharedGroupId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
	
}

void UPFClientProxyLibrary::BreakBPClientUpdateSharedGroupDataResult(
		const FBPClientUpdateSharedGroupDataResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUpdateUserDataRequest(
		const FBPClientUpdateUserDataRequest& In
        ,TArray<FString>& OutKeysToRemove
	)
{
    
	OutKeysToRemove = In.Data.KeysToRemove;
	
	
}

void UPFClientProxyLibrary::BreakBPClientUpdateUserDataResult(
		const FBPClientUpdateUserDataResult& In
        ,int32& OutDataVersion
	)
{
    OutDataVersion = In.Data.DataVersion;
	
}

void UPFClientProxyLibrary::BreakBPClientUpdateUserTitleDisplayNameRequest(
		const FBPClientUpdateUserTitleDisplayNameRequest& In
        ,FString& OutDisplayName
	)
{
    OutDisplayName = In.Data.DisplayName;
	
}

void UPFClientProxyLibrary::BreakBPClientUpdateUserTitleDisplayNameResult(
		const FBPClientUpdateUserTitleDisplayNameResult& In
        ,FString& OutDisplayName
	)
{
    OutDisplayName = In.Data.DisplayName;
	
}

void UPFClientProxyLibrary::BreakBPClientUserAccountInfo(
		const FBPClientUserAccountInfo& In
        ,FString& OutPlayFabId
        ,FDateTime& OutCreated
        ,FString& OutUsername
        ,FBPClientUserTitleInfo& OutTitleInfo
        ,FBPClientUserPrivateAccountInfo& OutPrivateInfo
        ,FBPClientUserFacebookInfo& OutFacebookInfo
        ,FBPClientUserSteamInfo& OutSteamInfo
        ,FBPClientUserGameCenterInfo& OutGameCenterInfo
        ,FBPClientUserIosDeviceInfo& OutIosDeviceInfo
        ,FBPClientUserAndroidDeviceInfo& OutAndroidDeviceInfo
        ,FBPClientUserKongregateInfo& OutKongregateInfo
        ,FBPClientUserTwitchInfo& OutTwitchInfo
        ,FBPClientUserPsnInfo& OutPsnInfo
        ,FBPClientUserGoogleInfo& OutGoogleInfo
        ,FBPClientUserXboxInfo& OutXboxInfo
        ,FBPClientUserCustomIdInfo& OutCustomIdInfo
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutUsername = In.Data.Username;
	if (In.Data.TitleInfo.IsValid()) {    OutTitleInfo.Data = *In.Data.TitleInfo;}
	if (In.Data.PrivateInfo.IsValid()) {    OutPrivateInfo.Data = *In.Data.PrivateInfo;}
	if (In.Data.FacebookInfo.IsValid()) {    OutFacebookInfo.Data = *In.Data.FacebookInfo;}
	if (In.Data.SteamInfo.IsValid()) {    OutSteamInfo.Data = *In.Data.SteamInfo;}
	if (In.Data.GameCenterInfo.IsValid()) {    OutGameCenterInfo.Data = *In.Data.GameCenterInfo;}
	if (In.Data.IosDeviceInfo.IsValid()) {    OutIosDeviceInfo.Data = *In.Data.IosDeviceInfo;}
	if (In.Data.AndroidDeviceInfo.IsValid()) {    OutAndroidDeviceInfo.Data = *In.Data.AndroidDeviceInfo;}
	if (In.Data.KongregateInfo.IsValid()) {    OutKongregateInfo.Data = *In.Data.KongregateInfo;}
	if (In.Data.TwitchInfo.IsValid()) {    OutTwitchInfo.Data = *In.Data.TwitchInfo;}
	if (In.Data.PsnInfo.IsValid()) {    OutPsnInfo.Data = *In.Data.PsnInfo;}
	if (In.Data.GoogleInfo.IsValid()) {    OutGoogleInfo.Data = *In.Data.GoogleInfo;}
	if (In.Data.XboxInfo.IsValid()) {    OutXboxInfo.Data = *In.Data.XboxInfo;}
	if (In.Data.CustomIdInfo.IsValid()) {    OutCustomIdInfo.Data = *In.Data.CustomIdInfo;}
	
}

void UPFClientProxyLibrary::BreakBPClientUserAndroidDeviceInfo(
		const FBPClientUserAndroidDeviceInfo& In
        ,FString& OutAndroidDeviceId
	)
{
    OutAndroidDeviceId = In.Data.AndroidDeviceId;
	
}

void UPFClientProxyLibrary::BreakBPClientUserCustomIdInfo(
		const FBPClientUserCustomIdInfo& In
        ,FString& OutCustomId
	)
{
    OutCustomId = In.Data.CustomId;
	
}

void UPFClientProxyLibrary::BreakBPClientUserDataPermission(
		const FBPClientUserDataPermission& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUserDataRecord(
		const FBPClientUserDataRecord& In
        ,FString& OutValue
        ,FDateTime& OutLastUpdated
	)
{
    OutValue = In.Data.Value;
	
	
	
}

void UPFClientProxyLibrary::BreakBPClientUserFacebookInfo(
		const FBPClientUserFacebookInfo& In
        ,FString& OutFacebookId
        ,FString& OutFullName
	)
{
    OutFacebookId = In.Data.FacebookId;
	OutFullName = In.Data.FullName;
	
}

void UPFClientProxyLibrary::BreakBPClientUserGameCenterInfo(
		const FBPClientUserGameCenterInfo& In
        ,FString& OutGameCenterId
	)
{
    OutGameCenterId = In.Data.GameCenterId;
	
}

void UPFClientProxyLibrary::BreakBPClientUserGoogleInfo(
		const FBPClientUserGoogleInfo& In
        ,FString& OutGoogleId
        ,FString& OutGoogleEmail
        ,FString& OutGoogleLocale
        ,FString& OutGoogleGender
	)
{
    OutGoogleId = In.Data.GoogleId;
	OutGoogleEmail = In.Data.GoogleEmail;
	OutGoogleLocale = In.Data.GoogleLocale;
	OutGoogleGender = In.Data.GoogleGender;
	
}

void UPFClientProxyLibrary::BreakBPClientUserIosDeviceInfo(
		const FBPClientUserIosDeviceInfo& In
        ,FString& OutIosDeviceId
	)
{
    OutIosDeviceId = In.Data.IosDeviceId;
	
}

void UPFClientProxyLibrary::BreakBPClientUserKongregateInfo(
		const FBPClientUserKongregateInfo& In
        ,FString& OutKongregateId
        ,FString& OutKongregateName
	)
{
    OutKongregateId = In.Data.KongregateId;
	OutKongregateName = In.Data.KongregateName;
	
}

void UPFClientProxyLibrary::BreakBPClientUserOrigination(
		const FBPClientUserOrigination& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientUserPrivateAccountInfo(
		const FBPClientUserPrivateAccountInfo& In
        ,FString& OutEmail
	)
{
    OutEmail = In.Data.Email;
	
}

void UPFClientProxyLibrary::BreakBPClientUserPsnInfo(
		const FBPClientUserPsnInfo& In
        ,FString& OutPsnAccountId
        ,FString& OutPsnOnlineId
	)
{
    OutPsnAccountId = In.Data.PsnAccountId;
	OutPsnOnlineId = In.Data.PsnOnlineId;
	
}

void UPFClientProxyLibrary::BreakBPClientUserSettings(
		const FBPClientUserSettings& In
        ,bool& OutNeedsAttribution
	)
{
    OutNeedsAttribution = In.Data.NeedsAttribution;
	
}

void UPFClientProxyLibrary::BreakBPClientUserSteamInfo(
		const FBPClientUserSteamInfo& In
        ,FString& OutSteamId
        ,FString& OutSteamCountry
	)
{
    OutSteamId = In.Data.SteamId;
	OutSteamCountry = In.Data.SteamCountry;
	
	
	
}

void UPFClientProxyLibrary::BreakBPClientUserTitleInfo(
		const FBPClientUserTitleInfo& In
        ,FString& OutDisplayName
        ,FDateTime& OutCreated
        ,FDateTime& OutLastLogin
        ,FDateTime& OutFirstLogin
        ,bool& OutisBanned
	)
{
    OutDisplayName = In.Data.DisplayName;
	
	
	
	
	OutisBanned = In.Data.isBanned;
	
}

void UPFClientProxyLibrary::BreakBPClientUserTwitchInfo(
		const FBPClientUserTwitchInfo& In
        ,FString& OutTwitchId
        ,FString& OutTwitchUserName
	)
{
    OutTwitchId = In.Data.TwitchId;
	OutTwitchUserName = In.Data.TwitchUserName;
	
}

void UPFClientProxyLibrary::BreakBPClientUserXboxInfo(
		const FBPClientUserXboxInfo& In
        ,FString& OutXboxUserId
	)
{
    OutXboxUserId = In.Data.XboxUserId;
	
}

void UPFClientProxyLibrary::BreakBPClientValidateAmazonReceiptRequest(
		const FBPClientValidateAmazonReceiptRequest& In
        ,FString& OutReceiptId
        ,FString& OutUserId
        ,FString& OutCatalogVersion
        ,FString& OutCurrencyCode
        ,int32& OutPurchasePrice
	)
{
    OutReceiptId = In.Data.ReceiptId;
	OutUserId = In.Data.UserId;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutCurrencyCode = In.Data.CurrencyCode;
	OutPurchasePrice = In.Data.PurchasePrice;
	
}

void UPFClientProxyLibrary::BreakBPClientValidateAmazonReceiptResult(
		const FBPClientValidateAmazonReceiptResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientValidateGooglePlayPurchaseRequest(
		const FBPClientValidateGooglePlayPurchaseRequest& In
        ,FString& OutReceiptJson
        ,FString& OutSignature
        ,FString& OutCurrencyCode
        ,int32& OutPurchasePrice
	)
{
    OutReceiptJson = In.Data.ReceiptJson;
	OutSignature = In.Data.Signature;
	OutCurrencyCode = In.Data.CurrencyCode;
	OutPurchasePrice = In.Data.PurchasePrice;
	
}

void UPFClientProxyLibrary::BreakBPClientValidateGooglePlayPurchaseResult(
		const FBPClientValidateGooglePlayPurchaseResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientValidateIOSReceiptRequest(
		const FBPClientValidateIOSReceiptRequest& In
        ,FString& OutReceiptData
        ,FString& OutCurrencyCode
        ,int32& OutPurchasePrice
	)
{
    OutReceiptData = In.Data.ReceiptData;
	OutCurrencyCode = In.Data.CurrencyCode;
	OutPurchasePrice = In.Data.PurchasePrice;
	
}

void UPFClientProxyLibrary::BreakBPClientValidateIOSReceiptResult(
		const FBPClientValidateIOSReceiptResult& In
	)
{
    
}

void UPFClientProxyLibrary::BreakBPClientVirtualCurrencyRechargeTime(
		const FBPClientVirtualCurrencyRechargeTime& In
        ,int32& OutSecondsToRecharge
        ,FDateTime& OutRechargeTime
        ,int32& OutRechargeMax
	)
{
    OutSecondsToRecharge = In.Data.SecondsToRecharge;
	
	OutRechargeMax = In.Data.RechargeMax;
	
}

void UPFClientProxyLibrary::BreakBPClientWriteClientCharacterEventRequest(
		const FBPClientWriteClientCharacterEventRequest& In
        ,FString& OutCharacterId
        ,FString& OutEventName
        ,FDateTime& OutTimestamp
	)
{
    OutCharacterId = In.Data.CharacterId;
	OutEventName = In.Data.EventName;
	
	
	
}

void UPFClientProxyLibrary::BreakBPClientWriteClientPlayerEventRequest(
		const FBPClientWriteClientPlayerEventRequest& In
        ,FString& OutEventName
        ,FDateTime& OutTimestamp
	)
{
    OutEventName = In.Data.EventName;
	
	
	
}

void UPFClientProxyLibrary::BreakBPClientWriteEventResponse(
		const FBPClientWriteEventResponse& In
        ,FString& OutEventId
	)
{
    OutEventId = In.Data.EventId;
	
}

void UPFClientProxyLibrary::BreakBPClientWriteTitleEventRequest(
		const FBPClientWriteTitleEventRequest& In
        ,FString& OutEventName
        ,FDateTime& OutTimestamp
	)
{
    OutEventName = In.Data.EventName;
	
	
	
}

