// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFabServerBPLibrary.h"


void UPFServerProxyLibrary::BreakBPServerActionsOnPlayersInSegmentTaskSummary(
		const FBPServerActionsOnPlayersInSegmentTaskSummary& In
        ,FString& OutTaskInstanceId
        ,FBPServerNameIdentifier& OutTaskIdentifier
        ,FDateTime& OutStartedAt
        ,FDateTime& OutCompletedAt
        ,float& OutPercentComplete
        ,float& OutEstimatedSecondsRemaining
        ,FString& OutScheduledByUserId
        ,FString& OutErrorMessage
        ,bool& OutErrorWasFatal
        ,int32& OutTotalPlayersInSegment
        ,int32& OutTotalPlayersProcessed
	)
{
    OutTaskInstanceId = In.Data.TaskInstanceId;
	if (In.Data.TaskIdentifier.IsValid()) {    OutTaskIdentifier.Data = *In.Data.TaskIdentifier;}
	
	
	
	OutPercentComplete = In.Data.PercentComplete;
	OutEstimatedSecondsRemaining = In.Data.EstimatedSecondsRemaining;
	OutScheduledByUserId = In.Data.ScheduledByUserId;
	OutErrorMessage = In.Data.ErrorMessage;
	OutErrorWasFatal = In.Data.ErrorWasFatal;
	OutTotalPlayersInSegment = In.Data.TotalPlayersInSegment;
	OutTotalPlayersProcessed = In.Data.TotalPlayersProcessed;
	
}

void UPFServerProxyLibrary::BreakBPServerAdCampaignAttribution(
		const FBPServerAdCampaignAttribution& In
        ,FString& OutPlatform
        ,FString& OutCampaignId
        ,FDateTime& OutAttributedAt
	)
{
    OutPlatform = In.Data.Platform;
	OutCampaignId = In.Data.CampaignId;
	
	
}

void UPFServerProxyLibrary::BreakBPServerAdCampaignAttributionModel(
		const FBPServerAdCampaignAttributionModel& In
        ,FString& OutPlatform
        ,FString& OutCampaignId
        ,FDateTime& OutAttributedAt
	)
{
    OutPlatform = In.Data.Platform;
	OutCampaignId = In.Data.CampaignId;
	
	
}

void UPFServerProxyLibrary::BreakBPServerAddCharacterVirtualCurrencyRequest(
		const FBPServerAddCharacterVirtualCurrencyRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFServerProxyLibrary::BreakBPServerAddFriendRequest(
		const FBPServerAddFriendRequest& In
        ,FString& OutPlayFabId
        ,FString& OutFriendPlayFabId
        ,FString& OutFriendUsername
        ,FString& OutFriendEmail
        ,FString& OutFriendTitleDisplayName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutFriendPlayFabId = In.Data.FriendPlayFabId;
	OutFriendUsername = In.Data.FriendUsername;
	OutFriendEmail = In.Data.FriendEmail;
	OutFriendTitleDisplayName = In.Data.FriendTitleDisplayName;
	
}

void UPFServerProxyLibrary::BreakBPServerAddPlayerTagRequest(
		const FBPServerAddPlayerTagRequest& In
        ,FString& OutPlayFabId
        ,FString& OutTagName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutTagName = In.Data.TagName;
	
}

void UPFServerProxyLibrary::BreakBPServerAddPlayerTagResult(
		const FBPServerAddPlayerTagResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerAddSharedGroupMembersRequest(
		const FBPServerAddSharedGroupMembersRequest& In
        ,FString& OutSharedGroupId
        ,TArray<FString>& OutPlayFabIds
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	OutPlayFabIds = In.Data.PlayFabIds;
	
}

void UPFServerProxyLibrary::BreakBPServerAddSharedGroupMembersResult(
		const FBPServerAddSharedGroupMembersResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerAddUserVirtualCurrencyRequest(
		const FBPServerAddUserVirtualCurrencyRequest& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFServerProxyLibrary::BreakBPServerAuthenticateSessionTicketRequest(
		const FBPServerAuthenticateSessionTicketRequest& In
        ,FString& OutSessionTicket
	)
{
    OutSessionTicket = In.Data.SessionTicket;
	
}

void UPFServerProxyLibrary::BreakBPServerAuthenticateSessionTicketResult(
		const FBPServerAuthenticateSessionTicketResult& In
        ,FBPServerUserAccountInfo& OutUserInfo
	)
{
    if (In.Data.UserInfo.IsValid()) {    OutUserInfo.Data = *In.Data.UserInfo;}
	
}

void UPFServerProxyLibrary::BreakBPServerAwardSteamAchievementItem(
		const FBPServerAwardSteamAchievementItem& In
        ,FString& OutPlayFabId
        ,FString& OutAchievementName
        ,bool& OutResult
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutAchievementName = In.Data.AchievementName;
	OutResult = In.Data.Result;
	
}

void UPFServerProxyLibrary::BreakBPServerAwardSteamAchievementRequest(
		const FBPServerAwardSteamAchievementRequest& In
        ,TArray<FBPServerAwardSteamAchievementItem>& OutAchievements
	)
{
    for (const PlayFab::ServerModels::FAwardSteamAchievementItem& elem : In.Data.Achievements)
    {
        FBPServerAwardSteamAchievementItem result;
        result.Data = elem;
        OutAchievements.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerAwardSteamAchievementResult(
		const FBPServerAwardSteamAchievementResult& In
        ,TArray<FBPServerAwardSteamAchievementItem>& OutAchievementResults
	)
{
    for (const PlayFab::ServerModels::FAwardSteamAchievementItem& elem : In.Data.AchievementResults)
    {
        FBPServerAwardSteamAchievementItem result;
        result.Data = elem;
        OutAchievementResults.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerBanInfo(
		const FBPServerBanInfo& In
        ,FString& OutPlayFabId
        ,FString& OutBanId
        ,FString& OutIPAddress
        ,FString& OutMACAddress
        ,FDateTime& OutCreated
        ,FDateTime& OutExpires
        ,FString& OutReason
        ,bool& OutActive
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutBanId = In.Data.BanId;
	OutIPAddress = In.Data.IPAddress;
	OutMACAddress = In.Data.MACAddress;
	
	
	OutReason = In.Data.Reason;
	OutActive = In.Data.Active;
	
}

void UPFServerProxyLibrary::BreakBPServerBanRequest(
		const FBPServerBanRequest& In
        ,FString& OutPlayFabId
        ,FString& OutIPAddress
        ,FString& OutMACAddress
        ,FString& OutReason
        ,int32& OutDurationInHours
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutIPAddress = In.Data.IPAddress;
	OutMACAddress = In.Data.MACAddress;
	OutReason = In.Data.Reason;
	OutDurationInHours = In.Data.DurationInHours;
	
}

void UPFServerProxyLibrary::BreakBPServerBanUsersRequest(
		const FBPServerBanUsersRequest& In
        ,TArray<FBPServerBanRequest>& OutBans
	)
{
    for (const PlayFab::ServerModels::FBanRequest& elem : In.Data.Bans)
    {
        FBPServerBanRequest result;
        result.Data = elem;
        OutBans.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerBanUsersResult(
		const FBPServerBanUsersResult& In
        ,TArray<FBPServerBanInfo>& OutBanData
	)
{
    for (const PlayFab::ServerModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPServerBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerCatalogItem(
		const FBPServerCatalogItem& In
        ,FString& OutItemId
        ,FString& OutItemClass
        ,FString& OutCatalogVersion
        ,FString& OutDisplayName
        ,FString& OutDescription
        ,TArray<FString>& OutTags
        ,FString& OutCustomData
        ,FBPServerCatalogItemConsumableInfo& OutConsumable
        ,FBPServerCatalogItemContainerInfo& OutContainer
        ,FBPServerCatalogItemBundleInfo& OutBundle
        ,bool& OutCanBecomeCharacter
        ,bool& OutIsStackable
        ,bool& OutIsTradable
        ,FString& OutItemImageUrl
        ,bool& OutIsLimitedEdition
        ,int32& OutInitialLimitedEditionCount
	)
{
    OutItemId = In.Data.ItemId;
	OutItemClass = In.Data.ItemClass;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutDisplayName = In.Data.DisplayName;
	OutDescription = In.Data.Description;
	
	
	OutTags = In.Data.Tags;
	OutCustomData = In.Data.CustomData;
	if (In.Data.Consumable.IsValid()) {    OutConsumable.Data = *In.Data.Consumable;}
	if (In.Data.Container.IsValid()) {    OutContainer.Data = *In.Data.Container;}
	if (In.Data.Bundle.IsValid()) {    OutBundle.Data = *In.Data.Bundle;}
	OutCanBecomeCharacter = In.Data.CanBecomeCharacter;
	OutIsStackable = In.Data.IsStackable;
	OutIsTradable = In.Data.IsTradable;
	OutItemImageUrl = In.Data.ItemImageUrl;
	OutIsLimitedEdition = In.Data.IsLimitedEdition;
	OutInitialLimitedEditionCount = In.Data.InitialLimitedEditionCount;
	
}

void UPFServerProxyLibrary::BreakBPServerCatalogItemBundleInfo(
		const FBPServerCatalogItemBundleInfo& In
        ,TArray<FString>& OutBundledItems
        ,TArray<FString>& OutBundledResultTables
	)
{
    OutBundledItems = In.Data.BundledItems;
	OutBundledResultTables = In.Data.BundledResultTables;
	
	
}

void UPFServerProxyLibrary::BreakBPServerCatalogItemConsumableInfo(
		const FBPServerCatalogItemConsumableInfo& In
        ,int32& OutUsageCount
        ,int32& OutUsagePeriod
        ,FString& OutUsagePeriodGroup
	)
{
    OutUsageCount = In.Data.UsageCount;
	OutUsagePeriod = In.Data.UsagePeriod;
	OutUsagePeriodGroup = In.Data.UsagePeriodGroup;
	
}

void UPFServerProxyLibrary::BreakBPServerCatalogItemContainerInfo(
		const FBPServerCatalogItemContainerInfo& In
        ,FString& OutKeyItemId
        ,TArray<FString>& OutItemContents
        ,TArray<FString>& OutResultTableContents
	)
{
    OutKeyItemId = In.Data.KeyItemId;
	OutItemContents = In.Data.ItemContents;
	OutResultTableContents = In.Data.ResultTableContents;
	
	
}

void UPFServerProxyLibrary::BreakBPServerCharacterInventory(
		const FBPServerCharacterInventory& In
        ,FString& OutCharacterId
        ,TArray<FBPServerItemInstance>& OutInventory
	)
{
    OutCharacterId = In.Data.CharacterId;
	for (const PlayFab::ServerModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPServerItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerCharacterLeaderboardEntry(
		const FBPServerCharacterLeaderboardEntry& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutCharacterName
        ,FString& OutDisplayName
        ,FString& OutCharacterType
        ,int32& OutStatValue
        ,int32& OutPosition
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutCharacterName = In.Data.CharacterName;
	OutDisplayName = In.Data.DisplayName;
	OutCharacterType = In.Data.CharacterType;
	OutStatValue = In.Data.StatValue;
	OutPosition = In.Data.Position;
	
}

void UPFServerProxyLibrary::BreakBPServerCharacterResult(
		const FBPServerCharacterResult& In
        ,FString& OutCharacterId
        ,FString& OutCharacterName
        ,FString& OutCharacterType
	)
{
    OutCharacterId = In.Data.CharacterId;
	OutCharacterName = In.Data.CharacterName;
	OutCharacterType = In.Data.CharacterType;
	
}

void UPFServerProxyLibrary::BreakBPServerCloudScriptRevisionOption(
		const FBPServerCloudScriptRevisionOption& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerConsumeItemRequest(
		const FBPServerConsumeItemRequest& In
        ,FString& OutPlayFabId
        ,FString& OutItemInstanceId
        ,int32& OutConsumeCount
        ,FString& OutCharacterId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutConsumeCount = In.Data.ConsumeCount;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFServerProxyLibrary::BreakBPServerConsumeItemResult(
		const FBPServerConsumeItemResult& In
        ,FString& OutItemInstanceId
        ,int32& OutRemainingUses
	)
{
    OutItemInstanceId = In.Data.ItemInstanceId;
	OutRemainingUses = In.Data.RemainingUses;
	
}

void UPFServerProxyLibrary::BreakBPServerContinentCode(
		const FBPServerContinentCode& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerCountryCode(
		const FBPServerCountryCode& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerCreateSharedGroupRequest(
		const FBPServerCreateSharedGroupRequest& In
        ,FString& OutSharedGroupId
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	
}

void UPFServerProxyLibrary::BreakBPServerCreateSharedGroupResult(
		const FBPServerCreateSharedGroupResult& In
        ,FString& OutSharedGroupId
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	
}

void UPFServerProxyLibrary::BreakBPServerCurrency(
		const FBPServerCurrency& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerDeleteCharacterFromUserRequest(
		const FBPServerDeleteCharacterFromUserRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,bool& OutSaveCharacterInventory
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutSaveCharacterInventory = In.Data.SaveCharacterInventory;
	
}

void UPFServerProxyLibrary::BreakBPServerDeleteCharacterFromUserResult(
		const FBPServerDeleteCharacterFromUserResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerDeleteSharedGroupRequest(
		const FBPServerDeleteSharedGroupRequest& In
        ,FString& OutSharedGroupId
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	
}

void UPFServerProxyLibrary::BreakBPServerDeleteUsersRequest(
		const FBPServerDeleteUsersRequest& In
        ,TArray<FString>& OutPlayFabIds
        ,FString& OutTitleId
	)
{
    OutPlayFabIds = In.Data.PlayFabIds;
	OutTitleId = In.Data.TitleId;
	
}

void UPFServerProxyLibrary::BreakBPServerDeleteUsersResult(
		const FBPServerDeleteUsersResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerDeregisterGameRequest(
		const FBPServerDeregisterGameRequest& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
}

void UPFServerProxyLibrary::BreakBPServerDeregisterGameResponse(
		const FBPServerDeregisterGameResponse& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerEmptyResult(
		const FBPServerEmptyResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerEvaluateRandomResultTableRequest(
		const FBPServerEvaluateRandomResultTableRequest& In
        ,FString& OutTableId
        ,FString& OutCatalogVersion
	)
{
    OutTableId = In.Data.TableId;
	OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerEvaluateRandomResultTableResult(
		const FBPServerEvaluateRandomResultTableResult& In
        ,FString& OutResultItemId
	)
{
    OutResultItemId = In.Data.ResultItemId;
	
}

void UPFServerProxyLibrary::BreakBPServerExecuteCloudScriptResult(
		const FBPServerExecuteCloudScriptResult& In
        ,FString& OutFunctionName
        ,int32& OutRevision
        ,bool& OutFunctionResultTooLarge
        ,TArray<FBPServerLogStatement>& OutLogs
        ,bool& OutLogsTooLarge
        ,float& OutExecutionTimeSeconds
        ,float& OutProcessorTimeSeconds
        ,int32& OutMemoryConsumedBytes
        ,int32& OutAPIRequestsIssued
        ,int32& OutHttpRequestsIssued
        ,FBPServerScriptExecutionError& OutError
	)
{
    OutFunctionName = In.Data.FunctionName;
	OutRevision = In.Data.Revision;
	
	OutFunctionResultTooLarge = In.Data.FunctionResultTooLarge;
	for (const PlayFab::ServerModels::FLogStatement& elem : In.Data.Logs)
    {
        FBPServerLogStatement result;
        result.Data = elem;
        OutLogs.Add(result);
    }

	OutLogsTooLarge = In.Data.LogsTooLarge;
	OutExecutionTimeSeconds = In.Data.ExecutionTimeSeconds;
	OutProcessorTimeSeconds = In.Data.ProcessorTimeSeconds;
	OutMemoryConsumedBytes = In.Data.MemoryConsumedBytes;
	OutAPIRequestsIssued = In.Data.APIRequestsIssued;
	OutHttpRequestsIssued = In.Data.HttpRequestsIssued;
	if (In.Data.Error.IsValid()) {    OutError.Data = *In.Data.Error;}
	
}

void UPFServerProxyLibrary::BreakBPServerExecuteCloudScriptServerRequest(
		const FBPServerExecuteCloudScriptServerRequest& In
        ,FString& OutPlayFabId
        ,FString& OutFunctionName
        ,int32& OutSpecificRevision
        ,bool& OutGeneratePlayStreamEvent
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutFunctionName = In.Data.FunctionName;
	
	
	OutSpecificRevision = In.Data.SpecificRevision;
	OutGeneratePlayStreamEvent = In.Data.GeneratePlayStreamEvent;
	
}

void UPFServerProxyLibrary::BreakBPServerFacebookPlayFabIdPair(
		const FBPServerFacebookPlayFabIdPair& In
        ,FString& OutFacebookId
        ,FString& OutPlayFabId
	)
{
    OutFacebookId = In.Data.FacebookId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerFriendInfo(
		const FBPServerFriendInfo& In
        ,FString& OutFriendPlayFabId
        ,FString& OutUsername
        ,FString& OutTitleDisplayName
        ,TArray<FString>& OutTags
        ,FString& OutCurrentMatchmakerLobbyId
        ,FBPServerUserFacebookInfo& OutFacebookInfo
        ,FBPServerUserSteamInfo& OutSteamInfo
        ,FBPServerUserGameCenterInfo& OutGameCenterInfo
	)
{
    OutFriendPlayFabId = In.Data.FriendPlayFabId;
	OutUsername = In.Data.Username;
	OutTitleDisplayName = In.Data.TitleDisplayName;
	OutTags = In.Data.Tags;
	OutCurrentMatchmakerLobbyId = In.Data.CurrentMatchmakerLobbyId;
	if (In.Data.FacebookInfo.IsValid()) {    OutFacebookInfo.Data = *In.Data.FacebookInfo;}
	if (In.Data.SteamInfo.IsValid()) {    OutSteamInfo.Data = *In.Data.SteamInfo;}
	if (In.Data.GameCenterInfo.IsValid()) {    OutGameCenterInfo.Data = *In.Data.GameCenterInfo;}
	
}

void UPFServerProxyLibrary::BreakBPServerGameInstanceState(
		const FBPServerGameInstanceState& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerGetActionGroupResult(
		const FBPServerGetActionGroupResult& In
        ,FString& OutName
        ,FString& OutId
	)
{
    OutName = In.Data.Name;
	OutId = In.Data.Id;
	
}

void UPFServerProxyLibrary::BreakBPServerGetAllActionGroupsRequest(
		const FBPServerGetAllActionGroupsRequest& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerGetAllActionGroupsResult(
		const FBPServerGetAllActionGroupsResult& In
        ,TArray<FBPServerGetActionGroupResult>& OutActionGroups
	)
{
    for (const PlayFab::ServerModels::FGetActionGroupResult& elem : In.Data.ActionGroups)
    {
        FBPServerGetActionGroupResult result;
        result.Data = elem;
        OutActionGroups.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetAllSegmentsRequest(
		const FBPServerGetAllSegmentsRequest& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerGetAllSegmentsResult(
		const FBPServerGetAllSegmentsResult& In
        ,TArray<FBPServerGetSegmentResult>& OutSegments
	)
{
    for (const PlayFab::ServerModels::FGetSegmentResult& elem : In.Data.Segments)
    {
        FBPServerGetSegmentResult result;
        result.Data = elem;
        OutSegments.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetCatalogItemsRequest(
		const FBPServerGetCatalogItemsRequest& In
        ,FString& OutCatalogVersion
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerGetCatalogItemsResult(
		const FBPServerGetCatalogItemsResult& In
        ,TArray<FBPServerCatalogItem>& OutCatalog
	)
{
    for (const PlayFab::ServerModels::FCatalogItem& elem : In.Data.Catalog)
    {
        FBPServerCatalogItem result;
        result.Data = elem;
        OutCatalog.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetCharacterDataRequest(
		const FBPServerGetCharacterDataRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,TArray<FString>& OutKeys
        ,int32& OutIfChangedFromDataVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutKeys = In.Data.Keys;
	OutIfChangedFromDataVersion = In.Data.IfChangedFromDataVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerGetCharacterDataResult(
		const FBPServerGetCharacterDataResult& In
        ,FString& OutPlayFabId
        ,int32& OutDataVersion
        ,FString& OutCharacterId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutDataVersion = In.Data.DataVersion;
	
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFServerProxyLibrary::BreakBPServerGetCharacterInventoryRequest(
		const FBPServerGetCharacterInventoryRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutCatalogVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerGetCharacterInventoryResult(
		const FBPServerGetCharacterInventoryResult& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,TArray<FBPServerItemInstance>& OutInventory
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	for (const PlayFab::ServerModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPServerItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
	
	
}

void UPFServerProxyLibrary::BreakBPServerGetCharacterLeaderboardRequest(
		const FBPServerGetCharacterLeaderboardRequest& In
        ,FString& OutCharacterId
        ,FString& OutCharacterType
        ,FString& OutStatisticName
        ,int32& OutStartPosition
        ,int32& OutMaxResultsCount
	)
{
    OutCharacterId = In.Data.CharacterId;
	OutCharacterType = In.Data.CharacterType;
	OutStatisticName = In.Data.StatisticName;
	OutStartPosition = In.Data.StartPosition;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	
}

void UPFServerProxyLibrary::BreakBPServerGetCharacterLeaderboardResult(
		const FBPServerGetCharacterLeaderboardResult& In
        ,TArray<FBPServerCharacterLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ServerModels::FCharacterLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPServerCharacterLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetCharacterStatisticsRequest(
		const FBPServerGetCharacterStatisticsRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFServerProxyLibrary::BreakBPServerGetCharacterStatisticsResult(
		const FBPServerGetCharacterStatisticsResult& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	
	
}

void UPFServerProxyLibrary::BreakBPServerGetContentDownloadUrlRequest(
		const FBPServerGetContentDownloadUrlRequest& In
        ,FString& OutKey
        ,FString& OutHttpMethod
        ,bool& OutThruCDN
	)
{
    OutKey = In.Data.Key;
	OutHttpMethod = In.Data.HttpMethod;
	OutThruCDN = In.Data.ThruCDN;
	
}

void UPFServerProxyLibrary::BreakBPServerGetContentDownloadUrlResult(
		const FBPServerGetContentDownloadUrlResult& In
        ,FString& OutURL
	)
{
    OutURL = In.Data.URL;
	
}

void UPFServerProxyLibrary::BreakBPServerGetFriendLeaderboardRequest(
		const FBPServerGetFriendLeaderboardRequest& In
        ,FString& OutPlayFabId
        ,FString& OutStatisticName
        ,int32& OutStartPosition
        ,int32& OutMaxResultsCount
        ,bool& OutIncludeSteamFriends
        ,bool& OutIncludeFacebookFriends
        ,int32& OutVersion
        ,bool& OutUseSpecificVersion
        ,FBPServerPlayerProfileViewConstraints& OutProfileConstraints
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutStatisticName = In.Data.StatisticName;
	OutStartPosition = In.Data.StartPosition;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	OutIncludeSteamFriends = In.Data.IncludeSteamFriends;
	OutIncludeFacebookFriends = In.Data.IncludeFacebookFriends;
	OutVersion = In.Data.Version;
	OutUseSpecificVersion = In.Data.UseSpecificVersion;
	if (In.Data.ProfileConstraints.IsValid()) {    OutProfileConstraints.Data = *In.Data.ProfileConstraints;}
	
}

void UPFServerProxyLibrary::BreakBPServerGetFriendsListRequest(
		const FBPServerGetFriendsListRequest& In
        ,FString& OutPlayFabId
        ,bool& OutIncludeSteamFriends
        ,bool& OutIncludeFacebookFriends
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutIncludeSteamFriends = In.Data.IncludeSteamFriends;
	OutIncludeFacebookFriends = In.Data.IncludeFacebookFriends;
	
}

void UPFServerProxyLibrary::BreakBPServerGetFriendsListResult(
		const FBPServerGetFriendsListResult& In
        ,TArray<FBPServerFriendInfo>& OutFriends
	)
{
    for (const PlayFab::ServerModels::FFriendInfo& elem : In.Data.Friends)
    {
        FBPServerFriendInfo result;
        result.Data = elem;
        OutFriends.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetLeaderboardAroundCharacterRequest(
		const FBPServerGetLeaderboardAroundCharacterRequest& In
        ,FString& OutStatisticName
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutCharacterType
        ,int32& OutMaxResultsCount
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutCharacterType = In.Data.CharacterType;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	
}

void UPFServerProxyLibrary::BreakBPServerGetLeaderboardAroundCharacterResult(
		const FBPServerGetLeaderboardAroundCharacterResult& In
        ,TArray<FBPServerCharacterLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ServerModels::FCharacterLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPServerCharacterLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetLeaderboardAroundUserRequest(
		const FBPServerGetLeaderboardAroundUserRequest& In
        ,FString& OutStatisticName
        ,FString& OutPlayFabId
        ,int32& OutMaxResultsCount
        ,FBPServerPlayerProfileViewConstraints& OutProfileConstraints
        ,int32& OutVersion
        ,bool& OutUseSpecificVersion
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutPlayFabId = In.Data.PlayFabId;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	if (In.Data.ProfileConstraints.IsValid()) {    OutProfileConstraints.Data = *In.Data.ProfileConstraints;}
	OutVersion = In.Data.Version;
	OutUseSpecificVersion = In.Data.UseSpecificVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerGetLeaderboardAroundUserResult(
		const FBPServerGetLeaderboardAroundUserResult& In
        ,TArray<FBPServerPlayerLeaderboardEntry>& OutLeaderboard
        ,int32& OutVersion
        ,FDateTime& OutNextReset
	)
{
    for (const PlayFab::ServerModels::FPlayerLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPServerPlayerLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	OutVersion = In.Data.Version;
	
	
}

void UPFServerProxyLibrary::BreakBPServerGetLeaderboardForUsersCharactersRequest(
		const FBPServerGetLeaderboardForUsersCharactersRequest& In
        ,FString& OutStatisticName
        ,FString& OutPlayFabId
        ,int32& OutMaxResultsCount
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutPlayFabId = In.Data.PlayFabId;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	
}

void UPFServerProxyLibrary::BreakBPServerGetLeaderboardForUsersCharactersResult(
		const FBPServerGetLeaderboardForUsersCharactersResult& In
        ,TArray<FBPServerCharacterLeaderboardEntry>& OutLeaderboard
	)
{
    for (const PlayFab::ServerModels::FCharacterLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPServerCharacterLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetLeaderboardRequest(
		const FBPServerGetLeaderboardRequest& In
        ,FString& OutStatisticName
        ,int32& OutStartPosition
        ,int32& OutMaxResultsCount
        ,FBPServerPlayerProfileViewConstraints& OutProfileConstraints
        ,int32& OutVersion
        ,bool& OutUseSpecificVersion
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutStartPosition = In.Data.StartPosition;
	OutMaxResultsCount = In.Data.MaxResultsCount;
	if (In.Data.ProfileConstraints.IsValid()) {    OutProfileConstraints.Data = *In.Data.ProfileConstraints;}
	OutVersion = In.Data.Version;
	OutUseSpecificVersion = In.Data.UseSpecificVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerGetLeaderboardResult(
		const FBPServerGetLeaderboardResult& In
        ,TArray<FBPServerPlayerLeaderboardEntry>& OutLeaderboard
        ,int32& OutVersion
        ,FDateTime& OutNextReset
	)
{
    for (const PlayFab::ServerModels::FPlayerLeaderboardEntry& elem : In.Data.Leaderboard)
    {
        FBPServerPlayerLeaderboardEntry result;
        result.Data = elem;
        OutLeaderboard.Add(result);
    }

	OutVersion = In.Data.Version;
	
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerCombinedInfoRequest(
		const FBPServerGetPlayerCombinedInfoRequest& In
        ,FString& OutPlayFabId
        ,FBPServerGetPlayerCombinedInfoRequestParams& OutInfoRequestParameters
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutInfoRequestParameters.Data = In.Data.InfoRequestParameters;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerCombinedInfoRequestParams(
		const FBPServerGetPlayerCombinedInfoRequestParams& In
        ,bool& OutGetUserAccountInfo
        ,bool& OutGetUserInventory
        ,bool& OutGetUserVirtualCurrency
        ,bool& OutGetUserData
        ,TArray<FString>& OutUserDataKeys
        ,bool& OutGetUserReadOnlyData
        ,TArray<FString>& OutUserReadOnlyDataKeys
        ,bool& OutGetCharacterInventories
        ,bool& OutGetCharacterList
        ,bool& OutGetTitleData
        ,TArray<FString>& OutTitleDataKeys
        ,bool& OutGetPlayerStatistics
        ,TArray<FString>& OutPlayerStatisticNames
	)
{
    OutGetUserAccountInfo = In.Data.GetUserAccountInfo;
	OutGetUserInventory = In.Data.GetUserInventory;
	OutGetUserVirtualCurrency = In.Data.GetUserVirtualCurrency;
	OutGetUserData = In.Data.GetUserData;
	OutUserDataKeys = In.Data.UserDataKeys;
	OutGetUserReadOnlyData = In.Data.GetUserReadOnlyData;
	OutUserReadOnlyDataKeys = In.Data.UserReadOnlyDataKeys;
	OutGetCharacterInventories = In.Data.GetCharacterInventories;
	OutGetCharacterList = In.Data.GetCharacterList;
	OutGetTitleData = In.Data.GetTitleData;
	OutTitleDataKeys = In.Data.TitleDataKeys;
	OutGetPlayerStatistics = In.Data.GetPlayerStatistics;
	OutPlayerStatisticNames = In.Data.PlayerStatisticNames;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerCombinedInfoResult(
		const FBPServerGetPlayerCombinedInfoResult& In
        ,FString& OutPlayFabId
        ,FBPServerGetPlayerCombinedInfoResultPayload& OutInfoResultPayload
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	if (In.Data.InfoResultPayload.IsValid()) {    OutInfoResultPayload.Data = *In.Data.InfoResultPayload;}
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerCombinedInfoResultPayload(
		const FBPServerGetPlayerCombinedInfoResultPayload& In
        ,FBPServerUserAccountInfo& OutAccountInfo
        ,TArray<FBPServerItemInstance>& OutUserInventory
        ,int32& OutUserDataVersion
        ,int32& OutUserReadOnlyDataVersion
        ,TArray<FBPServerCharacterResult>& OutCharacterList
        ,TArray<FBPServerCharacterInventory>& OutCharacterInventories
        ,TArray<FBPServerStatisticValue>& OutPlayerStatistics
	)
{
    if (In.Data.AccountInfo.IsValid()) {    OutAccountInfo.Data = *In.Data.AccountInfo;}
	for (const PlayFab::ServerModels::FItemInstance& elem : In.Data.UserInventory)
    {
        FBPServerItemInstance result;
        result.Data = elem;
        OutUserInventory.Add(result);
    }

	
	
	
	OutUserDataVersion = In.Data.UserDataVersion;
	
	OutUserReadOnlyDataVersion = In.Data.UserReadOnlyDataVersion;
	for (const PlayFab::ServerModels::FCharacterResult& elem : In.Data.CharacterList)
    {
        FBPServerCharacterResult result;
        result.Data = elem;
        OutCharacterList.Add(result);
    }

	for (const PlayFab::ServerModels::FCharacterInventory& elem : In.Data.CharacterInventories)
    {
        FBPServerCharacterInventory result;
        result.Data = elem;
        OutCharacterInventories.Add(result);
    }

	
	for (const PlayFab::ServerModels::FStatisticValue& elem : In.Data.PlayerStatistics)
    {
        FBPServerStatisticValue result;
        result.Data = elem;
        OutPlayerStatistics.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerSegmentsResult(
		const FBPServerGetPlayerSegmentsResult& In
        ,TArray<FBPServerGetSegmentResult>& OutSegments
	)
{
    for (const PlayFab::ServerModels::FGetSegmentResult& elem : In.Data.Segments)
    {
        FBPServerGetSegmentResult result;
        result.Data = elem;
        OutSegments.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayersInSegmentRequest(
		const FBPServerGetPlayersInSegmentRequest& In
        ,FString& OutSegmentId
        ,int32& OutSecondsToLive
        ,int32& OutMaxBatchSize
        ,FString& OutContinuationToken
	)
{
    OutSegmentId = In.Data.SegmentId;
	OutSecondsToLive = In.Data.SecondsToLive;
	OutMaxBatchSize = In.Data.MaxBatchSize;
	OutContinuationToken = In.Data.ContinuationToken;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayersInSegmentResult(
		const FBPServerGetPlayersInSegmentResult& In
        ,int32& OutProfilesInSegment
        ,FString& OutContinuationToken
        ,TArray<FBPServerPlayerProfile>& OutPlayerProfiles
	)
{
    OutProfilesInSegment = In.Data.ProfilesInSegment;
	OutContinuationToken = In.Data.ContinuationToken;
	for (const PlayFab::ServerModels::FPlayerProfile& elem : In.Data.PlayerProfiles)
    {
        FBPServerPlayerProfile result;
        result.Data = elem;
        OutPlayerProfiles.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayersSegmentsRequest(
		const FBPServerGetPlayersSegmentsRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerStatisticsRequest(
		const FBPServerGetPlayerStatisticsRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutStatisticNames
        ,TArray<FBPServerStatisticNameVersion>& OutStatisticNameVersions
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutStatisticNames = In.Data.StatisticNames;
	for (const PlayFab::ServerModels::FStatisticNameVersion& elem : In.Data.StatisticNameVersions)
    {
        FBPServerStatisticNameVersion result;
        result.Data = elem;
        OutStatisticNameVersions.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerStatisticsResult(
		const FBPServerGetPlayerStatisticsResult& In
        ,FString& OutPlayFabId
        ,TArray<FBPServerStatisticValue>& OutStatistics
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	for (const PlayFab::ServerModels::FStatisticValue& elem : In.Data.Statistics)
    {
        FBPServerStatisticValue result;
        result.Data = elem;
        OutStatistics.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerStatisticVersionsRequest(
		const FBPServerGetPlayerStatisticVersionsRequest& In
        ,FString& OutStatisticName
	)
{
    OutStatisticName = In.Data.StatisticName;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerStatisticVersionsResult(
		const FBPServerGetPlayerStatisticVersionsResult& In
        ,TArray<FBPServerPlayerStatisticVersion>& OutStatisticVersions
	)
{
    for (const PlayFab::ServerModels::FPlayerStatisticVersion& elem : In.Data.StatisticVersions)
    {
        FBPServerPlayerStatisticVersion result;
        result.Data = elem;
        OutStatisticVersions.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerTagsRequest(
		const FBPServerGetPlayerTagsRequest& In
        ,FString& OutPlayFabId
        ,FString& OutNamespace
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutNamespace = In.Data.Namespace;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayerTagsResult(
		const FBPServerGetPlayerTagsResult& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutTags
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutTags = In.Data.Tags;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayFabIDsFromFacebookIDsRequest(
		const FBPServerGetPlayFabIDsFromFacebookIDsRequest& In
        ,TArray<FString>& OutFacebookIDs
	)
{
    OutFacebookIDs = In.Data.FacebookIDs;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayFabIDsFromFacebookIDsResult(
		const FBPServerGetPlayFabIDsFromFacebookIDsResult& In
        ,TArray<FBPServerFacebookPlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ServerModels::FFacebookPlayFabIdPair& elem : In.Data.Data)
    {
        FBPServerFacebookPlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayFabIDsFromSteamIDsRequest(
		const FBPServerGetPlayFabIDsFromSteamIDsRequest& In
        ,TArray<FString>& OutSteamStringIDs
	)
{
    OutSteamStringIDs = In.Data.SteamStringIDs;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPlayFabIDsFromSteamIDsResult(
		const FBPServerGetPlayFabIDsFromSteamIDsResult& In
        ,TArray<FBPServerSteamPlayFabIdPair>& OutData
	)
{
    for (const PlayFab::ServerModels::FSteamPlayFabIdPair& elem : In.Data.Data)
    {
        FBPServerSteamPlayFabIdPair result;
        result.Data = elem;
        OutData.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetPublisherDataRequest(
		const FBPServerGetPublisherDataRequest& In
        ,TArray<FString>& OutKeys
	)
{
    OutKeys = In.Data.Keys;
	
}

void UPFServerProxyLibrary::BreakBPServerGetPublisherDataResult(
		const FBPServerGetPublisherDataResult& In
	)
{
    
	
}

void UPFServerProxyLibrary::BreakBPServerGetRandomResultTablesRequest(
		const FBPServerGetRandomResultTablesRequest& In
        ,FString& OutCatalogVersion
        ,TArray<FString>& OutTableIDs
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutTableIDs = In.Data.TableIDs;
	
}

void UPFServerProxyLibrary::BreakBPServerGetRandomResultTablesResult(
		const FBPServerGetRandomResultTablesResult& In
	)
{
    
	
}

void UPFServerProxyLibrary::BreakBPServerGetSegmentResult(
		const FBPServerGetSegmentResult& In
        ,FString& OutId
        ,FString& OutName
        ,FString& OutABTestParent
	)
{
    OutId = In.Data.Id;
	OutName = In.Data.Name;
	OutABTestParent = In.Data.ABTestParent;
	
}

void UPFServerProxyLibrary::BreakBPServerGetSharedGroupDataRequest(
		const FBPServerGetSharedGroupDataRequest& In
        ,FString& OutSharedGroupId
        ,TArray<FString>& OutKeys
        ,bool& OutGetMembers
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	OutKeys = In.Data.Keys;
	OutGetMembers = In.Data.GetMembers;
	
}

void UPFServerProxyLibrary::BreakBPServerGetSharedGroupDataResult(
		const FBPServerGetSharedGroupDataResult& In
        ,TArray<FString>& OutMembers
	)
{
    
	OutMembers = In.Data.Members;
	
}

void UPFServerProxyLibrary::BreakBPServerGetTimeRequest(
		const FBPServerGetTimeRequest& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerGetTimeResult(
		const FBPServerGetTimeResult& In
        ,FDateTime& OutTime
	)
{
    
	
}

void UPFServerProxyLibrary::BreakBPServerGetTitleDataRequest(
		const FBPServerGetTitleDataRequest& In
        ,TArray<FString>& OutKeys
	)
{
    OutKeys = In.Data.Keys;
	
}

void UPFServerProxyLibrary::BreakBPServerGetTitleDataResult(
		const FBPServerGetTitleDataResult& In
	)
{
    
	
}

void UPFServerProxyLibrary::BreakBPServerGetTitleNewsRequest(
		const FBPServerGetTitleNewsRequest& In
        ,int32& OutCount
	)
{
    OutCount = In.Data.Count;
	
}

void UPFServerProxyLibrary::BreakBPServerGetTitleNewsResult(
		const FBPServerGetTitleNewsResult& In
        ,TArray<FBPServerTitleNewsItem>& OutNews
	)
{
    for (const PlayFab::ServerModels::FTitleNewsItem& elem : In.Data.News)
    {
        FBPServerTitleNewsItem result;
        result.Data = elem;
        OutNews.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetUserAccountInfoRequest(
		const FBPServerGetUserAccountInfoRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerGetUserAccountInfoResult(
		const FBPServerGetUserAccountInfoResult& In
        ,FBPServerUserAccountInfo& OutUserInfo
	)
{
    if (In.Data.UserInfo.IsValid()) {    OutUserInfo.Data = *In.Data.UserInfo;}
	
}

void UPFServerProxyLibrary::BreakBPServerGetUserBansRequest(
		const FBPServerGetUserBansRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerGetUserBansResult(
		const FBPServerGetUserBansResult& In
        ,TArray<FBPServerBanInfo>& OutBanData
	)
{
    for (const PlayFab::ServerModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPServerBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGetUserDataRequest(
		const FBPServerGetUserDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeys
        ,int32& OutIfChangedFromDataVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutKeys = In.Data.Keys;
	OutIfChangedFromDataVersion = In.Data.IfChangedFromDataVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerGetUserDataResult(
		const FBPServerGetUserDataResult& In
        ,FString& OutPlayFabId
        ,int32& OutDataVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutDataVersion = In.Data.DataVersion;
	
	
}

void UPFServerProxyLibrary::BreakBPServerGetUserInventoryRequest(
		const FBPServerGetUserInventoryRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerGetUserInventoryResult(
		const FBPServerGetUserInventoryResult& In
        ,FString& OutPlayFabId
        ,TArray<FBPServerItemInstance>& OutInventory
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	for (const PlayFab::ServerModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPServerItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
	
	
}

void UPFServerProxyLibrary::BreakBPServerGrantCharacterToUserRequest(
		const FBPServerGrantCharacterToUserRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterName
        ,FString& OutCharacterType
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterName = In.Data.CharacterName;
	OutCharacterType = In.Data.CharacterType;
	
}

void UPFServerProxyLibrary::BreakBPServerGrantCharacterToUserResult(
		const FBPServerGrantCharacterToUserResult& In
        ,FString& OutCharacterId
	)
{
    OutCharacterId = In.Data.CharacterId;
	
}

void UPFServerProxyLibrary::BreakBPServerGrantedItemInstance(
		const FBPServerGrantedItemInstance& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,bool& OutResult
        ,FString& OutItemId
        ,FString& OutItemInstanceId
        ,FString& OutItemClass
        ,FDateTime& OutPurchaseDate
        ,FDateTime& OutExpiration
        ,int32& OutRemainingUses
        ,int32& OutUsesIncrementedBy
        ,FString& OutAnnotation
        ,FString& OutCatalogVersion
        ,FString& OutBundleParent
        ,FString& OutDisplayName
        ,FString& OutUnitCurrency
        ,int32& OutUnitPrice
        ,TArray<FString>& OutBundleContents
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutResult = In.Data.Result;
	OutItemId = In.Data.ItemId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutItemClass = In.Data.ItemClass;
	
	
	OutRemainingUses = In.Data.RemainingUses;
	OutUsesIncrementedBy = In.Data.UsesIncrementedBy;
	OutAnnotation = In.Data.Annotation;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutBundleParent = In.Data.BundleParent;
	OutDisplayName = In.Data.DisplayName;
	OutUnitCurrency = In.Data.UnitCurrency;
	OutUnitPrice = In.Data.UnitPrice;
	OutBundleContents = In.Data.BundleContents;
	
	
}

void UPFServerProxyLibrary::BreakBPServerGrantItemsToCharacterRequest(
		const FBPServerGrantItemsToCharacterRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutCharacterId
        ,FString& OutPlayFabId
        ,FString& OutAnnotation
        ,TArray<FString>& OutItemIds
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutCharacterId = In.Data.CharacterId;
	OutPlayFabId = In.Data.PlayFabId;
	OutAnnotation = In.Data.Annotation;
	OutItemIds = In.Data.ItemIds;
	
}

void UPFServerProxyLibrary::BreakBPServerGrantItemsToCharacterResult(
		const FBPServerGrantItemsToCharacterResult& In
        ,TArray<FBPServerGrantedItemInstance>& OutItemGrantResults
	)
{
    for (const PlayFab::ServerModels::FGrantedItemInstance& elem : In.Data.ItemGrantResults)
    {
        FBPServerGrantedItemInstance result;
        result.Data = elem;
        OutItemGrantResults.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGrantItemsToUserRequest(
		const FBPServerGrantItemsToUserRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutPlayFabId
        ,FString& OutAnnotation
        ,TArray<FString>& OutItemIds
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutPlayFabId = In.Data.PlayFabId;
	OutAnnotation = In.Data.Annotation;
	OutItemIds = In.Data.ItemIds;
	
}

void UPFServerProxyLibrary::BreakBPServerGrantItemsToUserResult(
		const FBPServerGrantItemsToUserResult& In
        ,TArray<FBPServerGrantedItemInstance>& OutItemGrantResults
	)
{
    for (const PlayFab::ServerModels::FGrantedItemInstance& elem : In.Data.ItemGrantResults)
    {
        FBPServerGrantedItemInstance result;
        result.Data = elem;
        OutItemGrantResults.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGrantItemsToUsersRequest(
		const FBPServerGrantItemsToUsersRequest& In
        ,FString& OutCatalogVersion
        ,TArray<FBPServerItemGrant>& OutItemGrants
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	for (const PlayFab::ServerModels::FItemGrant& elem : In.Data.ItemGrants)
    {
        FBPServerItemGrant result;
        result.Data = elem;
        OutItemGrants.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerGrantItemsToUsersResult(
		const FBPServerGrantItemsToUsersResult& In
        ,TArray<FBPServerGrantedItemInstance>& OutItemGrantResults
	)
{
    for (const PlayFab::ServerModels::FGrantedItemInstance& elem : In.Data.ItemGrantResults)
    {
        FBPServerGrantedItemInstance result;
        result.Data = elem;
        OutItemGrantResults.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerItemGrant(
		const FBPServerItemGrant& In
        ,FString& OutPlayFabId
        ,FString& OutItemId
        ,FString& OutAnnotation
        ,FString& OutCharacterId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutItemId = In.Data.ItemId;
	OutAnnotation = In.Data.Annotation;
	OutCharacterId = In.Data.CharacterId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
}

void UPFServerProxyLibrary::BreakBPServerItemInstance(
		const FBPServerItemInstance& In
        ,FString& OutItemId
        ,FString& OutItemInstanceId
        ,FString& OutItemClass
        ,FDateTime& OutPurchaseDate
        ,FDateTime& OutExpiration
        ,int32& OutRemainingUses
        ,int32& OutUsesIncrementedBy
        ,FString& OutAnnotation
        ,FString& OutCatalogVersion
        ,FString& OutBundleParent
        ,FString& OutDisplayName
        ,FString& OutUnitCurrency
        ,int32& OutUnitPrice
        ,TArray<FString>& OutBundleContents
	)
{
    OutItemId = In.Data.ItemId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutItemClass = In.Data.ItemClass;
	
	
	OutRemainingUses = In.Data.RemainingUses;
	OutUsesIncrementedBy = In.Data.UsesIncrementedBy;
	OutAnnotation = In.Data.Annotation;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutBundleParent = In.Data.BundleParent;
	OutDisplayName = In.Data.DisplayName;
	OutUnitCurrency = In.Data.UnitCurrency;
	OutUnitPrice = In.Data.UnitPrice;
	OutBundleContents = In.Data.BundleContents;
	
	
}

void UPFServerProxyLibrary::BreakBPServerLinkedPlatformAccountModel(
		const FBPServerLinkedPlatformAccountModel& In
        ,FString& OutPlatformUserId
        ,FString& OutUsername
        ,FString& OutEmail
	)
{
    
	OutPlatformUserId = In.Data.PlatformUserId;
	OutUsername = In.Data.Username;
	OutEmail = In.Data.Email;
	
}

void UPFServerProxyLibrary::BreakBPServerListUsersCharactersRequest(
		const FBPServerListUsersCharactersRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerListUsersCharactersResult(
		const FBPServerListUsersCharactersResult& In
        ,TArray<FBPServerCharacterResult>& OutCharacters
	)
{
    for (const PlayFab::ServerModels::FCharacterResult& elem : In.Data.Characters)
    {
        FBPServerCharacterResult result;
        result.Data = elem;
        OutCharacters.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerLocationModel(
		const FBPServerLocationModel& In
        ,FString& OutCity
        ,float& OutLatitude
        ,float& OutLongitude
	)
{
    
	
	OutCity = In.Data.City;
	OutLatitude = In.Data.Latitude;
	OutLongitude = In.Data.Longitude;
	
}

void UPFServerProxyLibrary::BreakBPServerLoginIdentityProvider(
		const FBPServerLoginIdentityProvider& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerLogStatement(
		const FBPServerLogStatement& In
        ,FString& OutLevel
        ,FString& OutMessage
	)
{
    OutLevel = In.Data.Level;
	OutMessage = In.Data.Message;
	
	
}

void UPFServerProxyLibrary::BreakBPServerModifyCharacterVirtualCurrencyResult(
		const FBPServerModifyCharacterVirtualCurrencyResult& In
        ,FString& OutVirtualCurrency
        ,int32& OutBalance
	)
{
    OutVirtualCurrency = In.Data.VirtualCurrency;
	OutBalance = In.Data.Balance;
	
}

void UPFServerProxyLibrary::BreakBPServerModifyItemUsesRequest(
		const FBPServerModifyItemUsesRequest& In
        ,FString& OutPlayFabId
        ,FString& OutItemInstanceId
        ,int32& OutUsesToAdd
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutUsesToAdd = In.Data.UsesToAdd;
	
}

void UPFServerProxyLibrary::BreakBPServerModifyItemUsesResult(
		const FBPServerModifyItemUsesResult& In
        ,FString& OutItemInstanceId
        ,int32& OutRemainingUses
	)
{
    OutItemInstanceId = In.Data.ItemInstanceId;
	OutRemainingUses = In.Data.RemainingUses;
	
}

void UPFServerProxyLibrary::BreakBPServerModifyUserVirtualCurrencyResult(
		const FBPServerModifyUserVirtualCurrencyResult& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutBalanceChange
        ,int32& OutBalance
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutBalanceChange = In.Data.BalanceChange;
	OutBalance = In.Data.Balance;
	
}

void UPFServerProxyLibrary::BreakBPServerMoveItemToCharacterFromCharacterRequest(
		const FBPServerMoveItemToCharacterFromCharacterRequest& In
        ,FString& OutPlayFabId
        ,FString& OutGivingCharacterId
        ,FString& OutReceivingCharacterId
        ,FString& OutItemInstanceId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutGivingCharacterId = In.Data.GivingCharacterId;
	OutReceivingCharacterId = In.Data.ReceivingCharacterId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	
}

void UPFServerProxyLibrary::BreakBPServerMoveItemToCharacterFromCharacterResult(
		const FBPServerMoveItemToCharacterFromCharacterResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerMoveItemToCharacterFromUserRequest(
		const FBPServerMoveItemToCharacterFromUserRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutItemInstanceId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	
}

void UPFServerProxyLibrary::BreakBPServerMoveItemToCharacterFromUserResult(
		const FBPServerMoveItemToCharacterFromUserResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerMoveItemToUserFromCharacterRequest(
		const FBPServerMoveItemToUserFromCharacterRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutItemInstanceId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	
}

void UPFServerProxyLibrary::BreakBPServerMoveItemToUserFromCharacterResult(
		const FBPServerMoveItemToUserFromCharacterResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerNameIdentifier(
		const FBPServerNameIdentifier& In
        ,FString& OutName
        ,FString& OutId
	)
{
    OutName = In.Data.Name;
	OutId = In.Data.Id;
	
}

void UPFServerProxyLibrary::BreakBPServerNotifyMatchmakerPlayerLeftRequest(
		const FBPServerNotifyMatchmakerPlayerLeftRequest& In
        ,FString& OutLobbyId
        ,FString& OutPlayFabId
	)
{
    OutLobbyId = In.Data.LobbyId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerNotifyMatchmakerPlayerLeftResult(
		const FBPServerNotifyMatchmakerPlayerLeftResult& In
	)
{
    
	
}

void UPFServerProxyLibrary::BreakBPServerPlayerConnectionState(
		const FBPServerPlayerConnectionState& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerPlayerLeaderboardEntry(
		const FBPServerPlayerLeaderboardEntry& In
        ,FString& OutPlayFabId
        ,FString& OutDisplayName
        ,int32& OutStatValue
        ,int32& OutPosition
        ,FBPServerPlayerProfileModel& OutProfile
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutDisplayName = In.Data.DisplayName;
	OutStatValue = In.Data.StatValue;
	OutPosition = In.Data.Position;
	if (In.Data.Profile.IsValid()) {    OutProfile.Data = *In.Data.Profile;}
	
}

void UPFServerProxyLibrary::BreakBPServerPlayerLinkedAccount(
		const FBPServerPlayerLinkedAccount& In
        ,FString& OutPlatformUserId
        ,FString& OutUsername
        ,FString& OutEmail
	)
{
    
	OutPlatformUserId = In.Data.PlatformUserId;
	OutUsername = In.Data.Username;
	OutEmail = In.Data.Email;
	
}

void UPFServerProxyLibrary::BreakBPServerPlayerLocation(
		const FBPServerPlayerLocation& In
        ,FString& OutCity
        ,float& OutLatitude
        ,float& OutLongitude
	)
{
    
	
	OutCity = In.Data.City;
	OutLatitude = In.Data.Latitude;
	OutLongitude = In.Data.Longitude;
	
}

void UPFServerProxyLibrary::BreakBPServerPlayerProfile(
		const FBPServerPlayerProfile& In
        ,FString& OutPlayerId
        ,FString& OutTitleId
        ,FString& OutDisplayName
        ,FString& OutPublisherId
        ,FDateTime& OutCreated
        ,FDateTime& OutLastLogin
        ,FDateTime& OutBannedUntil
        ,FString& OutAvatarUrl
        ,int32& OutTotalValueToDateInUSD
        ,TArray<FString>& OutTags
        ,TArray<FBPServerAdCampaignAttribution>& OutAdCampaignAttributions
        ,TArray<FBPServerPushNotificationRegistration>& OutPushNotificationRegistrations
        ,TArray<FBPServerPlayerLinkedAccount>& OutLinkedAccounts
        ,TArray<FBPServerPlayerStatistic>& OutPlayerStatistics
	)
{
    OutPlayerId = In.Data.PlayerId;
	OutTitleId = In.Data.TitleId;
	OutDisplayName = In.Data.DisplayName;
	OutPublisherId = In.Data.PublisherId;
	
	
	
	
	OutAvatarUrl = In.Data.AvatarUrl;
	
	OutTotalValueToDateInUSD = In.Data.TotalValueToDateInUSD;
	
	OutTags = In.Data.Tags;
	
	
	for (const PlayFab::ServerModels::FAdCampaignAttribution& elem : In.Data.AdCampaignAttributions)
    {
        FBPServerAdCampaignAttribution result;
        result.Data = elem;
        OutAdCampaignAttributions.Add(result);
    }

	for (const PlayFab::ServerModels::FPushNotificationRegistration& elem : In.Data.PushNotificationRegistrations)
    {
        FBPServerPushNotificationRegistration result;
        result.Data = elem;
        OutPushNotificationRegistrations.Add(result);
    }

	for (const PlayFab::ServerModels::FPlayerLinkedAccount& elem : In.Data.LinkedAccounts)
    {
        FBPServerPlayerLinkedAccount result;
        result.Data = elem;
        OutLinkedAccounts.Add(result);
    }

	for (const PlayFab::ServerModels::FPlayerStatistic& elem : In.Data.PlayerStatistics)
    {
        FBPServerPlayerStatistic result;
        result.Data = elem;
        OutPlayerStatistics.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerPlayerProfileModel(
		const FBPServerPlayerProfileModel& In
        ,FString& OutPublisherId
        ,FString& OutTitleId
        ,FString& OutPlayerId
        ,FDateTime& OutCreated
        ,FDateTime& OutLastLogin
        ,FDateTime& OutBannedUntil
        ,TArray<FBPServerLocationModel>& OutLocations
        ,FString& OutDisplayName
        ,FString& OutAvatarUrl
        ,TArray<FBPServerTagModel>& OutTags
        ,TArray<FBPServerPushNotificationRegistrationModel>& OutPushNotificationRegistrations
        ,TArray<FBPServerLinkedPlatformAccountModel>& OutLinkedAccounts
        ,TArray<FBPServerAdCampaignAttributionModel>& OutAdCampaignAttributions
        ,int32& OutTotalValueToDateInUSD
        ,TArray<FBPServerValueToDateModel>& OutValuesToDate
        ,TArray<FBPServerVirtualCurrencyBalanceModel>& OutVirtualCurrencyBalances
        ,TArray<FBPServerStatisticModel>& OutStatistics
	)
{
    OutPublisherId = In.Data.PublisherId;
	OutTitleId = In.Data.TitleId;
	OutPlayerId = In.Data.PlayerId;
	
	
	
	
	for (const PlayFab::ServerModels::FLocationModel& elem : In.Data.Locations)
    {
        FBPServerLocationModel result;
        result.Data = elem;
        OutLocations.Add(result);
    }

	OutDisplayName = In.Data.DisplayName;
	OutAvatarUrl = In.Data.AvatarUrl;
	for (const PlayFab::ServerModels::FTagModel& elem : In.Data.Tags)
    {
        FBPServerTagModel result;
        result.Data = elem;
        OutTags.Add(result);
    }

	for (const PlayFab::ServerModels::FPushNotificationRegistrationModel& elem : In.Data.PushNotificationRegistrations)
    {
        FBPServerPushNotificationRegistrationModel result;
        result.Data = elem;
        OutPushNotificationRegistrations.Add(result);
    }

	for (const PlayFab::ServerModels::FLinkedPlatformAccountModel& elem : In.Data.LinkedAccounts)
    {
        FBPServerLinkedPlatformAccountModel result;
        result.Data = elem;
        OutLinkedAccounts.Add(result);
    }

	for (const PlayFab::ServerModels::FAdCampaignAttributionModel& elem : In.Data.AdCampaignAttributions)
    {
        FBPServerAdCampaignAttributionModel result;
        result.Data = elem;
        OutAdCampaignAttributions.Add(result);
    }

	OutTotalValueToDateInUSD = In.Data.TotalValueToDateInUSD;
	for (const PlayFab::ServerModels::FValueToDateModel& elem : In.Data.ValuesToDate)
    {
        FBPServerValueToDateModel result;
        result.Data = elem;
        OutValuesToDate.Add(result);
    }

	for (const PlayFab::ServerModels::FVirtualCurrencyBalanceModel& elem : In.Data.VirtualCurrencyBalances)
    {
        FBPServerVirtualCurrencyBalanceModel result;
        result.Data = elem;
        OutVirtualCurrencyBalances.Add(result);
    }

	for (const PlayFab::ServerModels::FStatisticModel& elem : In.Data.Statistics)
    {
        FBPServerStatisticModel result;
        result.Data = elem;
        OutStatistics.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerPlayerProfileViewConstraints(
		const FBPServerPlayerProfileViewConstraints& In
        ,bool& OutShowDisplayName
        ,bool& OutShowCreated
        ,bool& OutShowOrigination
        ,bool& OutShowLastLogin
        ,bool& OutShowBannedUntil
        ,bool& OutShowStatistics
        ,bool& OutShowCampaignAttributions
        ,bool& OutShowPushNotificationRegistrations
        ,bool& OutShowLinkedAccounts
        ,bool& OutShowTotalValueToDateInUsd
        ,bool& OutShowValuesToDate
        ,bool& OutShowTags
        ,bool& OutShowLocations
        ,bool& OutShowAvatarUrl
	)
{
    OutShowDisplayName = In.Data.ShowDisplayName;
	OutShowCreated = In.Data.ShowCreated;
	OutShowOrigination = In.Data.ShowOrigination;
	OutShowLastLogin = In.Data.ShowLastLogin;
	OutShowBannedUntil = In.Data.ShowBannedUntil;
	OutShowStatistics = In.Data.ShowStatistics;
	OutShowCampaignAttributions = In.Data.ShowCampaignAttributions;
	OutShowPushNotificationRegistrations = In.Data.ShowPushNotificationRegistrations;
	OutShowLinkedAccounts = In.Data.ShowLinkedAccounts;
	OutShowTotalValueToDateInUsd = In.Data.ShowTotalValueToDateInUsd;
	OutShowValuesToDate = In.Data.ShowValuesToDate;
	OutShowTags = In.Data.ShowTags;
	OutShowLocations = In.Data.ShowLocations;
	OutShowAvatarUrl = In.Data.ShowAvatarUrl;
	
}

void UPFServerProxyLibrary::BreakBPServerPlayerStatistic(
		const FBPServerPlayerStatistic& In
        ,FString& OutId
        ,int32& OutStatisticVersion
        ,int32& OutStatisticValue
        ,FString& OutName
	)
{
    OutId = In.Data.Id;
	OutStatisticVersion = In.Data.StatisticVersion;
	OutStatisticValue = In.Data.StatisticValue;
	OutName = In.Data.Name;
	
}

void UPFServerProxyLibrary::BreakBPServerPlayerStatisticVersion(
		const FBPServerPlayerStatisticVersion& In
        ,FString& OutStatisticName
        ,int32& OutVersion
        ,FDateTime& OutScheduledActivationTime
        ,FDateTime& OutActivationTime
        ,FDateTime& OutScheduledDeactivationTime
        ,FDateTime& OutDeactivationTime
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutVersion = In.Data.Version;
	
	
	
	
	
}

void UPFServerProxyLibrary::BreakBPServerPushNotificationPlatform(
		const FBPServerPushNotificationPlatform& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerPushNotificationRegistration(
		const FBPServerPushNotificationRegistration& In
        ,FString& OutNotificationEndpointARN
	)
{
    
	OutNotificationEndpointARN = In.Data.NotificationEndpointARN;
	
}

void UPFServerProxyLibrary::BreakBPServerPushNotificationRegistrationModel(
		const FBPServerPushNotificationRegistrationModel& In
        ,FString& OutNotificationEndpointARN
	)
{
    
	OutNotificationEndpointARN = In.Data.NotificationEndpointARN;
	
}

void UPFServerProxyLibrary::BreakBPServerRandomResultTableListing(
		const FBPServerRandomResultTableListing& In
        ,FString& OutCatalogVersion
        ,FString& OutTableId
        ,TArray<FBPServerResultTableNode>& OutNodes
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutTableId = In.Data.TableId;
	for (const PlayFab::ServerModels::FResultTableNode& elem : In.Data.Nodes)
    {
        FBPServerResultTableNode result;
        result.Data = elem;
        OutNodes.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerRedeemCouponRequest(
		const FBPServerRedeemCouponRequest& In
        ,FString& OutCouponCode
        ,FString& OutPlayFabId
        ,FString& OutCatalogVersion
        ,FString& OutCharacterId
	)
{
    OutCouponCode = In.Data.CouponCode;
	OutPlayFabId = In.Data.PlayFabId;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFServerProxyLibrary::BreakBPServerRedeemCouponResult(
		const FBPServerRedeemCouponResult& In
        ,TArray<FBPServerItemInstance>& OutGrantedItems
	)
{
    for (const PlayFab::ServerModels::FItemInstance& elem : In.Data.GrantedItems)
    {
        FBPServerItemInstance result;
        result.Data = elem;
        OutGrantedItems.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerRedeemMatchmakerTicketRequest(
		const FBPServerRedeemMatchmakerTicketRequest& In
        ,FString& OutTicket
        ,FString& OutLobbyId
	)
{
    OutTicket = In.Data.Ticket;
	OutLobbyId = In.Data.LobbyId;
	
}

void UPFServerProxyLibrary::BreakBPServerRedeemMatchmakerTicketResult(
		const FBPServerRedeemMatchmakerTicketResult& In
        ,bool& OutTicketIsValid
        ,FString& OutError
        ,FBPServerUserAccountInfo& OutUserInfo
	)
{
    OutTicketIsValid = In.Data.TicketIsValid;
	OutError = In.Data.Error;
	if (In.Data.UserInfo.IsValid()) {    OutUserInfo.Data = *In.Data.UserInfo;}
	
}

void UPFServerProxyLibrary::BreakBPServerRefreshGameServerInstanceHeartbeatRequest(
		const FBPServerRefreshGameServerInstanceHeartbeatRequest& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
}

void UPFServerProxyLibrary::BreakBPServerRefreshGameServerInstanceHeartbeatResult(
		const FBPServerRefreshGameServerInstanceHeartbeatResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerRegion(
		const FBPServerRegion& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerRegisterGameRequest(
		const FBPServerRegisterGameRequest& In
        ,FString& OutServerHost
        ,FString& OutServerPort
        ,FString& OutBuild
        ,FString& OutGameMode
	)
{
    OutServerHost = In.Data.ServerHost;
	OutServerPort = In.Data.ServerPort;
	OutBuild = In.Data.Build;
	
	OutGameMode = In.Data.GameMode;
	
	
}

void UPFServerProxyLibrary::BreakBPServerRegisterGameResponse(
		const FBPServerRegisterGameResponse& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
}

void UPFServerProxyLibrary::BreakBPServerRemoveFriendRequest(
		const FBPServerRemoveFriendRequest& In
        ,FString& OutFriendPlayFabId
        ,FString& OutPlayFabId
	)
{
    OutFriendPlayFabId = In.Data.FriendPlayFabId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerRemovePlayerTagRequest(
		const FBPServerRemovePlayerTagRequest& In
        ,FString& OutPlayFabId
        ,FString& OutTagName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutTagName = In.Data.TagName;
	
}

void UPFServerProxyLibrary::BreakBPServerRemovePlayerTagResult(
		const FBPServerRemovePlayerTagResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerRemoveSharedGroupMembersRequest(
		const FBPServerRemoveSharedGroupMembersRequest& In
        ,FString& OutSharedGroupId
        ,TArray<FString>& OutPlayFabIds
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	OutPlayFabIds = In.Data.PlayFabIds;
	
}

void UPFServerProxyLibrary::BreakBPServerRemoveSharedGroupMembersResult(
		const FBPServerRemoveSharedGroupMembersResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerReportPlayerServerRequest(
		const FBPServerReportPlayerServerRequest& In
        ,FString& OutReporterId
        ,FString& OutReporteeId
        ,FString& OutTitleId
        ,FString& OutComment
	)
{
    OutReporterId = In.Data.ReporterId;
	OutReporteeId = In.Data.ReporteeId;
	OutTitleId = In.Data.TitleId;
	OutComment = In.Data.Comment;
	
}

void UPFServerProxyLibrary::BreakBPServerReportPlayerServerResult(
		const FBPServerReportPlayerServerResult& In
        ,bool& OutUpdated
        ,int32& OutSubmissionsRemaining
	)
{
    OutUpdated = In.Data.Updated;
	OutSubmissionsRemaining = In.Data.SubmissionsRemaining;
	
}

void UPFServerProxyLibrary::BreakBPServerResultTableNode(
		const FBPServerResultTableNode& In
        ,FString& OutResultItem
        ,int32& OutWeight
	)
{
    
	OutResultItem = In.Data.ResultItem;
	OutWeight = In.Data.Weight;
	
}

void UPFServerProxyLibrary::BreakBPServerResultTableNodeType(
		const FBPServerResultTableNodeType& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerRevokeAllBansForUserRequest(
		const FBPServerRevokeAllBansForUserRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerRevokeAllBansForUserResult(
		const FBPServerRevokeAllBansForUserResult& In
        ,TArray<FBPServerBanInfo>& OutBanData
	)
{
    for (const PlayFab::ServerModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPServerBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerRevokeBansRequest(
		const FBPServerRevokeBansRequest& In
        ,TArray<FString>& OutBanIds
	)
{
    OutBanIds = In.Data.BanIds;
	
}

void UPFServerProxyLibrary::BreakBPServerRevokeBansResult(
		const FBPServerRevokeBansResult& In
        ,TArray<FBPServerBanInfo>& OutBanData
	)
{
    for (const PlayFab::ServerModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPServerBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerRevokeInventoryItemRequest(
		const FBPServerRevokeInventoryItemRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutItemInstanceId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	
}

void UPFServerProxyLibrary::BreakBPServerRevokeInventoryResult(
		const FBPServerRevokeInventoryResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerScriptExecutionError(
		const FBPServerScriptExecutionError& In
        ,FString& OutError
        ,FString& OutMessage
        ,FString& OutStackTrace
	)
{
    OutError = In.Data.Error;
	OutMessage = In.Data.Message;
	OutStackTrace = In.Data.StackTrace;
	
}

void UPFServerProxyLibrary::BreakBPServerSendPushNotificationRequest(
		const FBPServerSendPushNotificationRequest& In
        ,FString& OutRecipient
        ,FString& OutMessage
        ,FString& OutSubject
	)
{
    OutRecipient = In.Data.Recipient;
	OutMessage = In.Data.Message;
	OutSubject = In.Data.Subject;
	
}

void UPFServerProxyLibrary::BreakBPServerSendPushNotificationResult(
		const FBPServerSendPushNotificationResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerSetFriendTagsRequest(
		const FBPServerSetFriendTagsRequest& In
        ,FString& OutPlayFabId
        ,FString& OutFriendPlayFabId
        ,TArray<FString>& OutTags
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutFriendPlayFabId = In.Data.FriendPlayFabId;
	OutTags = In.Data.Tags;
	
}

void UPFServerProxyLibrary::BreakBPServerSetGameServerInstanceDataRequest(
		const FBPServerSetGameServerInstanceDataRequest& In
        ,FString& OutLobbyId
        ,FString& OutGameServerData
	)
{
    OutLobbyId = In.Data.LobbyId;
	OutGameServerData = In.Data.GameServerData;
	
}

void UPFServerProxyLibrary::BreakBPServerSetGameServerInstanceDataResult(
		const FBPServerSetGameServerInstanceDataResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerSetGameServerInstanceStateRequest(
		const FBPServerSetGameServerInstanceStateRequest& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
	
}

void UPFServerProxyLibrary::BreakBPServerSetGameServerInstanceStateResult(
		const FBPServerSetGameServerInstanceStateResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerSetGameServerInstanceTagsRequest(
		const FBPServerSetGameServerInstanceTagsRequest& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
	
}

void UPFServerProxyLibrary::BreakBPServerSetGameServerInstanceTagsResult(
		const FBPServerSetGameServerInstanceTagsResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerSetPublisherDataRequest(
		const FBPServerSetPublisherDataRequest& In
        ,FString& OutKey
        ,FString& OutValue
	)
{
    OutKey = In.Data.Key;
	OutValue = In.Data.Value;
	
}

void UPFServerProxyLibrary::BreakBPServerSetPublisherDataResult(
		const FBPServerSetPublisherDataResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerSetTitleDataRequest(
		const FBPServerSetTitleDataRequest& In
        ,FString& OutKey
        ,FString& OutValue
	)
{
    OutKey = In.Data.Key;
	OutValue = In.Data.Value;
	
}

void UPFServerProxyLibrary::BreakBPServerSetTitleDataResult(
		const FBPServerSetTitleDataResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerSharedGroupDataRecord(
		const FBPServerSharedGroupDataRecord& In
        ,FString& OutValue
        ,FString& OutLastUpdatedBy
        ,FDateTime& OutLastUpdated
	)
{
    OutValue = In.Data.Value;
	OutLastUpdatedBy = In.Data.LastUpdatedBy;
	
	
	
}

void UPFServerProxyLibrary::BreakBPServerStatisticModel(
		const FBPServerStatisticModel& In
        ,FString& OutName
        ,int32& OutVersion
        ,int32& OutValue
	)
{
    OutName = In.Data.Name;
	OutVersion = In.Data.Version;
	OutValue = In.Data.Value;
	
}

void UPFServerProxyLibrary::BreakBPServerStatisticNameVersion(
		const FBPServerStatisticNameVersion& In
        ,FString& OutStatisticName
        ,int32& OutVersion
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutVersion = In.Data.Version;
	
}

void UPFServerProxyLibrary::BreakBPServerStatisticUpdate(
		const FBPServerStatisticUpdate& In
        ,FString& OutStatisticName
        ,int32& OutVersion
        ,int32& OutValue
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutVersion = In.Data.Version;
	OutValue = In.Data.Value;
	
}

void UPFServerProxyLibrary::BreakBPServerStatisticValue(
		const FBPServerStatisticValue& In
        ,FString& OutStatisticName
        ,int32& OutValue
        ,int32& OutVersion
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutValue = In.Data.Value;
	OutVersion = In.Data.Version;
	
}

void UPFServerProxyLibrary::BreakBPServerSteamPlayFabIdPair(
		const FBPServerSteamPlayFabIdPair& In
        ,FString& OutSteamStringId
        ,FString& OutPlayFabId
	)
{
    OutSteamStringId = In.Data.SteamStringId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFServerProxyLibrary::BreakBPServerSubtractCharacterVirtualCurrencyRequest(
		const FBPServerSubtractCharacterVirtualCurrencyRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFServerProxyLibrary::BreakBPServerSubtractUserVirtualCurrencyRequest(
		const FBPServerSubtractUserVirtualCurrencyRequest& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFServerProxyLibrary::BreakBPServerTagModel(
		const FBPServerTagModel& In
        ,FString& OutTagValue
	)
{
    OutTagValue = In.Data.TagValue;
	
}

void UPFServerProxyLibrary::BreakBPServerTaskInstanceStatus(
		const FBPServerTaskInstanceStatus& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerTitleActivationStatus(
		const FBPServerTitleActivationStatus& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerTitleNewsItem(
		const FBPServerTitleNewsItem& In
        ,FDateTime& OutTimestamp
        ,FString& OutNewsId
        ,FString& OutTitle
        ,FString& OutBody
	)
{
    
	OutNewsId = In.Data.NewsId;
	OutTitle = In.Data.Title;
	OutBody = In.Data.Body;
	
}

void UPFServerProxyLibrary::BreakBPServerUnlockContainerInstanceRequest(
		const FBPServerUnlockContainerInstanceRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutContainerItemInstanceId
        ,FString& OutKeyItemInstanceId
        ,FString& OutCatalogVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutContainerItemInstanceId = In.Data.ContainerItemInstanceId;
	OutKeyItemInstanceId = In.Data.KeyItemInstanceId;
	OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerUnlockContainerItemRequest(
		const FBPServerUnlockContainerItemRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutContainerItemId
        ,FString& OutCatalogVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutContainerItemId = In.Data.ContainerItemId;
	OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerUnlockContainerItemResult(
		const FBPServerUnlockContainerItemResult& In
        ,FString& OutUnlockedItemInstanceId
        ,FString& OutUnlockedWithItemInstanceId
        ,TArray<FBPServerItemInstance>& OutGrantedItems
	)
{
    OutUnlockedItemInstanceId = In.Data.UnlockedItemInstanceId;
	OutUnlockedWithItemInstanceId = In.Data.UnlockedWithItemInstanceId;
	for (const PlayFab::ServerModels::FItemInstance& elem : In.Data.GrantedItems)
    {
        FBPServerItemInstance result;
        result.Data = elem;
        OutGrantedItems.Add(result);
    }

	
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateAvatarUrlRequest(
		const FBPServerUpdateAvatarUrlRequest& In
        ,FString& OutPlayFabId
        ,FString& OutImageUrl
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutImageUrl = In.Data.ImageUrl;
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateBanRequest(
		const FBPServerUpdateBanRequest& In
        ,FString& OutBanId
        ,FString& OutReason
        ,FDateTime& OutExpires
        ,FString& OutIPAddress
        ,FString& OutMACAddress
        ,bool& OutPermanent
        ,bool& OutActive
	)
{
    OutBanId = In.Data.BanId;
	OutReason = In.Data.Reason;
	
	OutIPAddress = In.Data.IPAddress;
	OutMACAddress = In.Data.MACAddress;
	OutPermanent = In.Data.Permanent;
	OutActive = In.Data.Active;
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateBansRequest(
		const FBPServerUpdateBansRequest& In
        ,TArray<FBPServerUpdateBanRequest>& OutBans
	)
{
    for (const PlayFab::ServerModels::FUpdateBanRequest& elem : In.Data.Bans)
    {
        FBPServerUpdateBanRequest result;
        result.Data = elem;
        OutBans.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerUpdateBansResult(
		const FBPServerUpdateBansResult& In
        ,TArray<FBPServerBanInfo>& OutBanData
	)
{
    for (const PlayFab::ServerModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPServerBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFServerProxyLibrary::BreakBPServerUpdateCharacterDataRequest(
		const FBPServerUpdateCharacterDataRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateCharacterDataResult(
		const FBPServerUpdateCharacterDataResult& In
        ,int32& OutDataVersion
	)
{
    OutDataVersion = In.Data.DataVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateCharacterStatisticsRequest(
		const FBPServerUpdateCharacterStatisticsRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateCharacterStatisticsResult(
		const FBPServerUpdateCharacterStatisticsResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerUpdatePlayerStatisticsRequest(
		const FBPServerUpdatePlayerStatisticsRequest& In
        ,FString& OutPlayFabId
        ,TArray<FBPServerStatisticUpdate>& OutStatistics
        ,bool& OutForceUpdate
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	for (const PlayFab::ServerModels::FStatisticUpdate& elem : In.Data.Statistics)
    {
        FBPServerStatisticUpdate result;
        result.Data = elem;
        OutStatistics.Add(result);
    }

	OutForceUpdate = In.Data.ForceUpdate;
	
}

void UPFServerProxyLibrary::BreakBPServerUpdatePlayerStatisticsResult(
		const FBPServerUpdatePlayerStatisticsResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerUpdateSharedGroupDataRequest(
		const FBPServerUpdateSharedGroupDataRequest& In
        ,FString& OutSharedGroupId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutSharedGroupId = In.Data.SharedGroupId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateSharedGroupDataResult(
		const FBPServerUpdateSharedGroupDataResult& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerUpdateUserDataRequest(
		const FBPServerUpdateUserDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateUserDataResult(
		const FBPServerUpdateUserDataResult& In
        ,int32& OutDataVersion
	)
{
    OutDataVersion = In.Data.DataVersion;
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateUserInternalDataRequest(
		const FBPServerUpdateUserInternalDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
}

void UPFServerProxyLibrary::BreakBPServerUpdateUserInventoryItemDataRequest(
		const FBPServerUpdateUserInventoryItemDataRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutItemInstanceId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
}

void UPFServerProxyLibrary::BreakBPServerUserAccountInfo(
		const FBPServerUserAccountInfo& In
        ,FString& OutPlayFabId
        ,FDateTime& OutCreated
        ,FString& OutUsername
        ,FBPServerUserTitleInfo& OutTitleInfo
        ,FBPServerUserPrivateAccountInfo& OutPrivateInfo
        ,FBPServerUserFacebookInfo& OutFacebookInfo
        ,FBPServerUserSteamInfo& OutSteamInfo
        ,FBPServerUserGameCenterInfo& OutGameCenterInfo
        ,FBPServerUserIosDeviceInfo& OutIosDeviceInfo
        ,FBPServerUserAndroidDeviceInfo& OutAndroidDeviceInfo
        ,FBPServerUserKongregateInfo& OutKongregateInfo
        ,FBPServerUserTwitchInfo& OutTwitchInfo
        ,FBPServerUserPsnInfo& OutPsnInfo
        ,FBPServerUserGoogleInfo& OutGoogleInfo
        ,FBPServerUserXboxInfo& OutXboxInfo
        ,FBPServerUserCustomIdInfo& OutCustomIdInfo
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutUsername = In.Data.Username;
	if (In.Data.TitleInfo.IsValid()) {    OutTitleInfo.Data = *In.Data.TitleInfo;}
	if (In.Data.PrivateInfo.IsValid()) {    OutPrivateInfo.Data = *In.Data.PrivateInfo;}
	if (In.Data.FacebookInfo.IsValid()) {    OutFacebookInfo.Data = *In.Data.FacebookInfo;}
	if (In.Data.SteamInfo.IsValid()) {    OutSteamInfo.Data = *In.Data.SteamInfo;}
	if (In.Data.GameCenterInfo.IsValid()) {    OutGameCenterInfo.Data = *In.Data.GameCenterInfo;}
	if (In.Data.IosDeviceInfo.IsValid()) {    OutIosDeviceInfo.Data = *In.Data.IosDeviceInfo;}
	if (In.Data.AndroidDeviceInfo.IsValid()) {    OutAndroidDeviceInfo.Data = *In.Data.AndroidDeviceInfo;}
	if (In.Data.KongregateInfo.IsValid()) {    OutKongregateInfo.Data = *In.Data.KongregateInfo;}
	if (In.Data.TwitchInfo.IsValid()) {    OutTwitchInfo.Data = *In.Data.TwitchInfo;}
	if (In.Data.PsnInfo.IsValid()) {    OutPsnInfo.Data = *In.Data.PsnInfo;}
	if (In.Data.GoogleInfo.IsValid()) {    OutGoogleInfo.Data = *In.Data.GoogleInfo;}
	if (In.Data.XboxInfo.IsValid()) {    OutXboxInfo.Data = *In.Data.XboxInfo;}
	if (In.Data.CustomIdInfo.IsValid()) {    OutCustomIdInfo.Data = *In.Data.CustomIdInfo;}
	
}

void UPFServerProxyLibrary::BreakBPServerUserAndroidDeviceInfo(
		const FBPServerUserAndroidDeviceInfo& In
        ,FString& OutAndroidDeviceId
	)
{
    OutAndroidDeviceId = In.Data.AndroidDeviceId;
	
}

void UPFServerProxyLibrary::BreakBPServerUserCustomIdInfo(
		const FBPServerUserCustomIdInfo& In
        ,FString& OutCustomId
	)
{
    OutCustomId = In.Data.CustomId;
	
}

void UPFServerProxyLibrary::BreakBPServerUserDataPermission(
		const FBPServerUserDataPermission& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerUserDataRecord(
		const FBPServerUserDataRecord& In
        ,FString& OutValue
        ,FDateTime& OutLastUpdated
	)
{
    OutValue = In.Data.Value;
	
	
	
}

void UPFServerProxyLibrary::BreakBPServerUserFacebookInfo(
		const FBPServerUserFacebookInfo& In
        ,FString& OutFacebookId
        ,FString& OutFullName
	)
{
    OutFacebookId = In.Data.FacebookId;
	OutFullName = In.Data.FullName;
	
}

void UPFServerProxyLibrary::BreakBPServerUserGameCenterInfo(
		const FBPServerUserGameCenterInfo& In
        ,FString& OutGameCenterId
	)
{
    OutGameCenterId = In.Data.GameCenterId;
	
}

void UPFServerProxyLibrary::BreakBPServerUserGoogleInfo(
		const FBPServerUserGoogleInfo& In
        ,FString& OutGoogleId
        ,FString& OutGoogleEmail
        ,FString& OutGoogleLocale
        ,FString& OutGoogleGender
	)
{
    OutGoogleId = In.Data.GoogleId;
	OutGoogleEmail = In.Data.GoogleEmail;
	OutGoogleLocale = In.Data.GoogleLocale;
	OutGoogleGender = In.Data.GoogleGender;
	
}

void UPFServerProxyLibrary::BreakBPServerUserIosDeviceInfo(
		const FBPServerUserIosDeviceInfo& In
        ,FString& OutIosDeviceId
	)
{
    OutIosDeviceId = In.Data.IosDeviceId;
	
}

void UPFServerProxyLibrary::BreakBPServerUserKongregateInfo(
		const FBPServerUserKongregateInfo& In
        ,FString& OutKongregateId
        ,FString& OutKongregateName
	)
{
    OutKongregateId = In.Data.KongregateId;
	OutKongregateName = In.Data.KongregateName;
	
}

void UPFServerProxyLibrary::BreakBPServerUserOrigination(
		const FBPServerUserOrigination& In
	)
{
    
}

void UPFServerProxyLibrary::BreakBPServerUserPrivateAccountInfo(
		const FBPServerUserPrivateAccountInfo& In
        ,FString& OutEmail
	)
{
    OutEmail = In.Data.Email;
	
}

void UPFServerProxyLibrary::BreakBPServerUserPsnInfo(
		const FBPServerUserPsnInfo& In
        ,FString& OutPsnAccountId
        ,FString& OutPsnOnlineId
	)
{
    OutPsnAccountId = In.Data.PsnAccountId;
	OutPsnOnlineId = In.Data.PsnOnlineId;
	
}

void UPFServerProxyLibrary::BreakBPServerUserSteamInfo(
		const FBPServerUserSteamInfo& In
        ,FString& OutSteamId
        ,FString& OutSteamCountry
	)
{
    OutSteamId = In.Data.SteamId;
	OutSteamCountry = In.Data.SteamCountry;
	
	
	
}

void UPFServerProxyLibrary::BreakBPServerUserTitleInfo(
		const FBPServerUserTitleInfo& In
        ,FString& OutDisplayName
        ,FDateTime& OutCreated
        ,FDateTime& OutLastLogin
        ,FDateTime& OutFirstLogin
        ,bool& OutisBanned
        ,FString& OutAvatarUrl
	)
{
    OutDisplayName = In.Data.DisplayName;
	
	
	
	
	OutisBanned = In.Data.isBanned;
	OutAvatarUrl = In.Data.AvatarUrl;
	
}

void UPFServerProxyLibrary::BreakBPServerUserTwitchInfo(
		const FBPServerUserTwitchInfo& In
        ,FString& OutTwitchId
        ,FString& OutTwitchUserName
	)
{
    OutTwitchId = In.Data.TwitchId;
	OutTwitchUserName = In.Data.TwitchUserName;
	
}

void UPFServerProxyLibrary::BreakBPServerUserXboxInfo(
		const FBPServerUserXboxInfo& In
        ,FString& OutXboxUserId
	)
{
    OutXboxUserId = In.Data.XboxUserId;
	
}

void UPFServerProxyLibrary::BreakBPServerValueToDateModel(
		const FBPServerValueToDateModel& In
        ,FString& OutCurrency
        ,int32& OutTotalValue
        ,FString& OutTotalValueAsDecimal
	)
{
    OutCurrency = In.Data.Currency;
	OutTotalValue = In.Data.TotalValue;
	OutTotalValueAsDecimal = In.Data.TotalValueAsDecimal;
	
}

void UPFServerProxyLibrary::BreakBPServerVirtualCurrencyBalanceModel(
		const FBPServerVirtualCurrencyBalanceModel& In
        ,FString& OutCurrency
        ,int32& OutTotalValue
	)
{
    OutCurrency = In.Data.Currency;
	OutTotalValue = In.Data.TotalValue;
	
}

void UPFServerProxyLibrary::BreakBPServerVirtualCurrencyRechargeTime(
		const FBPServerVirtualCurrencyRechargeTime& In
        ,int32& OutSecondsToRecharge
        ,FDateTime& OutRechargeTime
        ,int32& OutRechargeMax
	)
{
    OutSecondsToRecharge = In.Data.SecondsToRecharge;
	
	OutRechargeMax = In.Data.RechargeMax;
	
}

void UPFServerProxyLibrary::BreakBPServerWriteEventResponse(
		const FBPServerWriteEventResponse& In
        ,FString& OutEventId
	)
{
    OutEventId = In.Data.EventId;
	
}

void UPFServerProxyLibrary::BreakBPServerWriteServerCharacterEventRequest(
		const FBPServerWriteServerCharacterEventRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutEventName
        ,FDateTime& OutTimestamp
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutEventName = In.Data.EventName;
	
	
	
}

void UPFServerProxyLibrary::BreakBPServerWriteServerPlayerEventRequest(
		const FBPServerWriteServerPlayerEventRequest& In
        ,FString& OutPlayFabId
        ,FString& OutEventName
        ,FDateTime& OutTimestamp
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutEventName = In.Data.EventName;
	
	
	
}

void UPFServerProxyLibrary::BreakBPServerWriteTitleEventRequest(
		const FBPServerWriteTitleEventRequest& In
        ,FString& OutEventName
        ,FDateTime& OutTimestamp
	)
{
    OutEventName = In.Data.EventName;
	
	
	
}

