// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFServerSendPushNotification.h"

UPFServerSendPushNotification::UPFServerSendPushNotification(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabServerAPI::FSendPushNotificationDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFServerSendPushNotification* UPFServerSendPushNotification::SendPushNotification(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InRecipient, const FString& InMessage, const FBPServerPushNotificationPackage& InPackage, const FString& InSubject)
{
	UPFServerSendPushNotification* Proxy = NewObject<UPFServerSendPushNotification>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.Recipient = InRecipient;
	Proxy->Request.Message = InMessage;
	*Proxy->Request.Package = InPackage.Data;
	Proxy->Request.Subject = InSubject;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFServerSendPushNotification::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

	bool CallResult = false;

	if(ServerAPI.IsValid())
	{	
		CallResult = ServerAPI->SendPushNotification(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		OnFailure.Broadcast();
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFServerSendPushNotification::OnSuccessCallback(const PlayFab::ServerModels::FSendPushNotificationResult& Result)
{
	OnSuccess.Broadcast();
}

void UPFServerSendPushNotification::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	OnFailure.Broadcast();	
}
