// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once
#include "OnlineBlueprintCallProxyBase.h"

#include "Core/PlayFabClientAPI.h"
#include "Core/PlayFabClientDataModels.h"
#include "Proxy/PlayFabClientBPDataModels.h"
#include "PFClientCancelTrade.generated.h"

UCLASS()
class PLAYFABPROXY_API UPFClientCancelTrade : public UOnlineBlueprintCallProxyBase
{
	GENERATED_UCLASS_BODY()
public:

	UPROPERTY(BlueprintAssignable)
	FBPClientCancelTradeResponseDelegate OnSuccess;

	UPROPERTY(BlueprintAssignable)
	FBPClientCancelTradeResponseDelegate OnFailure;
	
	// Cancels an open trade (one that has not yet been accepted or cancelled). Note that only the player who created the trade  can cancel it via this API call, to prevent griefing of the trade system (cancelling trades in order to prevent other players from accepting  them, for trades that can be claimed by more than one player).
	UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject"), Category = "PlayFab|Client|Trading")
	static UPFClientCancelTrade* CancelTrade(UObject* WorldContextObject, class APlayerController* PlayerController, const FString& InTradeId);

	// UOnlineBlueprintCallProxyBase interface
	virtual void Activate() override;
	// End of UOnlineBlueprintCallProxyBase interface

private:

	PlayFab::ClientModels::FCancelTradeRequest Request;

	PlayFab::UPlayFabClientAPI::FCancelTradeDelegate	SuccessDelegate;
	PlayFab::FPlayFabErrorDelegate							ErrorDelegate;

	void OnSuccessCallback(const PlayFab::ClientModels::FCancelTradeResponse& Result);
	void OnErrorCallback(const PlayFab::FPlayFabError& Error);
};
