// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFAdminGetUserInventory.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFAdminGetUserInventory::UPFAdminGetUserInventory(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabAdminAPI::FGetUserInventoryDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFAdminGetUserInventory* UPFAdminGetUserInventory::GetUserInventory(class APlayerController* PlayerController, const FBPAdminGetUserInventoryRequest& InGetUserInventoryRequest)
{
    UPFAdminGetUserInventory* Proxy = NewObject<UPFAdminGetUserInventory>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InGetUserInventoryRequest;
    
    return Proxy;
}

void UPFAdminGetUserInventory::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

    bool CallResult = false;

    if (AdminAPI.IsValid())
    {
        CallResult = AdminAPI->GetUserInventory(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFAdminGetUserInventory::OnSuccessCallback(const PlayFab::AdminModels::FGetUserInventoryResult& Result)
{
    FBPAdminGetUserInventoryResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
