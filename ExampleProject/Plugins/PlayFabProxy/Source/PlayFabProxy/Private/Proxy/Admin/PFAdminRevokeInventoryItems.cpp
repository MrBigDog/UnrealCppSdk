// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFAdminRevokeInventoryItems.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFAdminRevokeInventoryItems::UPFAdminRevokeInventoryItems(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabAdminAPI::FRevokeInventoryItemsDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFAdminRevokeInventoryItems* UPFAdminRevokeInventoryItems::RevokeInventoryItems(class APlayerController* PlayerController, const FBPAdminRevokeInventoryItemsRequest& InRevokeInventoryItemsRequest)
{
    UPFAdminRevokeInventoryItems* Proxy = NewObject<UPFAdminRevokeInventoryItems>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InRevokeInventoryItemsRequest;
    
    return Proxy;
}

void UPFAdminRevokeInventoryItems::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

    bool CallResult = false;

    if (AdminAPI.IsValid())
    {
        CallResult = AdminAPI->RevokeInventoryItems(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFAdminRevokeInventoryItems::OnSuccessCallback(const PlayFab::AdminModels::FRevokeInventoryItemsResult& Result)
{
    FBPAdminRevokeInventoryItemsResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
