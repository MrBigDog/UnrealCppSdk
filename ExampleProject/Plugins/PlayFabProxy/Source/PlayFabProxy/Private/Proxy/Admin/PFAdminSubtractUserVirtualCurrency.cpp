// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFAdminSubtractUserVirtualCurrency.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFAdminSubtractUserVirtualCurrency::UPFAdminSubtractUserVirtualCurrency(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabAdminAPI::FSubtractUserVirtualCurrencyDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFAdminSubtractUserVirtualCurrency* UPFAdminSubtractUserVirtualCurrency::SubtractUserVirtualCurrency(class APlayerController* PlayerController, const FBPAdminSubtractUserVirtualCurrencyRequest& InSubtractUserVirtualCurrencyRequest)
{
    UPFAdminSubtractUserVirtualCurrency* Proxy = NewObject<UPFAdminSubtractUserVirtualCurrency>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InSubtractUserVirtualCurrencyRequest;
    
    return Proxy;
}

void UPFAdminSubtractUserVirtualCurrency::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

    bool CallResult = false;

    if(AdminAPI.IsValid())
    {
        CallResult = AdminAPI->SubtractUserVirtualCurrency(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if(CallResult == false)
    {
        OnFailure.Broadcast();
    }
}

void UPFAdminSubtractUserVirtualCurrency::OnSuccessCallback(const PlayFab::AdminModels::FModifyUserVirtualCurrencyResult& Result)
{
    FBPAdminModifyUserVirtualCurrencyResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
