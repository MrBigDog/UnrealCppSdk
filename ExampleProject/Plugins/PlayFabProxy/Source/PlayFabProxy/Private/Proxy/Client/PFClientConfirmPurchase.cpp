// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFClientConfirmPurchase.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFClientConfirmPurchase::UPFClientConfirmPurchase(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabClientAPI::FConfirmPurchaseDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFClientConfirmPurchase* UPFClientConfirmPurchase::ConfirmPurchase(class APlayerController* PlayerController, const FBPClientConfirmPurchaseRequest& InConfirmPurchaseRequest)
{
    UPFClientConfirmPurchase* Proxy = NewObject<UPFClientConfirmPurchase>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InConfirmPurchaseRequest;
    
    return Proxy;
}

void UPFClientConfirmPurchase::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

    bool CallResult = false;

    if(ClientAPI.IsValid())
    {
        CallResult = ClientAPI->ConfirmPurchase(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if(CallResult == false)
    {
        OnFailure.Broadcast();
    }
}

void UPFClientConfirmPurchase::OnSuccessCallback(const PlayFab::ClientModels::FConfirmPurchaseResult& Result)
{
    FBPClientConfirmPurchaseResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
