// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFClientGetTradeStatus.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFClientGetTradeStatus::UPFClientGetTradeStatus(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabClientAPI::FGetTradeStatusDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFClientGetTradeStatus* UPFClientGetTradeStatus::GetTradeStatus(class APlayerController* PlayerController, const FBPClientGetTradeStatusRequest& InGetTradeStatusRequest)
{
    UPFClientGetTradeStatus* Proxy = NewObject<UPFClientGetTradeStatus>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InGetTradeStatusRequest;
    
    return Proxy;
}

void UPFClientGetTradeStatus::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabClientPtr ClientAPI = IPlayFabModuleInterface::Get().GetClientAPI();

    bool CallResult = false;

    if(ClientAPI.IsValid())
    {
        CallResult = ClientAPI->GetTradeStatus(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if(CallResult == false)
    {
        OnFailure.Broadcast();
    }
}

void UPFClientGetTradeStatus::OnSuccessCallback(const PlayFab::ClientModels::FGetTradeStatusResponse& Result)
{
    FBPClientGetTradeStatusResponse BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
