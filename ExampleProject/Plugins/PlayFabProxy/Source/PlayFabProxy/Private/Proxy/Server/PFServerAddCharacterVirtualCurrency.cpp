// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFServerAddCharacterVirtualCurrency.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFServerAddCharacterVirtualCurrency::UPFServerAddCharacterVirtualCurrency(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabServerAPI::FAddCharacterVirtualCurrencyDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFServerAddCharacterVirtualCurrency* UPFServerAddCharacterVirtualCurrency::AddCharacterVirtualCurrency(class APlayerController* PlayerController, const FBPServerAddCharacterVirtualCurrencyRequest& InAddCharacterVirtualCurrencyRequest)
{
    UPFServerAddCharacterVirtualCurrency* Proxy = NewObject<UPFServerAddCharacterVirtualCurrency>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InAddCharacterVirtualCurrencyRequest;
    
    return Proxy;
}

void UPFServerAddCharacterVirtualCurrency::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

    bool CallResult = false;

    if (ServerAPI.IsValid())
    {
        CallResult = ServerAPI->AddCharacterVirtualCurrency(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFServerAddCharacterVirtualCurrency::OnSuccessCallback(const PlayFab::ServerModels::FModifyCharacterVirtualCurrencyResult& Result)
{
    FBPServerModifyCharacterVirtualCurrencyResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
