// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFServerGetCharacterReadOnlyData.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFServerGetCharacterReadOnlyData::UPFServerGetCharacterReadOnlyData(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabServerAPI::FGetCharacterReadOnlyDataDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFServerGetCharacterReadOnlyData* UPFServerGetCharacterReadOnlyData::GetCharacterReadOnlyData(class APlayerController* PlayerController, const FBPServerGetCharacterDataRequest& InGetCharacterDataRequest)
{
    UPFServerGetCharacterReadOnlyData* Proxy = NewObject<UPFServerGetCharacterReadOnlyData>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InGetCharacterDataRequest;
    
    return Proxy;
}

void UPFServerGetCharacterReadOnlyData::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

    bool CallResult = false;

    if (ServerAPI.IsValid())
    {
        CallResult = ServerAPI->GetCharacterReadOnlyData(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFServerGetCharacterReadOnlyData::OnSuccessCallback(const PlayFab::ServerModels::FGetCharacterDataResult& Result)
{
    FBPServerGetCharacterDataResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
