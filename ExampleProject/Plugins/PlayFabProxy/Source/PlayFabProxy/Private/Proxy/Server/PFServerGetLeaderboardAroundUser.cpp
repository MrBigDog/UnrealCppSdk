// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFServerGetLeaderboardAroundUser.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFServerGetLeaderboardAroundUser::UPFServerGetLeaderboardAroundUser(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabServerAPI::FGetLeaderboardAroundUserDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFServerGetLeaderboardAroundUser* UPFServerGetLeaderboardAroundUser::GetLeaderboardAroundUser(class APlayerController* PlayerController, const FBPServerGetLeaderboardAroundUserRequest& InGetLeaderboardAroundUserRequest)
{
    UPFServerGetLeaderboardAroundUser* Proxy = NewObject<UPFServerGetLeaderboardAroundUser>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InGetLeaderboardAroundUserRequest;
    
    return Proxy;
}

void UPFServerGetLeaderboardAroundUser::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

    bool CallResult = false;

    if (ServerAPI.IsValid())
    {
        CallResult = ServerAPI->GetLeaderboardAroundUser(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFServerGetLeaderboardAroundUser::OnSuccessCallback(const PlayFab::ServerModels::FGetLeaderboardAroundUserResult& Result)
{
    FBPServerGetLeaderboardAroundUserResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
