// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFServerGrantCharacterToUser.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFServerGrantCharacterToUser::UPFServerGrantCharacterToUser(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabServerAPI::FGrantCharacterToUserDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFServerGrantCharacterToUser* UPFServerGrantCharacterToUser::GrantCharacterToUser(class APlayerController* PlayerController, const FBPServerGrantCharacterToUserRequest& InGrantCharacterToUserRequest)
{
    UPFServerGrantCharacterToUser* Proxy = NewObject<UPFServerGrantCharacterToUser>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InGrantCharacterToUserRequest;
    
    return Proxy;
}

void UPFServerGrantCharacterToUser::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

    bool CallResult = false;

    if(ServerAPI.IsValid())
    {
        CallResult = ServerAPI->GrantCharacterToUser(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if(CallResult == false)
    {
        OnFailure.Broadcast();
    }
}

void UPFServerGrantCharacterToUser::OnSuccessCallback(const PlayFab::ServerModels::FGrantCharacterToUserResult& Result)
{
    FBPServerGrantCharacterToUserResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
