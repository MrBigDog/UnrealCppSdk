// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "PlayFabProxyBaseModel.h"
#include "Core/PlayFabClientAPI.h"
#include "Core/PlayFabClientDataModels.h"
#include "Proxy/PlayFabClientBPDataModels.h"
#include "PFClientLoginWithWindowsHello.generated.h"

UCLASS(MinimalAPI)
class UPFClientLoginWithWindowsHello : public UPlayFabProxyBase
{
    GENERATED_UCLASS_BODY()
public:

    UPROPERTY(BlueprintAssignable)
        FBPClientLoginResultDelegate OnSuccess;

    // Completes the Windows Hello login flow by returning the signed value of the challange from GetWindowsHelloChallenge. Windows Hello has a 2 step client to server authentication scheme. Step one is to request from the server a challenge string. Step two is to request the user sign the string via Windows Hello and then send the signed value back to the server. 
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true"), Category = "PlayFab|Client|Authentication")
        static UPFClientLoginWithWindowsHello* LoginWithWindowsHello(class APlayerController* PlayerController, const FBPClientLoginWithWindowsHelloRequest& InLoginWithWindowsHelloRequest);

    // UOnlineBlueprintCallProxyBase interface
    virtual void Activate() override;
    // End of UOnlineBlueprintCallProxyBase interface

private:
    FBPClientLoginWithWindowsHelloRequest Request;
    PlayFab::UPlayFabClientAPI::FLoginWithWindowsHelloDelegate SuccessDelegate;

    void OnSuccessCallback(const PlayFab::ClientModels::FLoginResult& Result);
};
