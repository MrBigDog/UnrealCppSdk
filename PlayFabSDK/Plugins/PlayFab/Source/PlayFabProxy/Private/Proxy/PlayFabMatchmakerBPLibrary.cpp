// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFabMatchmakerBPLibrary.h"


void UPFMatchmakerProxyLibrary::BreakBPMatchmakerAuthUserRequest(
		const FBPMatchmakerAuthUserRequest& In
        ,FString& OutAuthorizationTicket
	)
{
    OutAuthorizationTicket = In.Data.AuthorizationTicket;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerAuthUserResponse(
		const FBPMatchmakerAuthUserResponse& In
        ,bool& OutAuthorized
        ,FString& OutPlayFabId
	)
{
    OutAuthorized = In.Data.Authorized;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerDeregisterGameRequest(
		const FBPMatchmakerDeregisterGameRequest& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerDeregisterGameResponse(
		const FBPMatchmakerDeregisterGameResponse& In
	)
{
    
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerItemInstance(
		const FBPMatchmakerItemInstance& In
        ,FString& OutItemId
        ,FString& OutItemInstanceId
        ,FString& OutItemClass
        ,FDateTime& OutPurchaseDate
        ,FDateTime& OutExpiration
        ,int32& OutRemainingUses
        ,int32& OutUsesIncrementedBy
        ,FString& OutAnnotation
        ,FString& OutCatalogVersion
        ,FString& OutBundleParent
        ,FString& OutDisplayName
        ,FString& OutUnitCurrency
        ,int32& OutUnitPrice
        ,TArray<FString>& OutBundleContents
	)
{
    OutItemId = In.Data.ItemId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutItemClass = In.Data.ItemClass;
	
	
	OutRemainingUses = In.Data.RemainingUses;
	OutUsesIncrementedBy = In.Data.UsesIncrementedBy;
	OutAnnotation = In.Data.Annotation;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutBundleParent = In.Data.BundleParent;
	OutDisplayName = In.Data.DisplayName;
	OutUnitCurrency = In.Data.UnitCurrency;
	OutUnitPrice = In.Data.UnitPrice;
	OutBundleContents = In.Data.BundleContents;
	
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerPlayerJoinedRequest(
		const FBPMatchmakerPlayerJoinedRequest& In
        ,FString& OutLobbyId
        ,FString& OutPlayFabId
	)
{
    OutLobbyId = In.Data.LobbyId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerPlayerJoinedResponse(
		const FBPMatchmakerPlayerJoinedResponse& In
	)
{
    
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerPlayerLeftRequest(
		const FBPMatchmakerPlayerLeftRequest& In
        ,FString& OutLobbyId
        ,FString& OutPlayFabId
	)
{
    OutLobbyId = In.Data.LobbyId;
	OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerPlayerLeftResponse(
		const FBPMatchmakerPlayerLeftResponse& In
	)
{
    
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerRegion(
		const FBPMatchmakerRegion& In
	)
{
    
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerRegisterGameRequest(
		const FBPMatchmakerRegisterGameRequest& In
        ,FString& OutLobbyId
        ,FString& OutServerHost
        ,FString& OutServerPort
        ,FString& OutBuild
        ,FString& OutGameMode
	)
{
    OutLobbyId = In.Data.LobbyId;
	OutServerHost = In.Data.ServerHost;
	OutServerPort = In.Data.ServerPort;
	OutBuild = In.Data.Build;
	
	OutGameMode = In.Data.GameMode;
	
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerRegisterGameResponse(
		const FBPMatchmakerRegisterGameResponse& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerStartGameRequest(
		const FBPMatchmakerStartGameRequest& In
        ,FString& OutBuild
        ,FString& OutGameMode
        ,FString& OutCustomCommandLineData
        ,FString& OutExternalMatchmakerEventEndpoint
	)
{
    OutBuild = In.Data.Build;
	
	OutGameMode = In.Data.GameMode;
	OutCustomCommandLineData = In.Data.CustomCommandLineData;
	OutExternalMatchmakerEventEndpoint = In.Data.ExternalMatchmakerEventEndpoint;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerStartGameResponse(
		const FBPMatchmakerStartGameResponse& In
        ,FString& OutGameID
        ,FString& OutServerHostname
        ,int32& OutServerPort
	)
{
    OutGameID = In.Data.GameID;
	OutServerHostname = In.Data.ServerHostname;
	OutServerPort = In.Data.ServerPort;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerUserInfoRequest(
		const FBPMatchmakerUserInfoRequest& In
        ,FString& OutPlayFabId
        ,int32& OutMinCatalogVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutMinCatalogVersion = In.Data.MinCatalogVersion;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerUserInfoResponse(
		const FBPMatchmakerUserInfoResponse& In
        ,FString& OutPlayFabId
        ,FString& OutUsername
        ,FString& OutTitleDisplayName
        ,TArray<FBPMatchmakerItemInstance>& OutInventory
        ,bool& OutIsDeveloper
        ,FString& OutSteamId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutUsername = In.Data.Username;
	OutTitleDisplayName = In.Data.TitleDisplayName;
	for (const PlayFab::MatchmakerModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPMatchmakerItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
	
	OutIsDeveloper = In.Data.IsDeveloper;
	OutSteamId = In.Data.SteamId;
	
}

void UPFMatchmakerProxyLibrary::BreakBPMatchmakerVirtualCurrencyRechargeTime(
		const FBPMatchmakerVirtualCurrencyRechargeTime& In
        ,int32& OutSecondsToRecharge
        ,FDateTime& OutRechargeTime
        ,int32& OutRechargeMax
	)
{
    OutSecondsToRecharge = In.Data.SecondsToRecharge;
	
	OutRechargeMax = In.Data.RechargeMax;
	
}

