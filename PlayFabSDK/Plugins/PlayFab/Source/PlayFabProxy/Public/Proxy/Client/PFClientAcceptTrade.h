// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once
#include "OnlineBlueprintCallProxyBase.h"

#include "Core/PlayFabClientAPI.h"
#include "Core/PlayFabClientDataModels.h"
#include "Proxy/PlayFabClientBPDataModels.h"
#include "PFClientAcceptTrade.generated.h"

UCLASS()
class PLAYFABPROXY_API UPFClientAcceptTrade : public UOnlineBlueprintCallProxyBase
{
	GENERATED_UCLASS_BODY()
public:

	UPROPERTY(BlueprintAssignable)
	FBPClientAcceptTradeResponseDelegate OnSuccess;

	UPROPERTY(BlueprintAssignable)
	FBPClientAcceptTradeResponseDelegate OnFailure;
	
	// Accepts an open trade (one that has not yet been accepted or cancelled), if the locally signed-in player is in the  allowed player list for the trade, or it is open to all players. If the call is successful, the offered and accepted items will be swapped  between the two players' inventories.
	UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject"), Category = "PlayFab|Client|Trading")
	static UPFClientAcceptTrade* AcceptTrade(UObject* WorldContextObject, class APlayerController* PlayerController, const FString& InOfferingPlayerId, const FString& InTradeId, const TArray<FString>& InAcceptedInventoryInstanceIds);

	// UOnlineBlueprintCallProxyBase interface
	virtual void Activate() override;
	// End of UOnlineBlueprintCallProxyBase interface

private:

	PlayFab::ClientModels::FAcceptTradeRequest Request;

	PlayFab::UPlayFabClientAPI::FAcceptTradeDelegate	SuccessDelegate;
	PlayFab::FPlayFabErrorDelegate							ErrorDelegate;

	void OnSuccessCallback(const PlayFab::ClientModels::FAcceptTradeResponse& Result);
	void OnErrorCallback(const PlayFab::FPlayFabError& Error);
};
