// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFAdminGetCatalogItems.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFAdminGetCatalogItems::UPFAdminGetCatalogItems(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabAdminAPI::FGetCatalogItemsDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFAdminGetCatalogItems* UPFAdminGetCatalogItems::GetCatalogItems(class APlayerController* PlayerController, const FBPAdminGetCatalogItemsRequest& InGetCatalogItemsRequest)
{
    UPFAdminGetCatalogItems* Proxy = NewObject<UPFAdminGetCatalogItems>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InGetCatalogItemsRequest;
    
    return Proxy;
}

void UPFAdminGetCatalogItems::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

    bool CallResult = false;

    if(AdminAPI.IsValid())
    {
        CallResult = AdminAPI->GetCatalogItems(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if(CallResult == false)
    {
        OnFailure.Broadcast();
    }
}

void UPFAdminGetCatalogItems::OnSuccessCallback(const PlayFab::AdminModels::FGetCatalogItemsResult& Result)
{
    FBPAdminGetCatalogItemsResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
