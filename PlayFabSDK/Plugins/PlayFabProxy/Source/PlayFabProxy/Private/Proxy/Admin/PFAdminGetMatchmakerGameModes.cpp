// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFAdminGetMatchmakerGameModes.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFAdminGetMatchmakerGameModes::UPFAdminGetMatchmakerGameModes(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabAdminAPI::FGetMatchmakerGameModesDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFAdminGetMatchmakerGameModes* UPFAdminGetMatchmakerGameModes::GetMatchmakerGameModes(class APlayerController* PlayerController, const FBPAdminGetMatchmakerGameModesRequest& InGetMatchmakerGameModesRequest)
{
    UPFAdminGetMatchmakerGameModes* Proxy = NewObject<UPFAdminGetMatchmakerGameModes>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InGetMatchmakerGameModesRequest;
    
    return Proxy;
}

void UPFAdminGetMatchmakerGameModes::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

    bool CallResult = false;

    if (AdminAPI.IsValid())
    {
        CallResult = AdminAPI->GetMatchmakerGameModes(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFAdminGetMatchmakerGameModes::OnSuccessCallback(const PlayFab::AdminModels::FGetMatchmakerGameModesResult& Result)
{
    FBPAdminGetMatchmakerGameModesResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
