// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFEntityInitiateFileUploads.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFEntityInitiateFileUploads::UPFEntityInitiateFileUploads(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabEntityAPI::FInitiateFileUploadsDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFEntityInitiateFileUploads* UPFEntityInitiateFileUploads::InitiateFileUploads(class APlayerController* PlayerController, const FBPEntityInitiateFileUploadsRequest& InInitiateFileUploadsRequest)
{
    UPFEntityInitiateFileUploads* Proxy = NewObject<UPFEntityInitiateFileUploads>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InInitiateFileUploadsRequest;
    
    return Proxy;
}

void UPFEntityInitiateFileUploads::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabEntityPtr EntityAPI = IPlayFabModuleInterface::Get().GetEntityAPI();

    bool CallResult = false;

    if (EntityAPI.IsValid())
    {
        CallResult = EntityAPI->InitiateFileUploads(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFEntityInitiateFileUploads::OnSuccessCallback(const PlayFab::EntityModels::FInitiateFileUploadsResponse& Result)
{
    FBPEntityInitiateFileUploadsResponse BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
