// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFEntityListGroupApplications.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFEntityListGroupApplications::UPFEntityListGroupApplications(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabEntityAPI::FListGroupApplicationsDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFEntityListGroupApplications* UPFEntityListGroupApplications::ListGroupApplications(class APlayerController* PlayerController, const FBPEntityListGroupApplicationsRequest& InListGroupApplicationsRequest)
{
    UPFEntityListGroupApplications* Proxy = NewObject<UPFEntityListGroupApplications>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InListGroupApplicationsRequest;
    
    return Proxy;
}

void UPFEntityListGroupApplications::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabEntityPtr EntityAPI = IPlayFabModuleInterface::Get().GetEntityAPI();

    bool CallResult = false;

    if (EntityAPI.IsValid())
    {
        CallResult = EntityAPI->ListGroupApplications(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFEntityListGroupApplications::OnSuccessCallback(const PlayFab::EntityModels::FListGroupApplicationsResponse& Result)
{
    FBPEntityListGroupApplicationsResponse BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
