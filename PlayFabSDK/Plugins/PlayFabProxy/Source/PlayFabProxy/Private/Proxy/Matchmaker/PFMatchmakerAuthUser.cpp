// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFMatchmakerAuthUser.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFMatchmakerAuthUser::UPFMatchmakerAuthUser(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabMatchmakerAPI::FAuthUserDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFMatchmakerAuthUser* UPFMatchmakerAuthUser::AuthUser(class APlayerController* PlayerController, const FBPMatchmakerAuthUserRequest& InAuthUserRequest)
{
    UPFMatchmakerAuthUser* Proxy = NewObject<UPFMatchmakerAuthUser>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InAuthUserRequest;
    
    return Proxy;
}

void UPFMatchmakerAuthUser::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabMatchmakerPtr MatchmakerAPI = IPlayFabModuleInterface::Get().GetMatchmakerAPI();

    bool CallResult = false;

    if(MatchmakerAPI.IsValid())
    {
        CallResult = MatchmakerAPI->AuthUser(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if(CallResult == false)
    {
        OnFailure.Broadcast();
    }
}

void UPFMatchmakerAuthUser::OnSuccessCallback(const PlayFab::MatchmakerModels::FAuthUserResponse& Result)
{
    FBPMatchmakerAuthUserResponse BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
