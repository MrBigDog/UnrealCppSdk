// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFMatchmakerPlayerLeft.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFMatchmakerPlayerLeft::UPFMatchmakerPlayerLeft(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabMatchmakerAPI::FPlayerLeftDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFMatchmakerPlayerLeft* UPFMatchmakerPlayerLeft::PlayerLeft(class APlayerController* PlayerController, const FBPMatchmakerPlayerLeftRequest& InPlayerLeftRequest)
{
    UPFMatchmakerPlayerLeft* Proxy = NewObject<UPFMatchmakerPlayerLeft>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InPlayerLeftRequest;
    
    return Proxy;
}

void UPFMatchmakerPlayerLeft::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabMatchmakerPtr MatchmakerAPI = IPlayFabModuleInterface::Get().GetMatchmakerAPI();

    bool CallResult = false;

    if (MatchmakerAPI.IsValid())
    {
        CallResult = MatchmakerAPI->PlayerLeft(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if (CallResult == false)
        OnFailure.Broadcast();
}

void UPFMatchmakerPlayerLeft::OnSuccessCallback(const PlayFab::MatchmakerModels::FPlayerLeftResponse& Result)
{
    OnSuccess.Broadcast();
}
