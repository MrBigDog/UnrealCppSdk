// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PlayFabEntityBPLibrary.h"
#include "Core/PlayFabBaseModel.h"
#include "PlayFabJsonValue.h"


// AbortFileUploadsRequest
FBPEntityAbortFileUploadsRequest UPFEntityProxyLibrary::MakeBPEntityAbortFileUploadsRequest(
    FBPEntityEntityKey InEntity
    , TArray<FString> InFileNames
    , int32 InProfileVersion
)
{
    FBPEntityAbortFileUploadsRequest Out = FBPEntityAbortFileUploadsRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.FileNames = InFileNames;
    Out.Data.ProfileVersion = InProfileVersion;

    return Out;
}

// AbortFileUploadsResponse
void UPFEntityProxyLibrary::BreakBPEntityAbortFileUploadsResponse(
    const FBPEntityAbortFileUploadsResponse& In
    , FBPEntityEntityKey& OutEntity
    , int32& OutProfileVersion
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    OutProfileVersion = In.Data.ProfileVersion;

}

// AcceptGroupApplicationRequest
FBPEntityAcceptGroupApplicationRequest UPFEntityProxyLibrary::MakeBPEntityAcceptGroupApplicationRequest(
    FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityAcceptGroupApplicationRequest Out = FBPEntityAcceptGroupApplicationRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.Group = InGroup.Data;

    return Out;
}

// AcceptGroupInvitationRequest
FBPEntityAcceptGroupInvitationRequest UPFEntityProxyLibrary::MakeBPEntityAcceptGroupInvitationRequest(
    FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityAcceptGroupInvitationRequest Out = FBPEntityAcceptGroupInvitationRequest();
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityKey(InEntity.Data));
    Out.Data.Group = InGroup.Data;

    return Out;
}

// AddMembersRequest
FBPEntityAddMembersRequest UPFEntityProxyLibrary::MakeBPEntityAddMembersRequest(
    FBPEntityEntityKey InGroup
    , TArray<FBPEntityEntityKey> InMembers
    , FString InRoleId
)
{
    FBPEntityAddMembersRequest Out = FBPEntityAddMembersRequest();
    Out.Data.Group = InGroup.Data;
    for (const FBPEntityEntityKey& elem : InMembers)
    {
        Out.Data.Members.Add(elem.Data);
    }
    Out.Data.RoleId = InRoleId;

    return Out;
}

// ApplyToGroupRequest
FBPEntityApplyToGroupRequest UPFEntityProxyLibrary::MakeBPEntityApplyToGroupRequest(
    bool InAutoAcceptOutstandingInvite
    , FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityApplyToGroupRequest Out = FBPEntityApplyToGroupRequest();
    Out.Data.AutoAcceptOutstandingInvite = InAutoAcceptOutstandingInvite;
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityKey(InEntity.Data));
    Out.Data.Group = InGroup.Data;

    return Out;
}

// ApplyToGroupResponse
void UPFEntityProxyLibrary::BreakBPEntityApplyToGroupResponse(
    const FBPEntityApplyToGroupResponse& In
    , FBPEntityEntityWithLineage& OutEntity
    , FDateTime& OutExpires
    , FBPEntityEntityKey& OutGroup
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    OutExpires = In.Data.Expires;
    if (In.Data.Group.IsValid()) { OutGroup.Data = *In.Data.Group; }

}

// BlockEntityRequest
FBPEntityBlockEntityRequest UPFEntityProxyLibrary::MakeBPEntityBlockEntityRequest(
    FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityBlockEntityRequest Out = FBPEntityBlockEntityRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.Group = InGroup.Data;

    return Out;
}

// ChangeMemberRoleRequest
FBPEntityChangeMemberRoleRequest UPFEntityProxyLibrary::MakeBPEntityChangeMemberRoleRequest(
    FString InDestinationRoleId
    , FBPEntityEntityKey InGroup
    , TArray<FBPEntityEntityKey> InMembers
    , FString InOriginRoleId
)
{
    FBPEntityChangeMemberRoleRequest Out = FBPEntityChangeMemberRoleRequest();
    Out.Data.DestinationRoleId = InDestinationRoleId;
    Out.Data.Group = InGroup.Data;
    for (const FBPEntityEntityKey& elem : InMembers)
    {
        Out.Data.Members.Add(elem.Data);
    }
    Out.Data.OriginRoleId = InOriginRoleId;

    return Out;
}

// CreateGroupRequest
FBPEntityCreateGroupRequest UPFEntityProxyLibrary::MakeBPEntityCreateGroupRequest(
    FBPEntityEntityKey InEntity
    , FString InGroupName
)
{
    FBPEntityCreateGroupRequest Out = FBPEntityCreateGroupRequest();
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityKey(InEntity.Data));
    Out.Data.GroupName = InGroupName;

    return Out;
}

// CreateGroupResponse
void UPFEntityProxyLibrary::BreakBPEntityCreateGroupResponse(
    const FBPEntityCreateGroupResponse& In
    , FString& OutAdminRoleId
    , FDateTime& OutCreated
    , FBPEntityEntityKey& OutGroup
    , FString& OutGroupName
    , FString& OutMemberRoleId
    , int32& OutProfileVersion
    , TMap<FString, FString>& OutRoles
)
{
    OutAdminRoleId = In.Data.AdminRoleId;
    OutCreated = In.Data.Created;
    OutGroup.Data = In.Data.Group;
    OutGroupName = In.Data.GroupName;
    OutMemberRoleId = In.Data.MemberRoleId;
    OutProfileVersion = In.Data.ProfileVersion;
    OutRoles = In.Data.Roles;

}

// CreateGroupRoleRequest
FBPEntityCreateGroupRoleRequest UPFEntityProxyLibrary::MakeBPEntityCreateGroupRoleRequest(
    FBPEntityEntityKey InGroup
    , FString InRoleId
    , FString InRoleName
)
{
    FBPEntityCreateGroupRoleRequest Out = FBPEntityCreateGroupRoleRequest();
    Out.Data.Group = InGroup.Data;
    Out.Data.RoleId = InRoleId;
    Out.Data.RoleName = InRoleName;

    return Out;
}

// CreateGroupRoleResponse
void UPFEntityProxyLibrary::BreakBPEntityCreateGroupRoleResponse(
    const FBPEntityCreateGroupRoleResponse& In
    , int32& OutProfileVersion
    , FString& OutRoleId
    , FString& OutRoleName
)
{
    OutProfileVersion = In.Data.ProfileVersion;
    OutRoleId = In.Data.RoleId;
    OutRoleName = In.Data.RoleName;

}

// DeleteFilesRequest
FBPEntityDeleteFilesRequest UPFEntityProxyLibrary::MakeBPEntityDeleteFilesRequest(
    FBPEntityEntityKey InEntity
    , TArray<FString> InFileNames
    , int32 InProfileVersion
)
{
    FBPEntityDeleteFilesRequest Out = FBPEntityDeleteFilesRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.FileNames = InFileNames;
    Out.Data.ProfileVersion = InProfileVersion;

    return Out;
}

// DeleteFilesResponse
void UPFEntityProxyLibrary::BreakBPEntityDeleteFilesResponse(
    const FBPEntityDeleteFilesResponse& In
    , FBPEntityEntityKey& OutEntity
    , int32& OutProfileVersion
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    OutProfileVersion = In.Data.ProfileVersion;

}

// DeleteGroupRequest
FBPEntityDeleteGroupRequest UPFEntityProxyLibrary::MakeBPEntityDeleteGroupRequest(
    FBPEntityEntityKey InGroup
)
{
    FBPEntityDeleteGroupRequest Out = FBPEntityDeleteGroupRequest();
    Out.Data.Group = InGroup.Data;

    return Out;
}

// DeleteRoleRequest
FBPEntityDeleteRoleRequest UPFEntityProxyLibrary::MakeBPEntityDeleteRoleRequest(
    FBPEntityEntityKey InGroup
    , FString InRoleId
)
{
    FBPEntityDeleteRoleRequest Out = FBPEntityDeleteRoleRequest();
    Out.Data.Group = InGroup.Data;
    Out.Data.RoleId = InRoleId;

    return Out;
}

// EmptyResult
void UPFEntityProxyLibrary::BreakBPEntityEmptyResult(
    const FBPEntityEmptyResult& In
)
{

}

// EntityDataObject
FBPEntityEntityDataObject UPFEntityProxyLibrary::MakeBPEntityEntityDataObject(
    UPlayFabJsonValue* InDataObject
    , FString InEscapedDataObject
    , FString InObjectName
)
{
    FBPEntityEntityDataObject Out = FBPEntityEntityDataObject();
    Out.Data.DataObject = InDataObject->GetRootValue();
    Out.Data.EscapedDataObject = InEscapedDataObject;
    Out.Data.ObjectName = InObjectName;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityEntityDataObject(
    const FBPEntityEntityDataObject& In
    , UPlayFabJsonValue*& OutDataObject
    , FString& OutEscapedDataObject
    , FString& OutObjectName
)
{
    UPlayFabJsonValue* DataObjectVal = NewObject<UPlayFabJsonValue>();
    DataObjectVal->SetRootValue(In.Data.DataObject.GetJsonValue());
    OutDataObject = DataObjectVal;
    OutEscapedDataObject = In.Data.EscapedDataObject;
    OutObjectName = In.Data.ObjectName;

}

// EntityKey
FBPEntityEntityKey UPFEntityProxyLibrary::MakeBPEntityEntityKey(
    FString InId
    , EBPEntityEntityTypes InType
    , FString InTypeString
)
{
    FBPEntityEntityKey Out = FBPEntityEntityKey();
    Out.Data.Id = InId;
    Out.Data.Type = static_cast<PlayFab::EntityModels::EntityTypes>(static_cast<uint8>(InType));
    Out.Data.TypeString = InTypeString;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityEntityKey(
    const FBPEntityEntityKey& In
    , FString& OutId
    , EBPEntityEntityTypes& OutType
    , FString& OutTypeString
)
{
    OutId = In.Data.Id;
    if (In.Data.Type.notNull()) { OutType = static_cast<EBPEntityEntityTypes>(static_cast<uint8>(In.Data.Type.mValue)); }
    OutTypeString = In.Data.TypeString;

}

// EntityMemberRole
FBPEntityEntityMemberRole UPFEntityProxyLibrary::MakeBPEntityEntityMemberRole(
    TArray<FBPEntityEntityWithLineage> InMembers
    , FString InRoleId
    , FString InRoleName
)
{
    FBPEntityEntityMemberRole Out = FBPEntityEntityMemberRole();
    for (const FBPEntityEntityWithLineage& elem : InMembers)
    {
        Out.Data.Members.Add(elem.Data);
    }
    Out.Data.RoleId = InRoleId;
    Out.Data.RoleName = InRoleName;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityEntityMemberRole(
    const FBPEntityEntityMemberRole& In
    , TArray<FBPEntityEntityWithLineage>& OutMembers
    , FString& OutRoleId
    , FString& OutRoleName
)
{
    for (const PlayFab::EntityModels::FEntityWithLineage& elem : In.Data.Members)
    {
        OutMembers.Add(FBPEntityEntityWithLineage(elem));
    }
    OutRoleId = In.Data.RoleId;
    OutRoleName = In.Data.RoleName;

}

// EntityPermissionStatement
FBPEntityEntityPermissionStatement UPFEntityProxyLibrary::MakeBPEntityEntityPermissionStatement(
    FString InAction
    , FString InComment
    , UPlayFabJsonValue* InCondition
    , EBPEntityEffectType InEffect
    , UPlayFabJsonValue* InPrincipal
    , FString InResource
)
{
    FBPEntityEntityPermissionStatement Out = FBPEntityEntityPermissionStatement();
    Out.Data.Action = InAction;
    Out.Data.Comment = InComment;
    Out.Data.Condition = InCondition->GetRootValue();
    Out.Data.Effect = static_cast<PlayFab::EntityModels::EffectType>(static_cast<uint8>(InEffect));
    Out.Data.Principal = InPrincipal->GetRootValue();
    Out.Data.Resource = InResource;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityEntityPermissionStatement(
    const FBPEntityEntityPermissionStatement& In
    , FString& OutAction
    , FString& OutComment
    , UPlayFabJsonValue*& OutCondition
    , EBPEntityEffectType& OutEffect
    , UPlayFabJsonValue*& OutPrincipal
    , FString& OutResource
)
{
    OutAction = In.Data.Action;
    OutComment = In.Data.Comment;
    UPlayFabJsonValue* ConditionVal = NewObject<UPlayFabJsonValue>();
    ConditionVal->SetRootValue(In.Data.Condition.GetJsonValue());
    OutCondition = ConditionVal;
    OutEffect = static_cast<EBPEntityEffectType>(static_cast<uint8>(In.Data.Effect));
    UPlayFabJsonValue* PrincipalVal = NewObject<UPlayFabJsonValue>();
    PrincipalVal->SetRootValue(In.Data.Principal.GetJsonValue());
    OutPrincipal = PrincipalVal;
    OutResource = In.Data.Resource;

}

// EntityProfileBody
FBPEntityEntityProfileBody UPFEntityProxyLibrary::MakeBPEntityEntityProfileBody(
    FBPEntityEntityKey InEntity
    , FString InEntityChain
    , TMap<FString, FBPEntityEntityProfileFileMetadata> InFiles
    , TMap<FString, FBPEntityEntityDataObject> InObjects
    , TArray<FBPEntityEntityPermissionStatement> InPermissions
    , int32 InVersionNumber
)
{
    FBPEntityEntityProfileBody Out = FBPEntityEntityProfileBody();
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityKey(InEntity.Data));
    Out.Data.EntityChain = InEntityChain;
    for (auto& elem : InFiles)
    {
        const FBPEntityEntityProfileFileMetadata value = elem.Value;
        Out.Data.Files.Add(elem.Key, value.Data);
    }
    for (auto& elem : InObjects)
    {
        const FBPEntityEntityDataObject value = elem.Value;
        Out.Data.Objects.Add(elem.Key, value.Data);
    }
    for (const FBPEntityEntityPermissionStatement& elem : InPermissions)
    {
        Out.Data.Permissions.Add(elem.Data);
    }
    Out.Data.VersionNumber = InVersionNumber;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityEntityProfileBody(
    const FBPEntityEntityProfileBody& In
    , FBPEntityEntityKey& OutEntity
    , FString& OutEntityChain
    , TMap<FString, FBPEntityEntityProfileFileMetadata>& OutFiles
    , TMap<FString, FBPEntityEntityDataObject>& OutObjects
    , TArray<FBPEntityEntityPermissionStatement>& OutPermissions
    , int32& OutVersionNumber
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    OutEntityChain = In.Data.EntityChain;
    for (auto& elem : In.Data.Files)
    {
        const PlayFab::EntityModels::FEntityProfileFileMetadata value = elem.Value;
        OutFiles.Add(elem.Key, FBPEntityEntityProfileFileMetadata(value));
    }
    for (auto& elem : In.Data.Objects)
    {
        const PlayFab::EntityModels::FEntityDataObject value = elem.Value;
        OutObjects.Add(elem.Key, FBPEntityEntityDataObject(value));
    }
    for (const PlayFab::EntityModels::FEntityPermissionStatement& elem : In.Data.Permissions)
    {
        OutPermissions.Add(FBPEntityEntityPermissionStatement(elem));
    }
    OutVersionNumber = In.Data.VersionNumber;

}

// EntityProfileFileMetadata
FBPEntityEntityProfileFileMetadata UPFEntityProxyLibrary::MakeBPEntityEntityProfileFileMetadata(
    FString InChecksum
    , FString InFileName
    , FDateTime InLastModified
    , int32 InSize
)
{
    FBPEntityEntityProfileFileMetadata Out = FBPEntityEntityProfileFileMetadata();
    Out.Data.Checksum = InChecksum;
    Out.Data.FileName = InFileName;
    Out.Data.LastModified = InLastModified;
    Out.Data.Size = InSize;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityEntityProfileFileMetadata(
    const FBPEntityEntityProfileFileMetadata& In
    , FString& OutChecksum
    , FString& OutFileName
    , FDateTime& OutLastModified
    , int32& OutSize
)
{
    OutChecksum = In.Data.Checksum;
    OutFileName = In.Data.FileName;
    OutLastModified = In.Data.LastModified;
    OutSize = In.Data.Size;

}

// EntityWithLineage
FBPEntityEntityWithLineage UPFEntityProxyLibrary::MakeBPEntityEntityWithLineage(
    FBPEntityEntityKey InKey
    , TMap<FString, FBPEntityEntityKey> InLineage
)
{
    FBPEntityEntityWithLineage Out = FBPEntityEntityWithLineage();
    Out.Data.Key = MakeShareable(new PlayFab::EntityModels::FEntityKey(InKey.Data));
    for (auto& elem : InLineage)
    {
        const FBPEntityEntityKey value = elem.Value;
        Out.Data.Lineage.Add(elem.Key, value.Data);
    }

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityEntityWithLineage(
    const FBPEntityEntityWithLineage& In
    , FBPEntityEntityKey& OutKey
    , TMap<FString, FBPEntityEntityKey>& OutLineage
)
{
    if (In.Data.Key.IsValid()) { OutKey.Data = *In.Data.Key; }
    for (auto& elem : In.Data.Lineage)
    {
        const PlayFab::EntityModels::FEntityKey value = elem.Value;
        OutLineage.Add(elem.Key, FBPEntityEntityKey(value));
    }

}

// FinalizeFileUploadsRequest
FBPEntityFinalizeFileUploadsRequest UPFEntityProxyLibrary::MakeBPEntityFinalizeFileUploadsRequest(
    FBPEntityEntityKey InEntity
    , TArray<FString> InFileNames
)
{
    FBPEntityFinalizeFileUploadsRequest Out = FBPEntityFinalizeFileUploadsRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.FileNames = InFileNames;

    return Out;
}

// FinalizeFileUploadsResponse
void UPFEntityProxyLibrary::BreakBPEntityFinalizeFileUploadsResponse(
    const FBPEntityFinalizeFileUploadsResponse& In
    , FBPEntityEntityKey& OutEntity
    , TMap<FString, FBPEntityGetFileMetadata>& OutMetadata
    , int32& OutProfileVersion
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    for (auto& elem : In.Data.Metadata)
    {
        const PlayFab::EntityModels::FGetFileMetadata value = elem.Value;
        OutMetadata.Add(elem.Key, FBPEntityGetFileMetadata(value));
    }
    OutProfileVersion = In.Data.ProfileVersion;

}

// GetEntityProfileRequest
FBPEntityGetEntityProfileRequest UPFEntityProxyLibrary::MakeBPEntityGetEntityProfileRequest(
    bool InDataAsObject
    , FBPEntityEntityKey InEntity
)
{
    FBPEntityGetEntityProfileRequest Out = FBPEntityGetEntityProfileRequest();
    Out.Data.DataAsObject = InDataAsObject;
    Out.Data.Entity = InEntity.Data;

    return Out;
}

// GetEntityProfileResponse
void UPFEntityProxyLibrary::BreakBPEntityGetEntityProfileResponse(
    const FBPEntityGetEntityProfileResponse& In
    , FBPEntityEntityProfileBody& OutProfile
)
{
    if (In.Data.Profile.IsValid()) { OutProfile.Data = *In.Data.Profile; }

}

// GetEntityProfilesRequest
FBPEntityGetEntityProfilesRequest UPFEntityProxyLibrary::MakeBPEntityGetEntityProfilesRequest(
    bool InDataAsObject
    , TArray<FBPEntityEntityKey> InEntities
)
{
    FBPEntityGetEntityProfilesRequest Out = FBPEntityGetEntityProfilesRequest();
    Out.Data.DataAsObject = InDataAsObject;
    for (const FBPEntityEntityKey& elem : InEntities)
    {
        Out.Data.Entities.Add(elem.Data);
    }

    return Out;
}

// GetEntityProfilesResponse
void UPFEntityProxyLibrary::BreakBPEntityGetEntityProfilesResponse(
    const FBPEntityGetEntityProfilesResponse& In
    , TArray<FBPEntityEntityProfileBody>& OutProfiles
)
{
    for (const PlayFab::EntityModels::FEntityProfileBody& elem : In.Data.Profiles)
    {
        OutProfiles.Add(FBPEntityEntityProfileBody(elem));
    }

}

// GetEntityTokenRequest
FBPEntityGetEntityTokenRequest UPFEntityProxyLibrary::MakeBPEntityGetEntityTokenRequest(
    FBPEntityEntityKey InEntity
)
{
    FBPEntityGetEntityTokenRequest Out = FBPEntityGetEntityTokenRequest();
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityKey(InEntity.Data));

    return Out;
}

// GetEntityTokenResponse
void UPFEntityProxyLibrary::BreakBPEntityGetEntityTokenResponse(
    const FBPEntityGetEntityTokenResponse& In
    , FBPEntityEntityKey& OutEntity
    , FString& OutEntityToken
    , FDateTime& OutTokenExpiration
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    OutEntityToken = In.Data.EntityToken;
    OutTokenExpiration = In.Data.TokenExpiration;

}

// GetFileMetadata
FBPEntityGetFileMetadata UPFEntityProxyLibrary::MakeBPEntityGetFileMetadata(
    FString InChecksum
    , FString InDownloadUrl
    , FString InFileName
    , FDateTime InLastModified
    , int32 InSize
)
{
    FBPEntityGetFileMetadata Out = FBPEntityGetFileMetadata();
    Out.Data.Checksum = InChecksum;
    Out.Data.DownloadUrl = InDownloadUrl;
    Out.Data.FileName = InFileName;
    Out.Data.LastModified = InLastModified;
    Out.Data.Size = InSize;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityGetFileMetadata(
    const FBPEntityGetFileMetadata& In
    , FString& OutChecksum
    , FString& OutDownloadUrl
    , FString& OutFileName
    , FDateTime& OutLastModified
    , int32& OutSize
)
{
    OutChecksum = In.Data.Checksum;
    OutDownloadUrl = In.Data.DownloadUrl;
    OutFileName = In.Data.FileName;
    OutLastModified = In.Data.LastModified;
    OutSize = In.Data.Size;

}

// GetFilesRequest
FBPEntityGetFilesRequest UPFEntityProxyLibrary::MakeBPEntityGetFilesRequest(
    FBPEntityEntityKey InEntity
)
{
    FBPEntityGetFilesRequest Out = FBPEntityGetFilesRequest();
    Out.Data.Entity = InEntity.Data;

    return Out;
}

// GetFilesResponse
void UPFEntityProxyLibrary::BreakBPEntityGetFilesResponse(
    const FBPEntityGetFilesResponse& In
    , FBPEntityEntityKey& OutEntity
    , TMap<FString, FBPEntityGetFileMetadata>& OutMetadata
    , int32& OutProfileVersion
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    for (auto& elem : In.Data.Metadata)
    {
        const PlayFab::EntityModels::FGetFileMetadata value = elem.Value;
        OutMetadata.Add(elem.Key, FBPEntityGetFileMetadata(value));
    }
    OutProfileVersion = In.Data.ProfileVersion;

}

// GetGlobalPolicyRequest
FBPEntityGetGlobalPolicyRequest UPFEntityProxyLibrary::MakeBPEntityGetGlobalPolicyRequest(
)
{
    FBPEntityGetGlobalPolicyRequest Out = FBPEntityGetGlobalPolicyRequest();

    return Out;
}

// GetGlobalPolicyResponse
void UPFEntityProxyLibrary::BreakBPEntityGetGlobalPolicyResponse(
    const FBPEntityGetGlobalPolicyResponse& In
    , TArray<FBPEntityEntityPermissionStatement>& OutPermissions
)
{
    for (const PlayFab::EntityModels::FEntityPermissionStatement& elem : In.Data.Permissions)
    {
        OutPermissions.Add(FBPEntityEntityPermissionStatement(elem));
    }

}

// GetGroupRequest
FBPEntityGetGroupRequest UPFEntityProxyLibrary::MakeBPEntityGetGroupRequest(
    FBPEntityEntityKey InGroup
    , FString InGroupName
)
{
    FBPEntityGetGroupRequest Out = FBPEntityGetGroupRequest();
    Out.Data.Group = MakeShareable(new PlayFab::EntityModels::FEntityKey(InGroup.Data));
    Out.Data.GroupName = InGroupName;

    return Out;
}

// GetGroupResponse
void UPFEntityProxyLibrary::BreakBPEntityGetGroupResponse(
    const FBPEntityGetGroupResponse& In
    , FString& OutAdminRoleId
    , FDateTime& OutCreated
    , FBPEntityEntityKey& OutGroup
    , FString& OutGroupName
    , FString& OutMemberRoleId
    , int32& OutProfileVersion
    , TMap<FString, FString>& OutRoles
)
{
    OutAdminRoleId = In.Data.AdminRoleId;
    OutCreated = In.Data.Created;
    OutGroup.Data = In.Data.Group;
    OutGroupName = In.Data.GroupName;
    OutMemberRoleId = In.Data.MemberRoleId;
    OutProfileVersion = In.Data.ProfileVersion;
    OutRoles = In.Data.Roles;

}

// GetObjectsRequest
FBPEntityGetObjectsRequest UPFEntityProxyLibrary::MakeBPEntityGetObjectsRequest(
    FBPEntityEntityKey InEntity
    , bool InEscapeObject
)
{
    FBPEntityGetObjectsRequest Out = FBPEntityGetObjectsRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.EscapeObject = InEscapeObject;

    return Out;
}

// GetObjectsResponse
void UPFEntityProxyLibrary::BreakBPEntityGetObjectsResponse(
    const FBPEntityGetObjectsResponse& In
    , FBPEntityEntityKey& OutEntity
    , TMap<FString, FBPEntityObjectResult>& OutObjects
    , int32& OutProfileVersion
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    for (auto& elem : In.Data.Objects)
    {
        const PlayFab::EntityModels::FObjectResult value = elem.Value;
        OutObjects.Add(elem.Key, FBPEntityObjectResult(value));
    }
    OutProfileVersion = In.Data.ProfileVersion;

}

// GroupApplication
FBPEntityGroupApplication UPFEntityProxyLibrary::MakeBPEntityGroupApplication(
    FBPEntityEntityWithLineage InEntity
    , FDateTime InExpires
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityGroupApplication Out = FBPEntityGroupApplication();
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityWithLineage(InEntity.Data));
    Out.Data.Expires = InExpires;
    Out.Data.Group = MakeShareable(new PlayFab::EntityModels::FEntityKey(InGroup.Data));

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityGroupApplication(
    const FBPEntityGroupApplication& In
    , FBPEntityEntityWithLineage& OutEntity
    , FDateTime& OutExpires
    , FBPEntityEntityKey& OutGroup
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    OutExpires = In.Data.Expires;
    if (In.Data.Group.IsValid()) { OutGroup.Data = *In.Data.Group; }

}

// GroupBlock
FBPEntityGroupBlock UPFEntityProxyLibrary::MakeBPEntityGroupBlock(
    FBPEntityEntityWithLineage InEntity
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityGroupBlock Out = FBPEntityGroupBlock();
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityWithLineage(InEntity.Data));
    Out.Data.Group = InGroup.Data;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityGroupBlock(
    const FBPEntityGroupBlock& In
    , FBPEntityEntityWithLineage& OutEntity
    , FBPEntityEntityKey& OutGroup
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    OutGroup.Data = In.Data.Group;

}

// GroupInvitation
FBPEntityGroupInvitation UPFEntityProxyLibrary::MakeBPEntityGroupInvitation(
    FDateTime InExpires
    , FBPEntityEntityKey InGroup
    , FBPEntityEntityWithLineage InInvitedByEntity
    , FBPEntityEntityWithLineage InInvitedEntity
    , FString InRoleId
)
{
    FBPEntityGroupInvitation Out = FBPEntityGroupInvitation();
    Out.Data.Expires = InExpires;
    Out.Data.Group = MakeShareable(new PlayFab::EntityModels::FEntityKey(InGroup.Data));
    Out.Data.InvitedByEntity = MakeShareable(new PlayFab::EntityModels::FEntityWithLineage(InInvitedByEntity.Data));
    Out.Data.InvitedEntity = MakeShareable(new PlayFab::EntityModels::FEntityWithLineage(InInvitedEntity.Data));
    Out.Data.RoleId = InRoleId;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityGroupInvitation(
    const FBPEntityGroupInvitation& In
    , FDateTime& OutExpires
    , FBPEntityEntityKey& OutGroup
    , FBPEntityEntityWithLineage& OutInvitedByEntity
    , FBPEntityEntityWithLineage& OutInvitedEntity
    , FString& OutRoleId
)
{
    OutExpires = In.Data.Expires;
    if (In.Data.Group.IsValid()) { OutGroup.Data = *In.Data.Group; }
    if (In.Data.InvitedByEntity.IsValid()) { OutInvitedByEntity.Data = *In.Data.InvitedByEntity; }
    if (In.Data.InvitedEntity.IsValid()) { OutInvitedEntity.Data = *In.Data.InvitedEntity; }
    OutRoleId = In.Data.RoleId;

}

// GroupRole
FBPEntityGroupRole UPFEntityProxyLibrary::MakeBPEntityGroupRole(
    FString InRoleId
    , FString InRoleName
)
{
    FBPEntityGroupRole Out = FBPEntityGroupRole();
    Out.Data.RoleId = InRoleId;
    Out.Data.RoleName = InRoleName;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityGroupRole(
    const FBPEntityGroupRole& In
    , FString& OutRoleId
    , FString& OutRoleName
)
{
    OutRoleId = In.Data.RoleId;
    OutRoleName = In.Data.RoleName;

}

// GroupWithRoles
FBPEntityGroupWithRoles UPFEntityProxyLibrary::MakeBPEntityGroupWithRoles(
    FBPEntityEntityKey InGroup
    , FString InGroupName
    , int32 InProfileVersion
    , TArray<FBPEntityGroupRole> InRoles
)
{
    FBPEntityGroupWithRoles Out = FBPEntityGroupWithRoles();
    Out.Data.Group = MakeShareable(new PlayFab::EntityModels::FEntityKey(InGroup.Data));
    Out.Data.GroupName = InGroupName;
    Out.Data.ProfileVersion = InProfileVersion;
    for (const FBPEntityGroupRole& elem : InRoles)
    {
        Out.Data.Roles.Add(elem.Data);
    }

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityGroupWithRoles(
    const FBPEntityGroupWithRoles& In
    , FBPEntityEntityKey& OutGroup
    , FString& OutGroupName
    , int32& OutProfileVersion
    , TArray<FBPEntityGroupRole>& OutRoles
)
{
    if (In.Data.Group.IsValid()) { OutGroup.Data = *In.Data.Group; }
    OutGroupName = In.Data.GroupName;
    OutProfileVersion = In.Data.ProfileVersion;
    for (const PlayFab::EntityModels::FGroupRole& elem : In.Data.Roles)
    {
        OutRoles.Add(FBPEntityGroupRole(elem));
    }

}

// InitiateFileUploadMetadata
FBPEntityInitiateFileUploadMetadata UPFEntityProxyLibrary::MakeBPEntityInitiateFileUploadMetadata(
    FString InFileName
    , FString InUploadUrl
)
{
    FBPEntityInitiateFileUploadMetadata Out = FBPEntityInitiateFileUploadMetadata();
    Out.Data.FileName = InFileName;
    Out.Data.UploadUrl = InUploadUrl;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntityInitiateFileUploadMetadata(
    const FBPEntityInitiateFileUploadMetadata& In
    , FString& OutFileName
    , FString& OutUploadUrl
)
{
    OutFileName = In.Data.FileName;
    OutUploadUrl = In.Data.UploadUrl;

}

// InitiateFileUploadsRequest
FBPEntityInitiateFileUploadsRequest UPFEntityProxyLibrary::MakeBPEntityInitiateFileUploadsRequest(
    FBPEntityEntityKey InEntity
    , TArray<FString> InFileNames
    , int32 InProfileVersion
)
{
    FBPEntityInitiateFileUploadsRequest Out = FBPEntityInitiateFileUploadsRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.FileNames = InFileNames;
    Out.Data.ProfileVersion = InProfileVersion;

    return Out;
}

// InitiateFileUploadsResponse
void UPFEntityProxyLibrary::BreakBPEntityInitiateFileUploadsResponse(
    const FBPEntityInitiateFileUploadsResponse& In
    , FBPEntityEntityKey& OutEntity
    , int32& OutProfileVersion
    , TArray<FBPEntityInitiateFileUploadMetadata>& OutUploadDetails
)
{
    if (In.Data.Entity.IsValid()) { OutEntity.Data = *In.Data.Entity; }
    OutProfileVersion = In.Data.ProfileVersion;
    for (const PlayFab::EntityModels::FInitiateFileUploadMetadata& elem : In.Data.UploadDetails)
    {
        OutUploadDetails.Add(FBPEntityInitiateFileUploadMetadata(elem));
    }

}

// InviteToGroupRequest
FBPEntityInviteToGroupRequest UPFEntityProxyLibrary::MakeBPEntityInviteToGroupRequest(
    bool InAutoAcceptOutstandingApplication
    , FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
    , FString InRoleId
)
{
    FBPEntityInviteToGroupRequest Out = FBPEntityInviteToGroupRequest();
    Out.Data.AutoAcceptOutstandingApplication = InAutoAcceptOutstandingApplication;
    Out.Data.Entity = InEntity.Data;
    Out.Data.Group = InGroup.Data;
    Out.Data.RoleId = InRoleId;

    return Out;
}

// InviteToGroupResponse
void UPFEntityProxyLibrary::BreakBPEntityInviteToGroupResponse(
    const FBPEntityInviteToGroupResponse& In
    , FDateTime& OutExpires
    , FBPEntityEntityKey& OutGroup
    , FBPEntityEntityWithLineage& OutInvitedByEntity
    , FBPEntityEntityWithLineage& OutInvitedEntity
    , FString& OutRoleId
)
{
    OutExpires = In.Data.Expires;
    if (In.Data.Group.IsValid()) { OutGroup.Data = *In.Data.Group; }
    if (In.Data.InvitedByEntity.IsValid()) { OutInvitedByEntity.Data = *In.Data.InvitedByEntity; }
    if (In.Data.InvitedEntity.IsValid()) { OutInvitedEntity.Data = *In.Data.InvitedEntity; }
    OutRoleId = In.Data.RoleId;

}

// IsMemberRequest
FBPEntityIsMemberRequest UPFEntityProxyLibrary::MakeBPEntityIsMemberRequest(
    FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
    , FString InRoleId
)
{
    FBPEntityIsMemberRequest Out = FBPEntityIsMemberRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.Group = InGroup.Data;
    Out.Data.RoleId = InRoleId;

    return Out;
}

// IsMemberResponse
void UPFEntityProxyLibrary::BreakBPEntityIsMemberResponse(
    const FBPEntityIsMemberResponse& In
    , bool& OutIsMember
)
{
    OutIsMember = In.Data.IsMember;

}

// ListGroupApplicationsRequest
FBPEntityListGroupApplicationsRequest UPFEntityProxyLibrary::MakeBPEntityListGroupApplicationsRequest(
    FBPEntityEntityKey InGroup
)
{
    FBPEntityListGroupApplicationsRequest Out = FBPEntityListGroupApplicationsRequest();
    Out.Data.Group = InGroup.Data;

    return Out;
}

// ListGroupApplicationsResponse
void UPFEntityProxyLibrary::BreakBPEntityListGroupApplicationsResponse(
    const FBPEntityListGroupApplicationsResponse& In
    , TArray<FBPEntityGroupApplication>& OutApplications
)
{
    for (const PlayFab::EntityModels::FGroupApplication& elem : In.Data.Applications)
    {
        OutApplications.Add(FBPEntityGroupApplication(elem));
    }

}

// ListGroupBlocksRequest
FBPEntityListGroupBlocksRequest UPFEntityProxyLibrary::MakeBPEntityListGroupBlocksRequest(
    FBPEntityEntityKey InGroup
)
{
    FBPEntityListGroupBlocksRequest Out = FBPEntityListGroupBlocksRequest();
    Out.Data.Group = InGroup.Data;

    return Out;
}

// ListGroupBlocksResponse
void UPFEntityProxyLibrary::BreakBPEntityListGroupBlocksResponse(
    const FBPEntityListGroupBlocksResponse& In
    , TArray<FBPEntityGroupBlock>& OutBlockedEntities
)
{
    for (const PlayFab::EntityModels::FGroupBlock& elem : In.Data.BlockedEntities)
    {
        OutBlockedEntities.Add(FBPEntityGroupBlock(elem));
    }

}

// ListGroupInvitationsRequest
FBPEntityListGroupInvitationsRequest UPFEntityProxyLibrary::MakeBPEntityListGroupInvitationsRequest(
    FBPEntityEntityKey InGroup
)
{
    FBPEntityListGroupInvitationsRequest Out = FBPEntityListGroupInvitationsRequest();
    Out.Data.Group = InGroup.Data;

    return Out;
}

// ListGroupInvitationsResponse
void UPFEntityProxyLibrary::BreakBPEntityListGroupInvitationsResponse(
    const FBPEntityListGroupInvitationsResponse& In
    , TArray<FBPEntityGroupInvitation>& OutInvitations
)
{
    for (const PlayFab::EntityModels::FGroupInvitation& elem : In.Data.Invitations)
    {
        OutInvitations.Add(FBPEntityGroupInvitation(elem));
    }

}

// ListGroupMembersRequest
FBPEntityListGroupMembersRequest UPFEntityProxyLibrary::MakeBPEntityListGroupMembersRequest(
    FBPEntityEntityKey InGroup
)
{
    FBPEntityListGroupMembersRequest Out = FBPEntityListGroupMembersRequest();
    Out.Data.Group = InGroup.Data;

    return Out;
}

// ListGroupMembersResponse
void UPFEntityProxyLibrary::BreakBPEntityListGroupMembersResponse(
    const FBPEntityListGroupMembersResponse& In
    , TArray<FBPEntityEntityMemberRole>& OutMembers
)
{
    for (const PlayFab::EntityModels::FEntityMemberRole& elem : In.Data.Members)
    {
        OutMembers.Add(FBPEntityEntityMemberRole(elem));
    }

}

// ListMembershipOpportunitiesRequest
FBPEntityListMembershipOpportunitiesRequest UPFEntityProxyLibrary::MakeBPEntityListMembershipOpportunitiesRequest(
    FBPEntityEntityKey InEntity
)
{
    FBPEntityListMembershipOpportunitiesRequest Out = FBPEntityListMembershipOpportunitiesRequest();
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityKey(InEntity.Data));

    return Out;
}

// ListMembershipOpportunitiesResponse
void UPFEntityProxyLibrary::BreakBPEntityListMembershipOpportunitiesResponse(
    const FBPEntityListMembershipOpportunitiesResponse& In
    , TArray<FBPEntityGroupApplication>& OutApplications
    , TArray<FBPEntityGroupInvitation>& OutInvitations
)
{
    for (const PlayFab::EntityModels::FGroupApplication& elem : In.Data.Applications)
    {
        OutApplications.Add(FBPEntityGroupApplication(elem));
    }
    for (const PlayFab::EntityModels::FGroupInvitation& elem : In.Data.Invitations)
    {
        OutInvitations.Add(FBPEntityGroupInvitation(elem));
    }

}

// ListMembershipRequest
FBPEntityListMembershipRequest UPFEntityProxyLibrary::MakeBPEntityListMembershipRequest(
    FBPEntityEntityKey InEntity
)
{
    FBPEntityListMembershipRequest Out = FBPEntityListMembershipRequest();
    Out.Data.Entity = MakeShareable(new PlayFab::EntityModels::FEntityKey(InEntity.Data));

    return Out;
}

// ListMembershipResponse
void UPFEntityProxyLibrary::BreakBPEntityListMembershipResponse(
    const FBPEntityListMembershipResponse& In
    , TArray<FBPEntityGroupWithRoles>& OutGroups
)
{
    for (const PlayFab::EntityModels::FGroupWithRoles& elem : In.Data.Groups)
    {
        OutGroups.Add(FBPEntityGroupWithRoles(elem));
    }

}

// ObjectResult
void UPFEntityProxyLibrary::BreakBPEntityObjectResult(
    const FBPEntityObjectResult& In
    , UPlayFabJsonValue*& OutDataObject
    , FString& OutEscapedDataObject
    , FString& OutObjectName
)
{
    UPlayFabJsonValue* DataObjectVal = NewObject<UPlayFabJsonValue>();
    DataObjectVal->SetRootValue(In.Data.DataObject.GetJsonValue());
    OutDataObject = DataObjectVal;
    OutEscapedDataObject = In.Data.EscapedDataObject;
    OutObjectName = In.Data.ObjectName;

}

// RemoveGroupApplicationRequest
FBPEntityRemoveGroupApplicationRequest UPFEntityProxyLibrary::MakeBPEntityRemoveGroupApplicationRequest(
    FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityRemoveGroupApplicationRequest Out = FBPEntityRemoveGroupApplicationRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.Group = InGroup.Data;

    return Out;
}

// RemoveGroupInvitationRequest
FBPEntityRemoveGroupInvitationRequest UPFEntityProxyLibrary::MakeBPEntityRemoveGroupInvitationRequest(
    FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityRemoveGroupInvitationRequest Out = FBPEntityRemoveGroupInvitationRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.Group = InGroup.Data;

    return Out;
}

// RemoveMembersRequest
FBPEntityRemoveMembersRequest UPFEntityProxyLibrary::MakeBPEntityRemoveMembersRequest(
    FBPEntityEntityKey InGroup
    , TArray<FBPEntityEntityKey> InMembers
    , FString InRoleId
)
{
    FBPEntityRemoveMembersRequest Out = FBPEntityRemoveMembersRequest();
    Out.Data.Group = InGroup.Data;
    for (const FBPEntityEntityKey& elem : InMembers)
    {
        Out.Data.Members.Add(elem.Data);
    }
    Out.Data.RoleId = InRoleId;

    return Out;
}

// SetEntityProfilePolicyRequest
FBPEntitySetEntityProfilePolicyRequest UPFEntityProxyLibrary::MakeBPEntitySetEntityProfilePolicyRequest(
    FBPEntityEntityKey InEntity
    , TArray<FBPEntityEntityPermissionStatement> InStatements
)
{
    FBPEntitySetEntityProfilePolicyRequest Out = FBPEntitySetEntityProfilePolicyRequest();
    Out.Data.Entity = InEntity.Data;
    for (const FBPEntityEntityPermissionStatement& elem : InStatements)
    {
        Out.Data.Statements.Add(elem.Data);
    }

    return Out;
}

// SetEntityProfilePolicyResponse
void UPFEntityProxyLibrary::BreakBPEntitySetEntityProfilePolicyResponse(
    const FBPEntitySetEntityProfilePolicyResponse& In
    , TArray<FBPEntityEntityPermissionStatement>& OutPermissions
)
{
    for (const PlayFab::EntityModels::FEntityPermissionStatement& elem : In.Data.Permissions)
    {
        OutPermissions.Add(FBPEntityEntityPermissionStatement(elem));
    }

}

// SetGlobalPolicyRequest
FBPEntitySetGlobalPolicyRequest UPFEntityProxyLibrary::MakeBPEntitySetGlobalPolicyRequest(
    TArray<FBPEntityEntityPermissionStatement> InPermissions
)
{
    FBPEntitySetGlobalPolicyRequest Out = FBPEntitySetGlobalPolicyRequest();
    for (const FBPEntityEntityPermissionStatement& elem : InPermissions)
    {
        Out.Data.Permissions.Add(elem.Data);
    }

    return Out;
}

// SetGlobalPolicyResponse
void UPFEntityProxyLibrary::BreakBPEntitySetGlobalPolicyResponse(
    const FBPEntitySetGlobalPolicyResponse& In
)
{

}

// SetObject
FBPEntitySetObject UPFEntityProxyLibrary::MakeBPEntitySetObject(
    UPlayFabJsonValue* InDataObject
    , bool InDeleteObject
    , FString InEscapedDataObject
    , FString InObjectName
)
{
    FBPEntitySetObject Out = FBPEntitySetObject();
    Out.Data.DataObject = InDataObject->GetRootValue();
    Out.Data.DeleteObject = InDeleteObject;
    Out.Data.EscapedDataObject = InEscapedDataObject;
    Out.Data.ObjectName = InObjectName;

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntitySetObject(
    const FBPEntitySetObject& In
    , UPlayFabJsonValue*& OutDataObject
    , bool& OutDeleteObject
    , FString& OutEscapedDataObject
    , FString& OutObjectName
)
{
    UPlayFabJsonValue* DataObjectVal = NewObject<UPlayFabJsonValue>();
    DataObjectVal->SetRootValue(In.Data.DataObject.GetJsonValue());
    OutDataObject = DataObjectVal;
    OutDeleteObject = In.Data.DeleteObject;
    OutEscapedDataObject = In.Data.EscapedDataObject;
    OutObjectName = In.Data.ObjectName;

}

// SetObjectInfo
FBPEntitySetObjectInfo UPFEntityProxyLibrary::MakeBPEntitySetObjectInfo(
    FString InObjectName
    , FString InOperationReason
    , EBPEntityOperationTypes InSetResult
)
{
    FBPEntitySetObjectInfo Out = FBPEntitySetObjectInfo();
    Out.Data.ObjectName = InObjectName;
    Out.Data.OperationReason = InOperationReason;
    Out.Data.SetResult = static_cast<PlayFab::EntityModels::OperationTypes>(static_cast<uint8>(InSetResult));

    return Out;
}
void UPFEntityProxyLibrary::BreakBPEntitySetObjectInfo(
    const FBPEntitySetObjectInfo& In
    , FString& OutObjectName
    , FString& OutOperationReason
    , EBPEntityOperationTypes& OutSetResult
)
{
    OutObjectName = In.Data.ObjectName;
    OutOperationReason = In.Data.OperationReason;
    if (In.Data.SetResult.notNull()) { OutSetResult = static_cast<EBPEntityOperationTypes>(static_cast<uint8>(In.Data.SetResult.mValue)); }

}

// SetObjectsRequest
FBPEntitySetObjectsRequest UPFEntityProxyLibrary::MakeBPEntitySetObjectsRequest(
    FBPEntityEntityKey InEntity
    , int32 InExpectedProfileVersion
    , TArray<FBPEntitySetObject> InObjects
)
{
    FBPEntitySetObjectsRequest Out = FBPEntitySetObjectsRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.ExpectedProfileVersion = InExpectedProfileVersion;
    for (const FBPEntitySetObject& elem : InObjects)
    {
        Out.Data.Objects.Add(elem.Data);
    }

    return Out;
}

// SetObjectsResponse
void UPFEntityProxyLibrary::BreakBPEntitySetObjectsResponse(
    const FBPEntitySetObjectsResponse& In
    , int32& OutProfileVersion
    , TArray<FBPEntitySetObjectInfo>& OutSetResults
)
{
    OutProfileVersion = In.Data.ProfileVersion;
    for (const PlayFab::EntityModels::FSetObjectInfo& elem : In.Data.SetResults)
    {
        OutSetResults.Add(FBPEntitySetObjectInfo(elem));
    }

}

// UnblockEntityRequest
FBPEntityUnblockEntityRequest UPFEntityProxyLibrary::MakeBPEntityUnblockEntityRequest(
    FBPEntityEntityKey InEntity
    , FBPEntityEntityKey InGroup
)
{
    FBPEntityUnblockEntityRequest Out = FBPEntityUnblockEntityRequest();
    Out.Data.Entity = InEntity.Data;
    Out.Data.Group = InGroup.Data;

    return Out;
}

// UpdateGroupRequest
FBPEntityUpdateGroupRequest UPFEntityProxyLibrary::MakeBPEntityUpdateGroupRequest(
    FString InAdminRoleId
    , int32 InExpectedProfileVersion
    , FBPEntityEntityKey InGroup
    , FString InGroupName
    , FString InMemberRoleId
)
{
    FBPEntityUpdateGroupRequest Out = FBPEntityUpdateGroupRequest();
    Out.Data.AdminRoleId = InAdminRoleId;
    Out.Data.ExpectedProfileVersion = InExpectedProfileVersion;
    Out.Data.Group = InGroup.Data;
    Out.Data.GroupName = InGroupName;
    Out.Data.MemberRoleId = InMemberRoleId;

    return Out;
}

// UpdateGroupResponse
void UPFEntityProxyLibrary::BreakBPEntityUpdateGroupResponse(
    const FBPEntityUpdateGroupResponse& In
    , FString& OutOperationReason
    , int32& OutProfileVersion
    , EBPEntityOperationTypes& OutSetResult
)
{
    OutOperationReason = In.Data.OperationReason;
    OutProfileVersion = In.Data.ProfileVersion;
    if (In.Data.SetResult.notNull()) { OutSetResult = static_cast<EBPEntityOperationTypes>(static_cast<uint8>(In.Data.SetResult.mValue)); }

}

// UpdateGroupRoleRequest
FBPEntityUpdateGroupRoleRequest UPFEntityProxyLibrary::MakeBPEntityUpdateGroupRoleRequest(
    int32 InExpectedProfileVersion
    , FBPEntityEntityKey InGroup
    , FString InRoleId
    , FString InRoleName
)
{
    FBPEntityUpdateGroupRoleRequest Out = FBPEntityUpdateGroupRoleRequest();
    Out.Data.ExpectedProfileVersion = InExpectedProfileVersion;
    Out.Data.Group = InGroup.Data;
    Out.Data.RoleId = InRoleId;
    Out.Data.RoleName = InRoleName;

    return Out;
}

// UpdateGroupRoleResponse
void UPFEntityProxyLibrary::BreakBPEntityUpdateGroupRoleResponse(
    const FBPEntityUpdateGroupRoleResponse& In
    , FString& OutOperationReason
    , int32& OutProfileVersion
    , EBPEntityOperationTypes& OutSetResult
)
{
    OutOperationReason = In.Data.OperationReason;
    OutProfileVersion = In.Data.ProfileVersion;
    if (In.Data.SetResult.notNull()) { OutSetResult = static_cast<EBPEntityOperationTypes>(static_cast<uint8>(In.Data.SetResult.mValue)); }

}

