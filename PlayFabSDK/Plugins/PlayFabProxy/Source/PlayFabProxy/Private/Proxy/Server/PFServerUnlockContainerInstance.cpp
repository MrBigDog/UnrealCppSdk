// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "PFServerUnlockContainerInstance.h"
#include "PlayFabProxy.h"
#include "PlayFab.h"

UPFServerUnlockContainerInstance::UPFServerUnlockContainerInstance(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
    , SuccessDelegate(PlayFab::UPlayFabServerAPI::FUnlockContainerInstanceDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
{
}

UPFServerUnlockContainerInstance* UPFServerUnlockContainerInstance::UnlockContainerInstance(class APlayerController* PlayerController, const FBPServerUnlockContainerInstanceRequest& InUnlockContainerInstanceRequest)
{
    UPFServerUnlockContainerInstance* Proxy = NewObject<UPFServerUnlockContainerInstance>();
    Proxy->PlayerControllerWeakPtr = PlayerController;
    Proxy->Request = InUnlockContainerInstanceRequest;
    
    return Proxy;
}

void UPFServerUnlockContainerInstance::Activate()
{
    // grab the module, so we can get a valid pointer to the client API
    PlayFabServerPtr ServerAPI = IPlayFabModuleInterface::Get().GetServerAPI();

    bool CallResult = false;

    if(ServerAPI.IsValid())
    {
        CallResult = ServerAPI->UnlockContainerInstance(Request.Data, SuccessDelegate, ErrorDelegate);
    }

    if(CallResult == false)
    {
        OnFailure.Broadcast();
    }
}

void UPFServerUnlockContainerInstance::OnSuccessCallback(const PlayFab::ServerModels::FUnlockContainerItemResult& Result)
{
    FBPServerUnlockContainerItemResult BPResult;
     BPResult.Data = Result;
     OnSuccess.Broadcast(BPResult);
}
